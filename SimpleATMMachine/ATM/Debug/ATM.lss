
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d2  00800060  00002334  000023c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800232  00800232  0000259a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000259a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004781  00000000  00000000  00002900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000117c  00000000  00000000  00007081  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002544  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c0  00000000  00000000  0000a744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ee1  00000000  00000000  0000af04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002776  00000000  00000000  0000bde5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000e55b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__vector_1>
       8:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__vector_2>
       c:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <__vector_3>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	f1 00       	.word	0x00f1	; ????
      56:	e5 00       	.word	0x00e5	; ????
      58:	08 01       	movw	r0, r16
      5a:	a6 01       	movw	r20, r12
      5c:	19 02       	muls	r17, r25
      5e:	cd 04       	cpc	r12, r13
      60:	40 02       	muls	r20, r16
      62:	79 03       	fmul	r23, r17
      64:	3e 04       	cpc	r3, r14
      66:	b0 04       	cpc	r11, r0

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf e5       	ldi	r28, 0x5F	; 95
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e6       	ldi	r26, 0x60	; 96
      78:	b0 e0       	ldi	r27, 0x00	; 0
      7a:	e4 e3       	ldi	r30, 0x34	; 52
      7c:	f3 e2       	ldi	r31, 0x23	; 35
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 33       	cpi	r26, 0x32	; 50
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a2 e3       	ldi	r26, 0x32	; 50
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 35       	cpi	r26, 0x5C	; 92
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b4 09 	call	0x1368	; 0x1368 <main>
      9e:	0c 94 98 11 	jmp	0x2330	; 0x2330 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <stillPressed>:
	}
}

void	stillPressed(void)
{
	pressingCounter++;
      a6:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <pressingCounter>
      aa:	8f 5f       	subi	r24, 0xFF	; 255
      ac:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <pressingCounter>
      b0:	08 95       	ret

000000b2 <atmTriggered>:
}

void	atmTriggered(void)
{
	atmState = RECEIVING_STATE;
      b2:	83 e0       	ldi	r24, 0x03	; 3
      b4:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
      b8:	08 95       	ret

000000ba <doNothing>:
}

void doNothing(void)
{
      ba:	ff cf       	rjmp	.-2      	; 0xba <doNothing>

000000bc <APP_init>:


void APP_init (void)
{
	/*step 1 -> initialize Timer & External Interrupt & SPI*/
	TIMER_init(TIMER_2);
      bc:	82 e0       	ldi	r24, 0x02	; 2
      be:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <TIMER_init>
	TIMER_stopInterrupt(TIMER_2);
      c2:	82 e0       	ldi	r24, 0x02	; 2
      c4:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <TIMER_stopInterrupt>
	//TIMER_setTime(100);
	TIMER_start(TIMER_2);
      c8:	82 e0       	ldi	r24, 0x02	; 2
      ca:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <TIMER_start>
	
	EXTINT_init(INT_0);
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	0e 94 9b 0b 	call	0x1736	; 0x1736 <EXTINT_init>
	
	SPI_initSlave();
      d4:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <SPI_initSlave>
	
	/*step 2 -> initialize LCD & Keypad & Buzzer & Enter\Zero button*/
	LCD_PinsInit();
      d8:	0e 94 90 09 	call	0x1320	; 0x1320 <LCD_PinsInit>
	LCD_Init();
      dc:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_Init>
	BUTTON_init(BUTTON_1_PORT, BUTTON_1_Pin); 
      e0:	62 e0       	ldi	r22, 0x02	; 2
      e2:	82 e4       	ldi	r24, 0x42	; 66
      e4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <BUTTON_init>
	BUZZER_init(BUZZER_0);
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 48 06 	call	0xc90	; 0xc90 <BUZZER_init>
	KEYPAD_init();
      ee:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <KEYPAD_init>
	
	/*step 3 -> initialize set buttonFunction as a call back function to external interrupt*/
	EXTINT_setCallBackInt(INT_0, atmTriggered);
      f2:	69 e5       	ldi	r22, 0x59	; 89
      f4:	70 e0       	ldi	r23, 0x00	; 0
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	0e 94 cf 0b 	call	0x179e	; 0x179e <EXTINT_setCallBackInt>
	TIMER_setCallBack(TIMER_2, stillPressed);
      fc:	63 e5       	ldi	r22, 0x53	; 83
      fe:	70 e0       	ldi	r23, 0x00	; 0
     100:	82 e0       	ldi	r24, 0x02	; 2
     102:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <TIMER_setCallBack>
	
	
	while (SPI_transmitByte(0x55) != 0xAA)
     106:	07 c0       	rjmp	.+14     	; 0x116 <APP_init+0x5a>
	TIMER_delay(TIMER_2,10);
     108:	4a e0       	ldi	r20, 0x0A	; 10
     10a:	50 e0       	ldi	r21, 0x00	; 0
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	70 e0       	ldi	r23, 0x00	; 0
     110:	82 e0       	ldi	r24, 0x02	; 2
     112:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
	/*step 3 -> initialize set buttonFunction as a call back function to external interrupt*/
	EXTINT_setCallBackInt(INT_0, atmTriggered);
	TIMER_setCallBack(TIMER_2, stillPressed);
	
	
	while (SPI_transmitByte(0x55) != 0xAA)
     116:	85 e5       	ldi	r24, 0x55	; 85
     118:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <SPI_transmitByte>
     11c:	8a 3a       	cpi	r24, 0xAA	; 170
     11e:	a1 f7       	brne	.-24     	; 0x108 <APP_init+0x4c>
     120:	07 c0       	rjmp	.+14     	; 0x130 <APP_init+0x74>
	TIMER_delay(TIMER_2,10);
	
	while (SPI_transmitByte(0x55) != 0xAA)
	TIMER_delay(TIMER_2,10);
     122:	4a e0       	ldi	r20, 0x0A	; 10
     124:	50 e0       	ldi	r21, 0x00	; 0
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	82 e0       	ldi	r24, 0x02	; 2
     12c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
	
	
	while (SPI_transmitByte(0x55) != 0xAA)
	TIMER_delay(TIMER_2,10);
	
	while (SPI_transmitByte(0x55) != 0xAA)
     130:	85 e5       	ldi	r24, 0x55	; 85
     132:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <SPI_transmitByte>
     136:	8a 3a       	cpi	r24, 0xAA	; 170
     138:	a1 f7       	brne	.-24     	; 0x122 <APP_init+0x66>
     13a:	07 c0       	rjmp	.+14     	; 0x14a <APP_init+0x8e>
	TIMER_delay(TIMER_2,10);
	
	while (SPI_transmitByte(0x55) != 0xAA)
	TIMER_delay(TIMER_2,10);
     13c:	4a e0       	ldi	r20, 0x0A	; 10
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	70 e0       	ldi	r23, 0x00	; 0
     144:	82 e0       	ldi	r24, 0x02	; 2
     146:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
	TIMER_delay(TIMER_2,10);
	
	while (SPI_transmitByte(0x55) != 0xAA)
	TIMER_delay(TIMER_2,10);
	
	while (SPI_transmitByte(0x55) != 0xAA)
     14a:	85 e5       	ldi	r24, 0x55	; 85
     14c:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <SPI_transmitByte>
     150:	8a 3a       	cpi	r24, 0xAA	; 170
     152:	a1 f7       	brne	.-24     	; 0x13c <APP_init+0x80>
	TIMER_delay(TIMER_2,10);
	
}
     154:	08 95       	ret

00000156 <APP_superLoop>:

void APP_superLoop (void)
{
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	ab 97       	sbiw	r28, 0x2b	; 43
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	f8 94       	cli
     164:	de bf       	out	0x3e, r29	; 62
     166:	0f be       	out	0x3f, r0	; 63
     168:	cd bf       	out	0x3d, r28	; 61
	u8 keyPressed = 0, counter = 0, byteReceived = 0, trials = 0, digits = 0, location = 0;
	f32 amountEntered = 1, remainingBalance = 0;
     16a:	19 82       	std	Y+1, r1	; 0x01
     16c:	1a 82       	std	Y+2, r1	; 0x02
     16e:	1b 82       	std	Y+3, r1	; 0x03
     170:	1c 82       	std	Y+4, r1	; 0x04
	u32 copy = 0;
	u8 transAmount[9] = {"00000.00"} ;
     172:	89 e0       	ldi	r24, 0x09	; 9
     174:	e9 e2       	ldi	r30, 0x29	; 41
     176:	f2 e0       	ldi	r31, 0x02	; 2
     178:	de 01       	movw	r26, r28
     17a:	15 96       	adiw	r26, 0x05	; 5
     17c:	01 90       	ld	r0, Z+
     17e:	0d 92       	st	X+, r0
     180:	8a 95       	dec	r24
     182:	e1 f7       	brne	.-8      	; 0x17c <APP_superLoop+0x26>
	u8 pinEntered[5] = {0};
     184:	fe 01       	movw	r30, r28
     186:	3e 96       	adiw	r30, 0x0e	; 14
     188:	85 e0       	ldi	r24, 0x05	; 5
     18a:	df 01       	movw	r26, r30
     18c:	1d 92       	st	X+, r1
     18e:	8a 95       	dec	r24
     190:	e9 f7       	brne	.-6      	; 0x18c <APP_superLoop+0x36>

	ST_cardData_t cardHolderData = {{0,0}};
     192:	35 96       	adiw	r30, 0x05	; 5
     194:	89 e1       	ldi	r24, 0x19	; 25
     196:	df 01       	movw	r26, r30
     198:	1d 92       	st	X+, r1
     19a:	8a 95       	dec	r24
     19c:	e9 f7       	brne	.-6      	; 0x198 <APP_superLoop+0x42>

void APP_superLoop (void)
{
	u8 keyPressed = 0, counter = 0, byteReceived = 0, trials = 0, digits = 0, location = 0;
	f32 amountEntered = 1, remainingBalance = 0;
	u32 copy = 0;
     19e:	c1 2c       	mov	r12, r1
     1a0:	d1 2c       	mov	r13, r1
     1a2:	76 01       	movw	r14, r12
}

void APP_superLoop (void)
{
	u8 keyPressed = 0, counter = 0, byteReceived = 0, trials = 0, digits = 0, location = 0;
	f32 amountEntered = 1, remainingBalance = 0;
     1a4:	0f 2e       	mov	r0, r31
     1a6:	41 2c       	mov	r4, r1
     1a8:	51 2c       	mov	r5, r1
     1aa:	f0 e8       	ldi	r31, 0x80	; 128
     1ac:	6f 2e       	mov	r6, r31
     1ae:	ff e3       	ldi	r31, 0x3F	; 63
     1b0:	7f 2e       	mov	r7, r31
     1b2:	f0 2d       	mov	r31, r0
	
}

void APP_superLoop (void)
{
	u8 keyPressed = 0, counter = 0, byteReceived = 0, trials = 0, digits = 0, location = 0;
     1b4:	b1 2c       	mov	r11, r1
     1b6:	a1 2c       	mov	r10, r1
     1b8:	08 c0       	rjmp	.+16     	; 0x1ca <APP_superLoop+0x74>
			if(amountEntered == 0.01)
			{
				amountEntered = 0;
			}
			transState = SERVER_recieveTransactionData(&remainingBalance, amountEntered, &cardHolderData);
			amountEntered = 1;
     1ba:	0f 2e       	mov	r0, r31
     1bc:	41 2c       	mov	r4, r1
     1be:	51 2c       	mov	r5, r1
     1c0:	f0 e8       	ldi	r31, 0x80	; 128
     1c2:	6f 2e       	mov	r6, r31
     1c4:	ff e3       	ldi	r31, 0x3F	; 63
     1c6:	7f 2e       	mov	r7, r31
     1c8:	f0 2d       	mov	r31, r0
	ST_cardData_t cardHolderData = {{0,0}};
	EN_transState_t transState = APPROVED;
	
	while (1)
	{
		switch (atmState)		
     1ca:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__data_end>
     1ce:	8e 2f       	mov	r24, r30
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	8a 30       	cpi	r24, 0x0A	; 10
     1d4:	91 05       	cpc	r25, r1
     1d6:	c8 f7       	brcc	.-14     	; 0x1ca <APP_superLoop+0x74>
     1d8:	fc 01       	movw	r30, r24
     1da:	e6 5d       	subi	r30, 0xD6	; 214
     1dc:	ff 4f       	sbci	r31, 0xFF	; 255
     1de:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__tablejump2__>
		{
			case RESETTING_STATE:
			/*step 1 -> Welcome message is displayed for 1s "Welcome to ATM"*/
			LCD_Clear();
     1e2:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Clear>
			LCD_WriteString("Welcome to ATM");
     1e6:	82 e5       	ldi	r24, 0x52	; 82
     1e8:	91 e0       	ldi	r25, 0x01	; 1
     1ea:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
			TIMER_delay(TIMER_2, 1000);
     1ee:	48 ee       	ldi	r20, 0xE8	; 232
     1f0:	53 e0       	ldi	r21, 0x03	; 3
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	70 e0       	ldi	r23, 0x00	; 0
     1f6:	82 e0       	ldi	r24, 0x02	; 2
     1f8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
			LCD_Clear();
     1fc:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Clear>
			/*step 2 -> "Insert a Card" message is displayed in the first line*/
			LCD_WriteString("Insert a Card");
     200:	81 e6       	ldi	r24, 0x61	; 97
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
			//TIMER_delay(TIMER_2, 1000);
			
			/*step 3 -> BLOCKED_STATE till interrupt triggered which tiggers PIN_STATE*/
			atmState = BLOCKED_STATE;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
			break;
     20e:	dd cf       	rjmp	.-70     	; 0x1ca <APP_superLoop+0x74>
			/*DO NOTHING*/
			break;
			
			/*step 4 -> "Enter Your Pin" message is displayed in the first line*/
			case PIN_STATE:
			LCD_Clear();
     210:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Clear>
			LCD_WriteString("Enter Your Pin");
     214:	8f e6       	ldi	r24, 0x6F	; 111
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
			
			/*step 5 -> Waiting for the input from the keypad and type it in '****' format in the second line*/
			LCD_SetCursor(1,0);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_SetCursor>
			keyPressed = KEYPAD_read();
     224:	0e 94 a7 06 	call	0xd4e	; 0xd4e <KEYPAD_read>
			
			/*step 6 -> Pin is only 4 numeric characters*/
			counter = 0;
     228:	10 e0       	ldi	r17, 0x00	; 0
			while(counter < 4)
     22a:	44 c0       	rjmp	.+136    	; 0x2b4 <APP_superLoop+0x15e>
			{
				keyPressed = KEYPAD_read();
     22c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <KEYPAD_read>
     230:	08 2f       	mov	r16, r24
				if (keyPressed)
     232:	88 23       	and	r24, r24
     234:	61 f0       	breq	.+24     	; 0x24e <APP_superLoop+0xf8>
				{
					LCD_WriteChar("*");
     236:	8e e7       	ldi	r24, 0x7E	; 126
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	0e 94 61 09 	call	0x12c2	; 0x12c2 <LCD_WriteChar>
					pinEntered[counter] = keyPressed;
     23e:	ee e0       	ldi	r30, 0x0E	; 14
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	ec 0f       	add	r30, r28
     244:	fd 1f       	adc	r31, r29
     246:	e1 0f       	add	r30, r17
     248:	f1 1d       	adc	r31, r1
     24a:	00 83       	st	Z, r16
					counter ++;
     24c:	1f 5f       	subi	r17, 0xFF	; 255
				}
				
				BUTTON_read(BUTTON_1_PORT, BUTTON_1_Pin, &buttonState);
     24e:	46 e5       	ldi	r20, 0x56	; 86
     250:	52 e0       	ldi	r21, 0x02	; 2
     252:	62 e0       	ldi	r22, 0x02	; 2
     254:	82 e4       	ldi	r24, 0x42	; 66
     256:	0e 94 3c 06 	call	0xc78	; 0xc78 <BUTTON_read>
				
				if (buttonState)
     25a:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <buttonState>
     25e:	88 23       	and	r24, r24
     260:	49 f1       	breq	.+82     	; 0x2b4 <APP_superLoop+0x15e>
				{
					TIMER_delay(TIMER_2, 60);
     262:	4c e3       	ldi	r20, 0x3C	; 60
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	82 e0       	ldi	r24, 0x02	; 2
     26c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
					BUTTON_read(BUTTON_1_PORT, BUTTON_1_Pin, &buttonState);
     270:	46 e5       	ldi	r20, 0x56	; 86
     272:	52 e0       	ldi	r21, 0x02	; 2
     274:	62 e0       	ldi	r22, 0x02	; 2
     276:	82 e4       	ldi	r24, 0x42	; 66
     278:	0e 94 3c 06 	call	0xc78	; 0xc78 <BUTTON_read>
					if (buttonState)
     27c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <buttonState>
     280:	81 11       	cpse	r24, r1
     282:	07 c0       	rjmp	.+14     	; 0x292 <APP_superLoop+0x13c>
     284:	17 c0       	rjmp	.+46     	; 0x2b4 <APP_superLoop+0x15e>
					{
						while (buttonState)
						{
							BUTTON_read(BUTTON_1_PORT, BUTTON_1_Pin, &buttonState);
     286:	46 e5       	ldi	r20, 0x56	; 86
     288:	52 e0       	ldi	r21, 0x02	; 2
     28a:	62 e0       	ldi	r22, 0x02	; 2
     28c:	82 e4       	ldi	r24, 0x42	; 66
     28e:	0e 94 3c 06 	call	0xc78	; 0xc78 <BUTTON_read>
				{
					TIMER_delay(TIMER_2, 60);
					BUTTON_read(BUTTON_1_PORT, BUTTON_1_Pin, &buttonState);
					if (buttonState)
					{
						while (buttonState)
     292:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <buttonState>
     296:	81 11       	cpse	r24, r1
     298:	f6 cf       	rjmp	.-20     	; 0x286 <APP_superLoop+0x130>
						{
							BUTTON_read(BUTTON_1_PORT, BUTTON_1_Pin, &buttonState);
						}
						
						LCD_WriteChar("*");
     29a:	8e e7       	ldi	r24, 0x7E	; 126
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <LCD_WriteChar>
						pinEntered[counter] = '0';
     2a2:	ee e0       	ldi	r30, 0x0E	; 14
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	ec 0f       	add	r30, r28
     2a8:	fd 1f       	adc	r31, r29
     2aa:	e1 0f       	add	r30, r17
     2ac:	f1 1d       	adc	r31, r1
     2ae:	80 e3       	ldi	r24, 0x30	; 48
     2b0:	80 83       	st	Z, r24
						counter++;
     2b2:	1f 5f       	subi	r17, 0xFF	; 255
			LCD_SetCursor(1,0);
			keyPressed = KEYPAD_read();
			
			/*step 6 -> Pin is only 4 numeric characters*/
			counter = 0;
			while(counter < 4)
     2b4:	14 30       	cpi	r17, 0x04	; 4
     2b6:	08 f4       	brcc	.+2      	; 0x2ba <APP_superLoop+0x164>
     2b8:	b9 cf       	rjmp	.-142    	; 0x22c <APP_superLoop+0xd6>
     2ba:	42 c0       	rjmp	.+132    	; 0x340 <APP_superLoop+0x1ea>
		
			while( atmState == PIN_STATE)			
			{
				
				//pressingCounter = 0;
				BUTTON_read(BUTTON_1_PORT, BUTTON_1_Pin, &buttonState);
     2bc:	46 e5       	ldi	r20, 0x56	; 86
     2be:	52 e0       	ldi	r21, 0x02	; 2
     2c0:	62 e0       	ldi	r22, 0x02	; 2
     2c2:	82 e4       	ldi	r24, 0x42	; 66
     2c4:	0e 94 3c 06 	call	0xc78	; 0xc78 <BUTTON_read>
				if (buttonState)
     2c8:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <buttonState>
     2cc:	88 23       	and	r24, r24
     2ce:	c1 f1       	breq	.+112    	; 0x340 <APP_superLoop+0x1ea>
				{
					TIMER_delay(TIMER_2, 60);
     2d0:	4c e3       	ldi	r20, 0x3C	; 60
     2d2:	50 e0       	ldi	r21, 0x00	; 0
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	82 e0       	ldi	r24, 0x02	; 2
     2da:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
					BUTTON_read(BUTTON_1_PORT, BUTTON_1_Pin, &buttonState);
     2de:	46 e5       	ldi	r20, 0x56	; 86
     2e0:	52 e0       	ldi	r21, 0x02	; 2
     2e2:	62 e0       	ldi	r22, 0x02	; 2
     2e4:	82 e4       	ldi	r24, 0x42	; 66
     2e6:	0e 94 3c 06 	call	0xc78	; 0xc78 <BUTTON_read>
					if (buttonState)
     2ea:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <buttonState>
     2ee:	88 23       	and	r24, r24
     2f0:	39 f1       	breq	.+78     	; 0x340 <APP_superLoop+0x1ea>
					{
						TIMER_setTime(TIMER_2,100);
     2f2:	44 e6       	ldi	r20, 0x64	; 100
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	60 e0       	ldi	r22, 0x00	; 0
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	0e 94 a5 0c 	call	0x194a	; 0x194a <TIMER_setTime>
						TIMER_start(TIMER_2);
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <TIMER_start>
						TIMER_enableInterrupt(TIMER_2);
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <TIMER_enableInterrupt>
						while (buttonState)
     30c:	06 c0       	rjmp	.+12     	; 0x31a <APP_superLoop+0x1c4>
						{
							BUTTON_read(BUTTON_1_PORT, BUTTON_1_Pin, &buttonState);
     30e:	46 e5       	ldi	r20, 0x56	; 86
     310:	52 e0       	ldi	r21, 0x02	; 2
     312:	62 e0       	ldi	r22, 0x02	; 2
     314:	82 e4       	ldi	r24, 0x42	; 66
     316:	0e 94 3c 06 	call	0xc78	; 0xc78 <BUTTON_read>
					if (buttonState)
					{
						TIMER_setTime(TIMER_2,100);
						TIMER_start(TIMER_2);
						TIMER_enableInterrupt(TIMER_2);
						while (buttonState)
     31a:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <buttonState>
     31e:	81 11       	cpse	r24, r1
     320:	f6 cf       	rjmp	.-20     	; 0x30e <APP_superLoop+0x1b8>
						{
							BUTTON_read(BUTTON_1_PORT, BUTTON_1_Pin, &buttonState);
						}
						if (pressingCounter >= 10)
     322:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <pressingCounter>
     326:	8a 30       	cpi	r24, 0x0A	; 10
     328:	18 f0       	brcs	.+6      	; 0x330 <APP_superLoop+0x1da>
						{
							atmState = VALIDATING_PIN_STATE;
     32a:	84 e0       	ldi	r24, 0x04	; 4
     32c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
						}
						else
						{
							/*DO NOTHING*/
						}
						TIMER_stopInterrupt(TIMER_2);
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <TIMER_stopInterrupt>
						TIMER_stop(TIMER_2);
     336:	82 e0       	ldi	r24, 0x02	; 2
     338:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <TIMER_stop>
						pressingCounter = 0;
     33c:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <pressingCounter>
			
			}
			
			/*step 7 -> Pressing the Zero\Enter button for 2s will get the card details from card*/
		
			while( atmState == PIN_STATE)			
     340:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <__data_end>
     344:	82 30       	cpi	r24, 0x02	; 2
     346:	09 f4       	brne	.+2      	; 0x34a <APP_superLoop+0x1f4>
     348:	b9 cf       	rjmp	.-142    	; 0x2bc <APP_superLoop+0x166>
     34a:	3f cf       	rjmp	.-386    	; 0x1ca <APP_superLoop+0x74>
			}
			
			break;
			
			case RECEIVING_STATE:
			LCD_Clear();
     34c:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Clear>
			LCD_WriteString("Receiving");
     350:	80 e8       	ldi	r24, 0x80	; 128
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
			TIMER_delay(TIMER_2,1000);
     358:	48 ee       	ldi	r20, 0xE8	; 232
     35a:	53 e0       	ldi	r21, 0x03	; 3
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
			
			counter = 0;
			while (SPI_transmitByte(0x55) == 0)
     366:	07 c0       	rjmp	.+14     	; 0x376 <APP_superLoop+0x220>
			TIMER_delay(TIMER_2,10);
     368:	4a e0       	ldi	r20, 0x0A	; 10
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
			LCD_Clear();
			LCD_WriteString("Receiving");
			TIMER_delay(TIMER_2,1000);
			
			counter = 0;
			while (SPI_transmitByte(0x55) == 0)
     376:	85 e5       	ldi	r24, 0x55	; 85
     378:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <SPI_transmitByte>
     37c:	88 23       	and	r24, r24
     37e:	a1 f3       	breq	.-24     	; 0x368 <APP_superLoop+0x212>
     380:	10 e0       	ldi	r17, 0x00	; 0
     382:	12 c0       	rjmp	.+36     	; 0x3a8 <APP_superLoop+0x252>
			TIMER_delay(TIMER_2,10);
			
			while (counter < 20)
			{
				byteReceived  = SPI_transmitByte(0xBB);
     384:	8b eb       	ldi	r24, 0xBB	; 187
     386:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <SPI_transmitByte>
				if (byteReceived >= '0' || byteReceived <= '9')
				{
					
					cardHolderData.primaryAcountNumber[counter] = byteReceived;
     38a:	e3 e1       	ldi	r30, 0x13	; 19
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	ec 0f       	add	r30, r28
     390:	fd 1f       	adc	r31, r29
     392:	e1 0f       	add	r30, r17
     394:	f1 1d       	adc	r31, r1
     396:	80 83       	st	Z, r24
					counter++;
     398:	1f 5f       	subi	r17, 0xFF	; 255
					break;
				}
				
				byteReceived = 255;
				
				TIMER_delay(TIMER_2,10);
     39a:	4a e0       	ldi	r20, 0x0A	; 10
     39c:	50 e0       	ldi	r21, 0x00	; 0
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	70 e0       	ldi	r23, 0x00	; 0
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
			
			counter = 0;
			while (SPI_transmitByte(0x55) == 0)
			TIMER_delay(TIMER_2,10);
			
			while (counter < 20)
     3a8:	14 31       	cpi	r17, 0x14	; 20
     3aa:	60 f3       	brcs	.-40     	; 0x384 <APP_superLoop+0x22e>
				byteReceived = 255;
				
				TIMER_delay(TIMER_2,10);
				
			}
			cardHolderData.primaryAcountNumber[counter] = 0;
     3ac:	e3 e1       	ldi	r30, 0x13	; 19
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	ec 0f       	add	r30, r28
     3b2:	fd 1f       	adc	r31, r29
     3b4:	e1 0f       	add	r30, r17
     3b6:	f1 1d       	adc	r31, r1
     3b8:	10 82       	st	Z, r1
			
			counter = 0;
			byteReceived = 255;
			
			while (SPI_transmitByte(0x55) == 0)
     3ba:	07 c0       	rjmp	.+14     	; 0x3ca <APP_superLoop+0x274>
			TIMER_delay(TIMER_2,10);
     3bc:	4a e0       	ldi	r20, 0x0A	; 10
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	82 e0       	ldi	r24, 0x02	; 2
     3c6:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
			cardHolderData.primaryAcountNumber[counter] = 0;
			
			counter = 0;
			byteReceived = 255;
			
			while (SPI_transmitByte(0x55) == 0)
     3ca:	85 e5       	ldi	r24, 0x55	; 85
     3cc:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <SPI_transmitByte>
     3d0:	88 23       	and	r24, r24
     3d2:	a1 f3       	breq	.-24     	; 0x3bc <APP_superLoop+0x266>
     3d4:	10 e0       	ldi	r17, 0x00	; 0
     3d6:	12 c0       	rjmp	.+36     	; 0x3fc <APP_superLoop+0x2a6>
			TIMER_delay(TIMER_2,10);
			
			while (counter < 5)
			{
				byteReceived  = SPI_transmitByte(0xCC);
     3d8:	8c ec       	ldi	r24, 0xCC	; 204
     3da:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <SPI_transmitByte>
				if (byteReceived >= '0' || byteReceived <= '9')
				{

					cardHolderData.PIN[counter] = byteReceived;
     3de:	e7 e2       	ldi	r30, 0x27	; 39
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	ec 0f       	add	r30, r28
     3e4:	fd 1f       	adc	r31, r29
     3e6:	e1 0f       	add	r30, r17
     3e8:	f1 1d       	adc	r31, r1
     3ea:	80 83       	st	Z, r24
					counter++;
     3ec:	1f 5f       	subi	r17, 0xFF	; 255
					break;
				}
				
				byteReceived = 255;
				
				TIMER_delay(TIMER_2,10);
     3ee:	4a e0       	ldi	r20, 0x0A	; 10
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	82 e0       	ldi	r24, 0x02	; 2
     3f8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
			byteReceived = 255;
			
			while (SPI_transmitByte(0x55) == 0)
			TIMER_delay(TIMER_2,10);
			
			while (counter < 5)
     3fc:	15 30       	cpi	r17, 0x05	; 5
     3fe:	60 f3       	brcs	.-40     	; 0x3d8 <APP_superLoop+0x282>
				byteReceived = 255;
				
				TIMER_delay(TIMER_2,10);
				
			}
			cardHolderData.PIN[5] = 0;
     400:	1c a6       	std	Y+44, r1	; 0x2c
			//LCD_SetCursor(1,0);
			//LCD_WriteString(cardHolderData.PIN);
			//TIMER_delay(TIMER_2, 1000);
			
			
			atmState = PIN_STATE;
     402:	82 e0       	ldi	r24, 0x02	; 2
     404:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
			
			break;
     408:	e0 ce       	rjmp	.-576    	; 0x1ca <APP_superLoop+0x74>
			case VALIDATING_PIN_STATE:
			
			counter = 0;
			while (counter < 4)
			{
				if(pinEntered[counter] == cardHolderData.PIN [counter])
     40a:	82 2f       	mov	r24, r18
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	ee e0       	ldi	r30, 0x0E	; 14
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	ec 0f       	add	r30, r28
     414:	fd 1f       	adc	r31, r29
     416:	e8 0f       	add	r30, r24
     418:	f9 1f       	adc	r31, r25
     41a:	30 81       	ld	r19, Z
     41c:	e7 e2       	ldi	r30, 0x27	; 39
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	ec 0f       	add	r30, r28
     422:	fd 1f       	adc	r31, r29
     424:	e8 0f       	add	r30, r24
     426:	f9 1f       	adc	r31, r25
     428:	80 81       	ld	r24, Z
     42a:	38 13       	cpse	r19, r24
     42c:	05 c0       	rjmp	.+10     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
				{
					counter ++;	
     42e:	2f 5f       	subi	r18, 0xFF	; 255
     430:	01 c0       	rjmp	.+2      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	ST_cardData_t cardHolderData = {{0,0}};
	EN_transState_t transState = APPROVED;
	
	while (1)
	{
		switch (atmState)		
     432:	20 e0       	ldi	r18, 0x00	; 0
			
			/*step 8 -> validate the pin*/
			case VALIDATING_PIN_STATE:
			
			counter = 0;
			while (counter < 4)
     434:	24 30       	cpi	r18, 0x04	; 4
     436:	48 f3       	brcs	.-46     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
				}
			}

			
			/*step 9 -> if wrong go to step 4, trails are 2*/
			if (counter != 4)
     438:	24 30       	cpi	r18, 0x04	; 4
     43a:	59 f0       	breq	.+22     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
			{
				atmState = PIN_STATE;
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
				trials++;
     442:	a3 94       	inc	r10
			/*step 10 -> if trails exceeded go to ALARM_STATE*/
				if (trials > 2)
     444:	8a 15       	cp	r24, r10
     446:	08 f0       	brcs	.+2      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
     448:	c0 ce       	rjmp	.-640    	; 0x1ca <APP_superLoop+0x74>
				{
					atmState = ALARM_STATE;
     44a:	85 e0       	ldi	r24, 0x05	; 5
     44c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
     450:	bc ce       	rjmp	.-648    	; 0x1ca <APP_superLoop+0x74>
				}
			}
			/*step 11 -> If correct go to WITHDRAWL_STATE*/
			else
			{
				atmState = WITHDRAWL_STATE;
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
				transAmount[0] = '0';
     458:	80 e3       	ldi	r24, 0x30	; 48
     45a:	8d 83       	std	Y+5, r24	; 0x05
				transAmount[1] = '0';
     45c:	8e 83       	std	Y+6, r24	; 0x06
				transAmount[2] = '0';
     45e:	8f 83       	std	Y+7, r24	; 0x07
				transAmount[3] = '0';
     460:	88 87       	std	Y+8, r24	; 0x08
				transAmount[4] = '0';
     462:	89 87       	std	Y+9, r24	; 0x09
				transAmount[5] = '.';
     464:	9e e2       	ldi	r25, 0x2E	; 46
     466:	9a 87       	std	Y+10, r25	; 0x0a
				transAmount[6] = '0';
     468:	8b 87       	std	Y+11, r24	; 0x0b
				transAmount[7] = '0';
     46a:	8c 87       	std	Y+12, r24	; 0x0c
				amountEntered = 1;
     46c:	0f 2e       	mov	r0, r31
     46e:	41 2c       	mov	r4, r1
     470:	51 2c       	mov	r5, r1
     472:	f0 e8       	ldi	r31, 0x80	; 128
     474:	6f 2e       	mov	r6, r31
     476:	ff e3       	ldi	r31, 0x3F	; 63
     478:	7f 2e       	mov	r7, r31
     47a:	f0 2d       	mov	r31, r0
				digits = 0;
     47c:	b1 2c       	mov	r11, r1
     47e:	a5 ce       	rjmp	.-694    	; 0x1ca <APP_superLoop+0x74>

			/*step 12 -> "Enter Amount"  is displayed in the first line*/
			case WITHDRAWL_STATE:
			
			
			LCD_Clear();
     480:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Clear>
			LCD_WriteString("Enter Amount");
     484:	8a e8       	ldi	r24, 0x8A	; 138
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
			/*step 12 -> input your withdrawal using keypad and written in the form of 0000.00*/
			LCD_SetCursor(1,0);
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_SetCursor>
			LCD_WriteString(transAmount);
     494:	ce 01       	movw	r24, r28
     496:	05 96       	adiw	r24, 0x05	; 5
     498:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>

			keyPressed = 0;
			
			keyPressed = KEYPAD_read();
     49c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <KEYPAD_read>
     4a0:	88 2e       	mov	r8, r24
			
			counter	= 0;

			
			while (keyPressed == 0)
     4a2:	23 c1       	rjmp	.+582    	; 0x6ea <__EEPROM_REGION_LENGTH__+0x2ea>
			{
				LCD_SetCursor(1,0);
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_SetCursor>
				
				keyPressed = KEYPAD_read();
     4ac:	0e 94 a7 06 	call	0xd4e	; 0xd4e <KEYPAD_read>
     4b0:	88 2e       	mov	r8, r24
				if (keyPressed)
     4b2:	88 23       	and	r24, r24
     4b4:	09 f4       	brne	.+2      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     4b6:	75 c0       	rjmp	.+234    	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
				{
					if (digits)
     4b8:	bb 20       	and	r11, r11
     4ba:	01 f1       	breq	.+64     	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
					{
						amountEntered *= 10;
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	40 e2       	ldi	r20, 0x20	; 32
     4c2:	51 e4       	ldi	r21, 0x41	; 65
     4c4:	c3 01       	movw	r24, r6
     4c6:	b2 01       	movw	r22, r4
     4c8:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__mulsf3>
     4cc:	6b 01       	movw	r12, r22
     4ce:	7c 01       	movw	r14, r24
						amountEntered += (keyPressed - 48);
     4d0:	68 2d       	mov	r22, r8
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	60 53       	subi	r22, 0x30	; 48
     4d6:	71 09       	sbc	r23, r1
     4d8:	07 2e       	mov	r0, r23
     4da:	00 0c       	add	r0, r0
     4dc:	88 0b       	sbc	r24, r24
     4de:	99 0b       	sbc	r25, r25
     4e0:	0e 94 24 10 	call	0x2048	; 0x2048 <__floatsisf>
     4e4:	a7 01       	movw	r20, r14
     4e6:	96 01       	movw	r18, r12
     4e8:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <__addsf3>
     4ec:	2b 01       	movw	r4, r22
     4ee:	3c 01       	movw	r6, r24
						copy = amountEntered;
     4f0:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     4f4:	6b 01       	movw	r12, r22
     4f6:	7c 01       	movw	r14, r24
						digits ++;
     4f8:	b3 94       	inc	r11
     4fa:	17 c0       	rjmp	.+46     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
						
					}
					else
					{
						
						amountEntered *= (keyPressed - 48);
     4fc:	68 2f       	mov	r22, r24
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	60 53       	subi	r22, 0x30	; 48
     502:	71 09       	sbc	r23, r1
     504:	07 2e       	mov	r0, r23
     506:	00 0c       	add	r0, r0
     508:	88 0b       	sbc	r24, r24
     50a:	99 0b       	sbc	r25, r25
     50c:	0e 94 24 10 	call	0x2048	; 0x2048 <__floatsisf>
     510:	9b 01       	movw	r18, r22
     512:	ac 01       	movw	r20, r24
     514:	c3 01       	movw	r24, r6
     516:	b2 01       	movw	r22, r4
     518:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__mulsf3>
     51c:	2b 01       	movw	r4, r22
     51e:	3c 01       	movw	r6, r24
						copy = amountEntered;
     520:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     524:	6b 01       	movw	r12, r22
     526:	7c 01       	movw	r14, r24
						digits++;
     528:	b3 94       	inc	r11
					}
					
					for (counter = 0; counter < digits; counter++)
     52a:	91 2c       	mov	r9, r1
     52c:	37 c0       	rjmp	.+110    	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
					{
						location = 7 - counter;
     52e:	87 e0       	ldi	r24, 0x07	; 7
     530:	89 19       	sub	r24, r9
						if (location > 5)
     532:	86 30       	cpi	r24, 0x06	; 6
     534:	c8 f0       	brcs	.+50     	; 0x568 <__EEPROM_REGION_LENGTH__+0x168>
						{
							transAmount[7-counter] = (copy%10) + 48;
     536:	07 e0       	ldi	r16, 0x07	; 7
     538:	10 e0       	ldi	r17, 0x00	; 0
     53a:	09 19       	sub	r16, r9
     53c:	11 09       	sbc	r17, r1
     53e:	c7 01       	movw	r24, r14
     540:	b6 01       	movw	r22, r12
     542:	2a e0       	ldi	r18, 0x0A	; 10
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	0e 94 46 11 	call	0x228c	; 0x228c <__udivmodsi4>
     54e:	e5 e0       	ldi	r30, 0x05	; 5
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	ec 0f       	add	r30, r28
     554:	fd 1f       	adc	r31, r29
     556:	e0 0f       	add	r30, r16
     558:	f1 1f       	adc	r31, r17
     55a:	60 5d       	subi	r22, 0xD0	; 208
     55c:	60 83       	st	Z, r22
							copy/=10;
     55e:	c2 2e       	mov	r12, r18
     560:	d3 2e       	mov	r13, r19
     562:	e4 2e       	mov	r14, r20
     564:	f5 2e       	mov	r15, r21
     566:	19 c0       	rjmp	.+50     	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
						}
						else
						{
							transAmount[7-counter-1] = (copy%10) + 48;
     568:	06 e0       	ldi	r16, 0x06	; 6
     56a:	10 e0       	ldi	r17, 0x00	; 0
     56c:	09 19       	sub	r16, r9
     56e:	11 09       	sbc	r17, r1
     570:	c7 01       	movw	r24, r14
     572:	b6 01       	movw	r22, r12
     574:	2a e0       	ldi	r18, 0x0A	; 10
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	0e 94 46 11 	call	0x228c	; 0x228c <__udivmodsi4>
     580:	e5 e0       	ldi	r30, 0x05	; 5
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	ec 0f       	add	r30, r28
     586:	fd 1f       	adc	r31, r29
     588:	e0 0f       	add	r30, r16
     58a:	f1 1f       	adc	r31, r17
     58c:	80 e3       	ldi	r24, 0x30	; 48
     58e:	86 0f       	add	r24, r22
     590:	80 83       	st	Z, r24
							copy/=10;
     592:	c2 2e       	mov	r12, r18
     594:	d3 2e       	mov	r13, r19
     596:	e4 2e       	mov	r14, r20
     598:	f5 2e       	mov	r15, r21
						amountEntered *= (keyPressed - 48);
						copy = amountEntered;
						digits++;
					}
					
					for (counter = 0; counter < digits; counter++)
     59a:	93 94       	inc	r9
     59c:	9b 14       	cp	r9, r11
     59e:	38 f2       	brcs	.-114    	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
							copy/=10;
						}
						
					}
					
					transAmount[7] = keyPressed;
     5a0:	8c 86       	std	Y+12, r8	; 0x0c
				}

				BUTTON_read(BUTTON_1_PORT, BUTTON_1_Pin, &buttonState);
     5a2:	46 e5       	ldi	r20, 0x56	; 86
     5a4:	52 e0       	ldi	r21, 0x02	; 2
     5a6:	62 e0       	ldi	r22, 0x02	; 2
     5a8:	82 e4       	ldi	r24, 0x42	; 66
     5aa:	0e 94 3c 06 	call	0xc78	; 0xc78 <BUTTON_read>
				if (buttonState)
     5ae:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <buttonState>
     5b2:	88 23       	and	r24, r24
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
     5b6:	99 c0       	rjmp	.+306    	; 0x6ea <__EEPROM_REGION_LENGTH__+0x2ea>
				{
					TIMER_delay(TIMER_2, 60);
     5b8:	4c e3       	ldi	r20, 0x3C	; 60
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
					BUTTON_read(BUTTON_1_PORT, BUTTON_1_Pin, &buttonState);
     5c6:	46 e5       	ldi	r20, 0x56	; 86
     5c8:	52 e0       	ldi	r21, 0x02	; 2
     5ca:	62 e0       	ldi	r22, 0x02	; 2
     5cc:	82 e4       	ldi	r24, 0x42	; 66
     5ce:	0e 94 3c 06 	call	0xc78	; 0xc78 <BUTTON_read>
					if (buttonState)
     5d2:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <buttonState>
     5d6:	88 23       	and	r24, r24
     5d8:	09 f4       	brne	.+2      	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
     5da:	87 c0       	rjmp	.+270    	; 0x6ea <__EEPROM_REGION_LENGTH__+0x2ea>
					{
						pressingCounter = 0;
     5dc:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <pressingCounter>
						TIMER_setTime(TIMER_2,100);
     5e0:	44 e6       	ldi	r20, 0x64	; 100
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	0e 94 a5 0c 	call	0x194a	; 0x194a <TIMER_setTime>
						TIMER_start(TIMER_2);
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <TIMER_start>
						TIMER_enableInterrupt(TIMER_2);
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <TIMER_enableInterrupt>
						while (buttonState)
     5fa:	06 c0       	rjmp	.+12     	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
						{
							BUTTON_read(BUTTON_1_PORT, BUTTON_1_Pin, &buttonState);
     5fc:	46 e5       	ldi	r20, 0x56	; 86
     5fe:	52 e0       	ldi	r21, 0x02	; 2
     600:	62 e0       	ldi	r22, 0x02	; 2
     602:	82 e4       	ldi	r24, 0x42	; 66
     604:	0e 94 3c 06 	call	0xc78	; 0xc78 <BUTTON_read>
					{
						pressingCounter = 0;
						TIMER_setTime(TIMER_2,100);
						TIMER_start(TIMER_2);
						TIMER_enableInterrupt(TIMER_2);
						while (buttonState)
     608:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <buttonState>
     60c:	81 11       	cpse	r24, r1
     60e:	f6 cf       	rjmp	.-20     	; 0x5fc <__EEPROM_REGION_LENGTH__+0x1fc>
						{
							BUTTON_read(BUTTON_1_PORT, BUTTON_1_Pin, &buttonState);
						}
						keyPressed = 1;
						if (pressingCounter >= 10)
     610:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <pressingCounter>
     614:	8a 30       	cpi	r24, 0x0A	; 10
     616:	70 f0       	brcs	.+28     	; 0x634 <__EEPROM_REGION_LENGTH__+0x234>
						{
							/*amount accepted*/
							amountEntered /= 100;
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	48 ec       	ldi	r20, 0xC8	; 200
     61e:	52 e4       	ldi	r21, 0x42	; 66
     620:	c3 01       	movw	r24, r6
     622:	b2 01       	movw	r22, r4
     624:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__divsf3>
     628:	2b 01       	movw	r4, r22
     62a:	3c 01       	movw	r6, r24
							atmState = CHECKING_STATE;
     62c:	87 e0       	ldi	r24, 0x07	; 7
     62e:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
     632:	51 c0       	rjmp	.+162    	; 0x6d6 <__EEPROM_REGION_LENGTH__+0x2d6>
							
						}
						else
						{
							TIMER_stopInterrupt(TIMER_2);
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <TIMER_stopInterrupt>
							if (digits)
     63a:	bb 20       	and	r11, r11
     63c:	79 f0       	breq	.+30     	; 0x65c <__EEPROM_REGION_LENGTH__+0x25c>
							{
								amountEntered *= 10;
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	40 e2       	ldi	r20, 0x20	; 32
     644:	51 e4       	ldi	r21, 0x41	; 65
     646:	c3 01       	movw	r24, r6
     648:	b2 01       	movw	r22, r4
     64a:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__mulsf3>
     64e:	2b 01       	movw	r4, r22
     650:	3c 01       	movw	r6, r24
								copy = amountEntered;
     652:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     656:	6b 01       	movw	r12, r22
     658:	7c 01       	movw	r14, r24
								digits ++;
     65a:	b3 94       	inc	r11
							else
							{
								/*DO NOTHING*/
							}
							
							for (counter = 0; counter < digits; counter++)
     65c:	91 2c       	mov	r9, r1
     65e:	37 c0       	rjmp	.+110    	; 0x6ce <__EEPROM_REGION_LENGTH__+0x2ce>
							{
								location = 7 - counter;
     660:	87 e0       	ldi	r24, 0x07	; 7
     662:	89 19       	sub	r24, r9
								if (location > 5)
     664:	86 30       	cpi	r24, 0x06	; 6
     666:	c8 f0       	brcs	.+50     	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
								{
									transAmount[7-counter] = (copy%10) + 48;
     668:	07 e0       	ldi	r16, 0x07	; 7
     66a:	10 e0       	ldi	r17, 0x00	; 0
     66c:	09 19       	sub	r16, r9
     66e:	11 09       	sbc	r17, r1
     670:	c7 01       	movw	r24, r14
     672:	b6 01       	movw	r22, r12
     674:	2a e0       	ldi	r18, 0x0A	; 10
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	0e 94 46 11 	call	0x228c	; 0x228c <__udivmodsi4>
     680:	e5 e0       	ldi	r30, 0x05	; 5
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	ec 0f       	add	r30, r28
     686:	fd 1f       	adc	r31, r29
     688:	e0 0f       	add	r30, r16
     68a:	f1 1f       	adc	r31, r17
     68c:	60 5d       	subi	r22, 0xD0	; 208
     68e:	60 83       	st	Z, r22
									copy/=10;
     690:	c2 2e       	mov	r12, r18
     692:	d3 2e       	mov	r13, r19
     694:	e4 2e       	mov	r14, r20
     696:	f5 2e       	mov	r15, r21
     698:	19 c0       	rjmp	.+50     	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
								}
								else
								{
									transAmount[7-counter-1] = (copy%10) + 48;
     69a:	06 e0       	ldi	r16, 0x06	; 6
     69c:	10 e0       	ldi	r17, 0x00	; 0
     69e:	09 19       	sub	r16, r9
     6a0:	11 09       	sbc	r17, r1
     6a2:	c7 01       	movw	r24, r14
     6a4:	b6 01       	movw	r22, r12
     6a6:	2a e0       	ldi	r18, 0x0A	; 10
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e0       	ldi	r20, 0x00	; 0
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	0e 94 46 11 	call	0x228c	; 0x228c <__udivmodsi4>
     6b2:	e5 e0       	ldi	r30, 0x05	; 5
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	ec 0f       	add	r30, r28
     6b8:	fd 1f       	adc	r31, r29
     6ba:	e0 0f       	add	r30, r16
     6bc:	f1 1f       	adc	r31, r17
     6be:	80 e3       	ldi	r24, 0x30	; 48
     6c0:	86 0f       	add	r24, r22
     6c2:	80 83       	st	Z, r24
									copy/=10;
     6c4:	c2 2e       	mov	r12, r18
     6c6:	d3 2e       	mov	r13, r19
     6c8:	e4 2e       	mov	r14, r20
     6ca:	f5 2e       	mov	r15, r21
							else
							{
								/*DO NOTHING*/
							}
							
							for (counter = 0; counter < digits; counter++)
     6cc:	93 94       	inc	r9
     6ce:	9b 14       	cp	r9, r11
     6d0:	38 f2       	brcs	.-114    	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
									copy/=10;
								}
								
							}
							
							transAmount[7] = '0';
     6d2:	80 e3       	ldi	r24, 0x30	; 48
     6d4:	8c 87       	std	Y+12, r24	; 0x0c
						}
						TIMER_stopInterrupt(TIMER_2);
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <TIMER_stopInterrupt>
						TIMER_stop(TIMER_2);
     6dc:	82 e0       	ldi	r24, 0x02	; 2
     6de:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <TIMER_stop>
						pressingCounter = 0;
     6e2:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <pressingCounter>
						TIMER_enableInterrupt(TIMER_2);
						while (buttonState)
						{
							BUTTON_read(BUTTON_1_PORT, BUTTON_1_Pin, &buttonState);
						}
						keyPressed = 1;
     6e6:	88 24       	eor	r8, r8
     6e8:	83 94       	inc	r8
			keyPressed = KEYPAD_read();
			
			counter	= 0;

			
			while (keyPressed == 0)
     6ea:	88 20       	and	r8, r8
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
     6ee:	da ce       	rjmp	.-588    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     6f0:	6c cd       	rjmp	.-1320   	; 0x1ca <APP_superLoop+0x74>
			
			break;		
			
			/*step 14 -> Check on the card data*/
			case CHECKING_STATE:
			if(amountEntered == 0.01)
     6f2:	2a e0       	ldi	r18, 0x0A	; 10
     6f4:	37 ed       	ldi	r19, 0xD7	; 215
     6f6:	43 e2       	ldi	r20, 0x23	; 35
     6f8:	5c e3       	ldi	r21, 0x3C	; 60
     6fa:	c3 01       	movw	r24, r6
     6fc:	b2 01       	movw	r22, r4
     6fe:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <__cmpsf2>
     702:	81 11       	cpse	r24, r1
     704:	03 c0       	rjmp	.+6      	; 0x70c <__EEPROM_REGION_LENGTH__+0x30c>
			{
				amountEntered = 0;
     706:	41 2c       	mov	r4, r1
     708:	51 2c       	mov	r5, r1
     70a:	32 01       	movw	r6, r4
			}
			transState = SERVER_recieveTransactionData(&remainingBalance, amountEntered, &cardHolderData);
     70c:	9e 01       	movw	r18, r28
     70e:	2d 5e       	subi	r18, 0xED	; 237
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	b3 01       	movw	r22, r6
     714:	a2 01       	movw	r20, r4
     716:	ce 01       	movw	r24, r28
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	0e 94 89 05 	call	0xb12	; 0xb12 <SERVER_recieveTransactionData>
			amountEntered = 1;
			/*step 15 -> if failed prints "This is a fraud card" if card pan is not found + Alarm
										  "This card is stolen" if the card is blocked + Alarm
										  "Maximum Limit is Exceeded" if the required amount exceeds the maximum amount limit
										  "Insufficient fund" if the account balance is lower than the required balance.*/
			if (transState == FRAUD_CARD)
     71e:	83 30       	cpi	r24, 0x03	; 3
     720:	09 f5       	brne	.+66     	; 0x764 <__EEPROM_REGION_LENGTH__+0x364>
			{
				LCD_Clear();
     722:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Clear>
				LCD_WriteString("This is a ");
     726:	87 e9       	ldi	r24, 0x97	; 151
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
				LCD_SetCursor(1,0);
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_SetCursor>
				LCD_WriteString("fraud card");
     736:	82 ea       	ldi	r24, 0xA2	; 162
     738:	91 e0       	ldi	r25, 0x01	; 1
     73a:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
				TIMER_delay(TIMER_2,1000);
     73e:	48 ee       	ldi	r20, 0xE8	; 232
     740:	53 e0       	ldi	r21, 0x03	; 3
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
				atmState = ALARM_STATE;
     74c:	85 e0       	ldi	r24, 0x05	; 5
     74e:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
			if(amountEntered == 0.01)
			{
				amountEntered = 0;
			}
			transState = SERVER_recieveTransactionData(&remainingBalance, amountEntered, &cardHolderData);
			amountEntered = 1;
     752:	0f 2e       	mov	r0, r31
     754:	41 2c       	mov	r4, r1
     756:	51 2c       	mov	r5, r1
     758:	f0 e8       	ldi	r31, 0x80	; 128
     75a:	6f 2e       	mov	r6, r31
     75c:	ff e3       	ldi	r31, 0x3F	; 63
     75e:	7f 2e       	mov	r7, r31
     760:	f0 2d       	mov	r31, r0
     762:	33 cd       	rjmp	.-1434   	; 0x1ca <APP_superLoop+0x74>
				LCD_SetCursor(1,0);
				LCD_WriteString("fraud card");
				TIMER_delay(TIMER_2,1000);
				atmState = ALARM_STATE;
			}
			else if (transState == DECLINED_STOLEN_CARD)
     764:	82 30       	cpi	r24, 0x02	; 2
     766:	09 f5       	brne	.+66     	; 0x7aa <__EEPROM_REGION_LENGTH__+0x3aa>
			{
				LCD_Clear();
     768:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Clear>
				LCD_WriteString("This card is");
     76c:	8d ea       	ldi	r24, 0xAD	; 173
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
				LCD_SetCursor(1,0);
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_SetCursor>
				LCD_WriteString("stolen");
     77c:	8a eb       	ldi	r24, 0xBA	; 186
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
				TIMER_delay(TIMER_2,1000);
     784:	48 ee       	ldi	r20, 0xE8	; 232
     786:	53 e0       	ldi	r21, 0x03	; 3
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
				atmState = ALARM_STATE;
     792:	85 e0       	ldi	r24, 0x05	; 5
     794:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
			if(amountEntered == 0.01)
			{
				amountEntered = 0;
			}
			transState = SERVER_recieveTransactionData(&remainingBalance, amountEntered, &cardHolderData);
			amountEntered = 1;
     798:	0f 2e       	mov	r0, r31
     79a:	41 2c       	mov	r4, r1
     79c:	51 2c       	mov	r5, r1
     79e:	f0 e8       	ldi	r31, 0x80	; 128
     7a0:	6f 2e       	mov	r6, r31
     7a2:	ff e3       	ldi	r31, 0x3F	; 63
     7a4:	7f 2e       	mov	r7, r31
     7a6:	f0 2d       	mov	r31, r0
     7a8:	10 cd       	rjmp	.-1504   	; 0x1ca <APP_superLoop+0x74>
				LCD_SetCursor(1,0);
				LCD_WriteString("stolen");
				TIMER_delay(TIMER_2,1000);
				atmState = ALARM_STATE;
			}
			else if (transState == EXCEEDED_MAXIMUM_AMOUNT)
     7aa:	84 30       	cpi	r24, 0x04	; 4
     7ac:	09 f5       	brne	.+66     	; 0x7f0 <__EEPROM_REGION_LENGTH__+0x3f0>
			{
				LCD_Clear();
     7ae:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Clear>
				LCD_WriteString("Maximum Limit is");
     7b2:	81 ec       	ldi	r24, 0xC1	; 193
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
				LCD_SetCursor(1,0);
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_SetCursor>
				LCD_WriteString("Exceeded");
     7c2:	82 ed       	ldi	r24, 0xD2	; 210
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
				TIMER_delay(TIMER_2,1000);
     7ca:	48 ee       	ldi	r20, 0xE8	; 232
     7cc:	53 e0       	ldi	r21, 0x03	; 3
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
				atmState = EJECTING_CARD_STATE;
     7d8:	89 e0       	ldi	r24, 0x09	; 9
     7da:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
			if(amountEntered == 0.01)
			{
				amountEntered = 0;
			}
			transState = SERVER_recieveTransactionData(&remainingBalance, amountEntered, &cardHolderData);
			amountEntered = 1;
     7de:	0f 2e       	mov	r0, r31
     7e0:	41 2c       	mov	r4, r1
     7e2:	51 2c       	mov	r5, r1
     7e4:	f0 e8       	ldi	r31, 0x80	; 128
     7e6:	6f 2e       	mov	r6, r31
     7e8:	ff e3       	ldi	r31, 0x3F	; 63
     7ea:	7f 2e       	mov	r7, r31
     7ec:	f0 2d       	mov	r31, r0
     7ee:	ed cc       	rjmp	.-1574   	; 0x1ca <APP_superLoop+0x74>
				LCD_SetCursor(1,0);
				LCD_WriteString("Exceeded");
				TIMER_delay(TIMER_2,1000);
				atmState = EJECTING_CARD_STATE;
			}
			else if (transState == DECLINED_INSUFFECIENT_FUND)
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	09 f5       	brne	.+66     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
			{
				LCD_Clear();
     7f4:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Clear>
				LCD_WriteString("Insufficient");
     7f8:	8b ed       	ldi	r24, 0xDB	; 219
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
				LCD_SetCursor(1,0);
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_SetCursor>
				LCD_WriteString("fund");
     808:	88 ee       	ldi	r24, 0xE8	; 232
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
				TIMER_delay(TIMER_2,1000);
     810:	48 ee       	ldi	r20, 0xE8	; 232
     812:	53 e0       	ldi	r21, 0x03	; 3
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
				atmState = EJECTING_CARD_STATE;
     81e:	89 e0       	ldi	r24, 0x09	; 9
     820:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
			if(amountEntered == 0.01)
			{
				amountEntered = 0;
			}
			transState = SERVER_recieveTransactionData(&remainingBalance, amountEntered, &cardHolderData);
			amountEntered = 1;
     824:	0f 2e       	mov	r0, r31
     826:	41 2c       	mov	r4, r1
     828:	51 2c       	mov	r5, r1
     82a:	f0 e8       	ldi	r31, 0x80	; 128
     82c:	6f 2e       	mov	r6, r31
     82e:	ff e3       	ldi	r31, 0x3F	; 63
     830:	7f 2e       	mov	r7, r31
     832:	f0 2d       	mov	r31, r0
     834:	ca cc       	rjmp	.-1644   	; 0x1ca <APP_superLoop+0x74>
				LCD_WriteString("fund");
				TIMER_delay(TIMER_2,1000);
				atmState = EJECTING_CARD_STATE;
			}
			/*step 16 -> If correct print "Approved transaction" for 1s*/
			else if(transState == APPROVED)
     836:	81 11       	cpse	r24, r1
     838:	c0 cc       	rjmp	.-1664   	; 0x1ba <APP_superLoop+0x64>
			{
				LCD_Clear();
     83a:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Clear>
				LCD_WriteString("Approved ");
     83e:	8d ee       	ldi	r24, 0xED	; 237
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
				LCD_SetCursor(1,0);
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_SetCursor>
				LCD_WriteString("transaction");
     84e:	87 ef       	ldi	r24, 0xF7	; 247
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
				TIMER_delay(TIMER_2, 1000);
     856:	48 ee       	ldi	r20, 0xE8	; 232
     858:	53 e0       	ldi	r21, 0x03	; 3
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
				atmState = PRINTING_BALANCE_STATE;
     864:	88 e0       	ldi	r24, 0x08	; 8
     866:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
			if(amountEntered == 0.01)
			{
				amountEntered = 0;
			}
			transState = SERVER_recieveTransactionData(&remainingBalance, amountEntered, &cardHolderData);
			amountEntered = 1;
     86a:	0f 2e       	mov	r0, r31
     86c:	41 2c       	mov	r4, r1
     86e:	51 2c       	mov	r5, r1
     870:	f0 e8       	ldi	r31, 0x80	; 128
     872:	6f 2e       	mov	r6, r31
     874:	ff e3       	ldi	r31, 0x3F	; 63
     876:	7f 2e       	mov	r7, r31
     878:	f0 2d       	mov	r31, r0
     87a:	a7 cc       	rjmp	.-1714   	; 0x1ca <APP_superLoop+0x74>
			}
			break;
			
			/*step 17 -> print "Remaining balance: 0000.00" for 1s*/
			case PRINTING_BALANCE_STATE:
			remainingBalance*=100;
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	48 ec       	ldi	r20, 0xC8	; 200
     882:	52 e4       	ldi	r21, 0x42	; 66
     884:	69 81       	ldd	r22, Y+1	; 0x01
     886:	7a 81       	ldd	r23, Y+2	; 0x02
     888:	8b 81       	ldd	r24, Y+3	; 0x03
     88a:	9c 81       	ldd	r25, Y+4	; 0x04
     88c:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__mulsf3>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
			copy = remainingBalance;
     898:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     89c:	6b 01       	movw	r12, r22
     89e:	7c 01       	movw	r14, r24
			
			LCD_Clear();
     8a0:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Clear>
			LCD_WriteString("Remaining Balance");
     8a4:	83 e0       	ldi	r24, 0x03	; 3
     8a6:	92 e0       	ldi	r25, 0x02	; 2
     8a8:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
			LCD_SetCursor(1,0);
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_SetCursor>
			for (counter = 0; counter < 7; counter++)
     8b4:	91 2c       	mov	r9, r1
     8b6:	41 c0       	rjmp	.+130    	; 0x93a <__stack+0xdb>
			{
				location = 7 - counter;
     8b8:	87 e0       	ldi	r24, 0x07	; 7
     8ba:	89 19       	sub	r24, r9
				if (location > 5)
     8bc:	86 30       	cpi	r24, 0x06	; 6
     8be:	f8 f0       	brcs	.+62     	; 0x8fe <__stack+0x9f>
				{
					transAmount[7-counter] = (copy%10) + 48;
     8c0:	07 e0       	ldi	r16, 0x07	; 7
     8c2:	10 e0       	ldi	r17, 0x00	; 0
     8c4:	09 19       	sub	r16, r9
     8c6:	11 09       	sbc	r17, r1
     8c8:	c7 01       	movw	r24, r14
     8ca:	b6 01       	movw	r22, r12
     8cc:	2a e0       	ldi	r18, 0x0A	; 10
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	0e 94 46 11 	call	0x228c	; 0x228c <__udivmodsi4>
     8d8:	e5 e0       	ldi	r30, 0x05	; 5
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	ec 0f       	add	r30, r28
     8de:	fd 1f       	adc	r31, r29
     8e0:	e0 0f       	add	r30, r16
     8e2:	f1 1f       	adc	r31, r17
     8e4:	80 e3       	ldi	r24, 0x30	; 48
     8e6:	86 0f       	add	r24, r22
     8e8:	80 83       	st	Z, r24
					copy/=10;
     8ea:	c2 2e       	mov	r12, r18
     8ec:	d3 2e       	mov	r13, r19
     8ee:	e4 2e       	mov	r14, r20
     8f0:	f5 2e       	mov	r15, r21
					if (copy == 0)
     8f2:	c1 14       	cp	r12, r1
     8f4:	d1 04       	cpc	r13, r1
     8f6:	e1 04       	cpc	r14, r1
     8f8:	f1 04       	cpc	r15, r1
     8fa:	f1 f4       	brne	.+60     	; 0x938 <__stack+0xd9>
     8fc:	22 c0       	rjmp	.+68     	; 0x942 <__stack+0xe3>
						break;
					}
				}
				else
				{
					transAmount[7-counter-1] = (copy%10) + 48;
     8fe:	06 e0       	ldi	r16, 0x06	; 6
     900:	10 e0       	ldi	r17, 0x00	; 0
     902:	09 19       	sub	r16, r9
     904:	11 09       	sbc	r17, r1
     906:	c7 01       	movw	r24, r14
     908:	b6 01       	movw	r22, r12
     90a:	2a e0       	ldi	r18, 0x0A	; 10
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	0e 94 46 11 	call	0x228c	; 0x228c <__udivmodsi4>
     916:	e5 e0       	ldi	r30, 0x05	; 5
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	ec 0f       	add	r30, r28
     91c:	fd 1f       	adc	r31, r29
     91e:	e0 0f       	add	r30, r16
     920:	f1 1f       	adc	r31, r17
     922:	60 5d       	subi	r22, 0xD0	; 208
     924:	60 83       	st	Z, r22
					copy/=10;
     926:	c2 2e       	mov	r12, r18
     928:	d3 2e       	mov	r13, r19
     92a:	e4 2e       	mov	r14, r20
     92c:	f5 2e       	mov	r15, r21
					if (copy == 0)
     92e:	c1 14       	cp	r12, r1
     930:	d1 04       	cpc	r13, r1
     932:	e1 04       	cpc	r14, r1
     934:	f1 04       	cpc	r15, r1
     936:	29 f0       	breq	.+10     	; 0x942 <__stack+0xe3>
			copy = remainingBalance;
			
			LCD_Clear();
			LCD_WriteString("Remaining Balance");
			LCD_SetCursor(1,0);
			for (counter = 0; counter < 7; counter++)
     938:	93 94       	inc	r9
     93a:	b6 e0       	ldi	r27, 0x06	; 6
     93c:	b9 15       	cp	r27, r9
     93e:	08 f0       	brcs	.+2      	; 0x942 <__stack+0xe3>
     940:	bb cf       	rjmp	.-138    	; 0x8b8 <__stack+0x59>
					{
						break;
					}
				}
			}
			LCD_WriteString(transAmount);
     942:	ce 01       	movw	r24, r28
     944:	05 96       	adiw	r24, 0x05	; 5
     946:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
			TIMER_delay(TIMER_2, 1000);
     94a:	48 ee       	ldi	r20, 0xE8	; 232
     94c:	53 e0       	ldi	r21, 0x03	; 3
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	82 e0       	ldi	r24, 0x02	; 2
     954:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
			
			atmState = EJECTING_CARD_STATE;
     958:	89 e0       	ldi	r24, 0x09	; 9
     95a:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
			break;
     95e:	35 cc       	rjmp	.-1942   	; 0x1ca <APP_superLoop+0x74>
			
			
			/*step 18 -> print "Ejecting Card" for 1s*/
			case EJECTING_CARD_STATE:
			LCD_Clear();
     960:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Clear>
			LCD_WriteString("Ejecting Card");
     964:	85 e1       	ldi	r24, 0x15	; 21
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
			TIMER_delay(TIMER_2,1000);
     96c:	48 ee       	ldi	r20, 0xE8	; 232
     96e:	53 e0       	ldi	r21, 0x03	; 3
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	82 e0       	ldi	r24, 0x02	; 2
     976:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
			
			/*step 19 -> Send a massage to card ecu to start*/
			
			while(SPI_transmitByte(0xDD) != 0xDD)
     97a:	07 c0       	rjmp	.+14     	; 0x98a <__stack+0x12b>
			TIMER_delay(TIMER_2,10);
     97c:	4a e0       	ldi	r20, 0x0A	; 10
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	82 e0       	ldi	r24, 0x02	; 2
     986:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
			LCD_WriteString("Ejecting Card");
			TIMER_delay(TIMER_2,1000);
			
			/*step 19 -> Send a massage to card ecu to start*/
			
			while(SPI_transmitByte(0xDD) != 0xDD)
     98a:	8d ed       	ldi	r24, 0xDD	; 221
     98c:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <SPI_transmitByte>
     990:	8d 3d       	cpi	r24, 0xDD	; 221
     992:	a1 f7       	brne	.-24     	; 0x97c <__stack+0x11d>
			TIMER_delay(TIMER_2,10);
			
			/*step 20 -> go to RESETTING_STATE*/
			atmState = RESETTING_STATE;
     994:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <__data_end>
			break;
     998:	18 cc       	rjmp	.-2000   	; 0x1ca <APP_superLoop+0x74>
			
			case ALARM_STATE:
			LCD_Clear();
     99a:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Clear>
			LCD_WriteString("ALARM");
     99e:	83 e2       	ldi	r24, 0x23	; 35
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <LCD_WriteString>
			
			BUZZER_on(BUZZER_0);
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	0e 94 59 06 	call	0xcb2	; 0xcb2 <BUZZER_on>
			EXTINT_setCallBackInt(INT_0,doNothing);
     9ac:	6d e5       	ldi	r22, 0x5D	; 93
     9ae:	70 e0       	ldi	r23, 0x00	; 0
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0e 94 cf 0b 	call	0x179e	; 0x179e <EXTINT_setCallBackInt>
			
			
			break;
     9b6:	09 cc       	rjmp	.-2030   	; 0x1ca <APP_superLoop+0x74>

000009b8 <SERVER_isValidAccount>:
										{30000.0,	RUNNING, "2222333322223333"} };



EN_serverError_t SERVER_isValidAccount(ST_cardData_t* cardData, ST_accountsDB_t* accountRefrence)
{
     9b8:	af 92       	push	r10
     9ba:	bf 92       	push	r11
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	63 97       	sbiw	r28, 0x13	; 19
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	de bf       	out	0x3e, r29	; 62
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	cd bf       	out	0x3d, r28	; 61
     9dc:	6b 01       	movw	r12, r22
	u8 PAN[19] = {0};
     9de:	fe 01       	movw	r30, r28
     9e0:	31 96       	adiw	r30, 0x01	; 1
     9e2:	23 e1       	ldi	r18, 0x13	; 19
     9e4:	df 01       	movw	r26, r30
     9e6:	1d 92       	st	X+, r1
     9e8:	2a 95       	dec	r18
     9ea:	e9 f7       	brne	.-6      	; 0x9e6 <SERVER_isValidAccount+0x2e>
	u8 compare = 0, reference = 0, functionReturn = 0;

	strcpy(PAN, cardData->primaryAcountNumber);
     9ec:	bc 01       	movw	r22, r24
     9ee:	cf 01       	movw	r24, r30
     9f0:	0e 94 91 11 	call	0x2322	; 0x2322 <strcpy>


EN_serverError_t SERVER_isValidAccount(ST_cardData_t* cardData, ST_accountsDB_t* accountRefrence)
{
	u8 PAN[19] = {0};
	u8 compare = 0, reference = 0, functionReturn = 0;
     9f4:	b1 2c       	mov	r11, r1
     9f6:	a1 2c       	mov	r10, r1

	strcpy(PAN, cardData->primaryAcountNumber);
	
	for (; reference < DB_SIZE; reference++)
     9f8:	45 c0       	rjmp	.+138    	; 0xa84 <SERVER_isValidAccount+0xcc>
	{
		compare = strcmp(PAN, accountsDB[reference].primaryAccountNumber);
     9fa:	eb 2c       	mov	r14, r11
     9fc:	f1 2c       	mov	r15, r1
     9fe:	87 01       	movw	r16, r14
     a00:	00 0f       	add	r16, r16
     a02:	11 1f       	adc	r17, r17
     a04:	0e 0d       	add	r16, r14
     a06:	1f 1d       	adc	r17, r15
     a08:	00 0f       	add	r16, r16
     a0a:	11 1f       	adc	r17, r17
     a0c:	00 0f       	add	r16, r16
     a0e:	11 1f       	adc	r17, r17
     a10:	00 0f       	add	r16, r16
     a12:	11 1f       	adc	r17, r17
     a14:	0b 59       	subi	r16, 0x9B	; 155
     a16:	1f 4f       	sbci	r17, 0xFF	; 255
     a18:	b8 01       	movw	r22, r16
     a1a:	ce 01       	movw	r24, r28
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	0e 94 88 11 	call	0x2310	; 0x2310 <strcmp>
     a22:	a8 2e       	mov	r10, r24
		if (!compare)
     a24:	81 11       	cpse	r24, r1
     a26:	2d c0       	rjmp	.+90     	; 0xa82 <SERVER_isValidAccount+0xca>
		{
			strcpy(accountRefrence->primaryAccountNumber, accountsDB[reference].primaryAccountNumber);
     a28:	b8 01       	movw	r22, r16
     a2a:	c6 01       	movw	r24, r12
     a2c:	05 96       	adiw	r24, 0x05	; 5
     a2e:	0e 94 91 11 	call	0x2322	; 0x2322 <strcpy>
			accountRefrence->balance = accountsDB[reference].balance;
     a32:	97 01       	movw	r18, r14
     a34:	22 0f       	add	r18, r18
     a36:	33 1f       	adc	r19, r19
     a38:	d9 01       	movw	r26, r18
     a3a:	ae 0d       	add	r26, r14
     a3c:	bf 1d       	adc	r27, r15
     a3e:	aa 0f       	add	r26, r26
     a40:	bb 1f       	adc	r27, r27
     a42:	aa 0f       	add	r26, r26
     a44:	bb 1f       	adc	r27, r27
     a46:	aa 0f       	add	r26, r26
     a48:	bb 1f       	adc	r27, r27
     a4a:	a0 5a       	subi	r26, 0xA0	; 160
     a4c:	bf 4f       	sbci	r27, 0xFF	; 255
     a4e:	8d 91       	ld	r24, X+
     a50:	9d 91       	ld	r25, X+
     a52:	0d 90       	ld	r0, X+
     a54:	bc 91       	ld	r27, X
     a56:	a0 2d       	mov	r26, r0
     a58:	f6 01       	movw	r30, r12
     a5a:	80 83       	st	Z, r24
     a5c:	91 83       	std	Z+1, r25	; 0x01
     a5e:	a2 83       	std	Z+2, r26	; 0x02
     a60:	b3 83       	std	Z+3, r27	; 0x03
			accountRefrence->state = accountsDB[reference].state;
     a62:	f9 01       	movw	r30, r18
     a64:	ee 0d       	add	r30, r14
     a66:	ff 1d       	adc	r31, r15
     a68:	ee 0f       	add	r30, r30
     a6a:	ff 1f       	adc	r31, r31
     a6c:	ee 0f       	add	r30, r30
     a6e:	ff 1f       	adc	r31, r31
     a70:	ee 0f       	add	r30, r30
     a72:	ff 1f       	adc	r31, r31
     a74:	e0 5a       	subi	r30, 0xA0	; 160
     a76:	ff 4f       	sbci	r31, 0xFF	; 255
     a78:	84 81       	ldd	r24, Z+4	; 0x04
     a7a:	d6 01       	movw	r26, r12
     a7c:	14 96       	adiw	r26, 0x04	; 4
     a7e:	8c 93       	st	X, r24
			
			break;
     a80:	05 c0       	rjmp	.+10     	; 0xa8c <SERVER_isValidAccount+0xd4>
	u8 PAN[19] = {0};
	u8 compare = 0, reference = 0, functionReturn = 0;

	strcpy(PAN, cardData->primaryAcountNumber);
	
	for (; reference < DB_SIZE; reference++)
     a82:	b3 94       	inc	r11
     a84:	b9 e0       	ldi	r27, 0x09	; 9
     a86:	bb 15       	cp	r27, r11
     a88:	08 f0       	brcs	.+2      	; 0xa8c <SERVER_isValidAccount+0xd4>
     a8a:	b7 cf       	rjmp	.-146    	; 0x9fa <SERVER_isValidAccount+0x42>
			break;
		}
		
	}
	
	if (compare)
     a8c:	aa 20       	and	r10, r10
     a8e:	11 f0       	breq	.+4      	; 0xa94 <SERVER_isValidAccount+0xdc>
	{
		functionReturn = ACCOUNT_NOT_FOUND;
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <SERVER_isValidAccount+0xde>
		//accountRefrence = NULL;
	}
	else
	{
		functionReturn = SERVER_OK;
     a94:	80 e0       	ldi	r24, 0x00	; 0
		
	}

	return functionReturn;

}
     a96:	63 96       	adiw	r28, 0x13	; 19
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	cf 90       	pop	r12
     ab2:	bf 90       	pop	r11
     ab4:	af 90       	pop	r10
     ab6:	08 95       	ret

00000ab8 <SERVER_isBlockedAccount>:

EN_serverError_t SERVER_isBlockedAccount(ST_accountsDB_t* accountRefrence)
{
	u8 accountState = 0, functionReturn = 0;
	accountState = accountRefrence->state;
     ab8:	fc 01       	movw	r30, r24
     aba:	84 81       	ldd	r24, Z+4	; 0x04
	if (accountState == RUNNING)
     abc:	88 23       	and	r24, r24
     abe:	21 f0       	breq	.+8      	; 0xac8 <SERVER_isBlockedAccount+0x10>
	{
		functionReturn = SERVER_OK;
	}
	else if (accountState == BLOCKED)
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	21 f0       	breq	.+8      	; 0xacc <SERVER_isBlockedAccount+0x14>

}

EN_serverError_t SERVER_isBlockedAccount(ST_accountsDB_t* accountRefrence)
{
	u8 accountState = 0, functionReturn = 0;
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	08 95       	ret
	accountState = accountRefrence->state;
	if (accountState == RUNNING)
	{
		functionReturn = SERVER_OK;
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	08 95       	ret
	}
	else if (accountState == BLOCKED)
	{
		functionReturn = BLOCKED_ACCOUNT;
     acc:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		/*DO NOTHING*/
	}
	return functionReturn;
}
     ace:	08 95       	ret

00000ad0 <SERVER_isAmountAvailable>:


EN_serverError_t	SERVER_isAmountAvailable(f32 f32_a_transactionAmount, ST_accountsDB_t* accountRefrence)
{
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	8b 01       	movw	r16, r22
     ad6:	9c 01       	movw	r18, r24
	f32  balance = 0;
	u8 checkAmount = 0;
	
	balance = accountRefrence->balance;
     ad8:	fa 01       	movw	r30, r20
     ada:	60 81       	ld	r22, Z
     adc:	71 81       	ldd	r23, Z+1	; 0x01
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
	
	if (balance >= f32_a_transactionAmount)
     ae2:	a9 01       	movw	r20, r18
     ae4:	98 01       	movw	r18, r16
     ae6:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__gesf2>
     aea:	88 23       	and	r24, r24
     aec:	14 f0       	brlt	.+4      	; 0xaf2 <SERVER_isAmountAvailable+0x22>
	{
		checkAmount = SERVER_OK;
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	01 c0       	rjmp	.+2      	; 0xaf4 <SERVER_isAmountAvailable+0x24>
	}
	else
	{
		checkAmount = LOW_BALANCE;
     af2:	82 e0       	ldi	r24, 0x02	; 2
	}

	return checkAmount;
}
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	08 95       	ret

00000afa <SERVER_isBelowMaxAmount>:

EN_serverError_t	SERVER_isBelowMaxAmount(f32 f32_a_transactionAmount)
{
	EN_serverError_t status ;
	
	if (f32_a_transactionAmount > MAX_TRANS_AMOUNT)
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e4       	ldi	r19, 0x40	; 64
     afe:	4c e9       	ldi	r20, 0x9C	; 156
     b00:	55 e4       	ldi	r21, 0x45	; 69
     b02:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <__gesf2>
     b06:	18 16       	cp	r1, r24
     b08:	14 f4       	brge	.+4      	; 0xb0e <SERVER_isBelowMaxAmount+0x14>
	{
		status= EXCEEDED_MAX_AMOUNT;
     b0a:	84 e0       	ldi	r24, 0x04	; 4
     b0c:	08 95       	ret

	}
	else
	{
		status= SERVER_OK;
     b0e:	80 e0       	ldi	r24, 0x00	; 0

	}
	return status;
     b10:	08 95       	ret

00000b12 <SERVER_recieveTransactionData>:




EN_transState_t	SERVER_recieveTransactionData(f32 *remainingBalance, f32 transAmount, ST_cardData_t* cardData)
{
     b12:	4f 92       	push	r4
     b14:	5f 92       	push	r5
     b16:	6f 92       	push	r6
     b18:	7f 92       	push	r7
     b1a:	af 92       	push	r10
     b1c:	bf 92       	push	r11
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	ab 97       	sbiw	r28, 0x2b	; 43
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	5c 01       	movw	r10, r24
     b3e:	2a 01       	movw	r4, r20
     b40:	3b 01       	movw	r6, r22
     b42:	89 01       	movw	r16, r18
	
	u8  PAN[19];
	u8 accountValidity = 0, amountAvailability = 0, accountState = 0, functionReturn = 0, amountValidity = 0;
	ST_accountsDB_t accReference;

	strcpy(PAN,	cardData->primaryAcountNumber);
     b44:	b9 01       	movw	r22, r18
     b46:	ce 01       	movw	r24, r28
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	0e 94 91 11 	call	0x2322	; 0x2322 <strcpy>


	accountValidity = SERVER_isValidAccount(cardData, &accReference);
     b4e:	be 01       	movw	r22, r28
     b50:	6c 5e       	subi	r22, 0xEC	; 236
     b52:	7f 4f       	sbci	r23, 0xFF	; 255
     b54:	c8 01       	movw	r24, r16
     b56:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <SERVER_isValidAccount>
     b5a:	18 2f       	mov	r17, r24
	
	accountState = SERVER_isBlockedAccount(&accReference);
     b5c:	ce 01       	movw	r24, r28
     b5e:	44 96       	adiw	r24, 0x14	; 20
     b60:	0e 94 5c 05 	call	0xab8	; 0xab8 <SERVER_isBlockedAccount>
     b64:	08 2f       	mov	r16, r24

	amountAvailability = SERVER_isAmountAvailable(transAmount, &accReference);
     b66:	ae 01       	movw	r20, r28
     b68:	4c 5e       	subi	r20, 0xEC	; 236
     b6a:	5f 4f       	sbci	r21, 0xFF	; 255
     b6c:	c3 01       	movw	r24, r6
     b6e:	b2 01       	movw	r22, r4
     b70:	0e 94 68 05 	call	0xad0	; 0xad0 <SERVER_isAmountAvailable>
     b74:	f8 2e       	mov	r15, r24
	
	amountValidity	= SERVER_isBelowMaxAmount(transAmount);
     b76:	c3 01       	movw	r24, r6
     b78:	b2 01       	movw	r22, r4
     b7a:	0e 94 7d 05 	call	0xafa	; 0xafa <SERVER_isBelowMaxAmount>

	if (accountValidity == ACCOUNT_NOT_FOUND)
     b7e:	11 30       	cpi	r17, 0x01	; 1
     b80:	09 f4       	brne	.+2      	; 0xb84 <SERVER_recieveTransactionData+0x72>
     b82:	52 c0       	rjmp	.+164    	; 0xc28 <SERVER_recieveTransactionData+0x116>
	{
		functionReturn = FRAUD_CARD;
	}
	else if (accountState == BLOCKED_ACCOUNT)
     b84:	03 30       	cpi	r16, 0x03	; 3
     b86:	09 f4       	brne	.+2      	; 0xb8a <SERVER_recieveTransactionData+0x78>
     b88:	51 c0       	rjmp	.+162    	; 0xc2c <SERVER_recieveTransactionData+0x11a>
	{
		functionReturn = DECLINED_STOLEN_CARD;
	}
	else if (amountAvailability == LOW_BALANCE)
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	f9 16       	cp	r15, r25
     b8e:	09 f4       	brne	.+2      	; 0xb92 <SERVER_recieveTransactionData+0x80>
     b90:	4f c0       	rjmp	.+158    	; 0xc30 <SERVER_recieveTransactionData+0x11e>
	{
		functionReturn = DECLINED_INSUFFECIENT_FUND;
	}
	else if (amountValidity == EXCEEDED_MAX_AMOUNT)
     b92:	84 30       	cpi	r24, 0x04	; 4
     b94:	09 f4       	brne	.+2      	; 0xb98 <SERVER_recieveTransactionData+0x86>
     b96:	4e c0       	rjmp	.+156    	; 0xc34 <SERVER_recieveTransactionData+0x122>
     b98:	f1 2c       	mov	r15, r1
     b9a:	40 c0       	rjmp	.+128    	; 0xc1c <SERVER_recieveTransactionData+0x10a>
	else
	{
		functionReturn = APPROVED;
		for (u8 index = 0; index < DB_SIZE; index++)
		{	 
			if (!strcmp(PAN, accountsDB[index].primaryAccountNumber))
     b9c:	0f 2d       	mov	r16, r15
     b9e:	10 e0       	ldi	r17, 0x00	; 0
     ba0:	b8 01       	movw	r22, r16
     ba2:	66 0f       	add	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	60 0f       	add	r22, r16
     ba8:	71 1f       	adc	r23, r17
     baa:	66 0f       	add	r22, r22
     bac:	77 1f       	adc	r23, r23
     bae:	66 0f       	add	r22, r22
     bb0:	77 1f       	adc	r23, r23
     bb2:	66 0f       	add	r22, r22
     bb4:	77 1f       	adc	r23, r23
     bb6:	6b 59       	subi	r22, 0x9B	; 155
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	ce 01       	movw	r24, r28
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	0e 94 88 11 	call	0x2310	; 0x2310 <strcmp>
     bc2:	89 2b       	or	r24, r25
     bc4:	51 f5       	brne	.+84     	; 0xc1a <SERVER_recieveTransactionData+0x108>
			{
				accountsDB[index].balance -= transAmount;
     bc6:	68 01       	movw	r12, r16
     bc8:	cc 0c       	add	r12, r12
     bca:	dd 1c       	adc	r13, r13
     bcc:	f6 01       	movw	r30, r12
     bce:	e0 0f       	add	r30, r16
     bd0:	f1 1f       	adc	r31, r17
     bd2:	ee 0f       	add	r30, r30
     bd4:	ff 1f       	adc	r31, r31
     bd6:	ee 0f       	add	r30, r30
     bd8:	ff 1f       	adc	r31, r31
     bda:	ee 0f       	add	r30, r30
     bdc:	ff 1f       	adc	r31, r31
     bde:	e0 5a       	subi	r30, 0xA0	; 160
     be0:	ff 4f       	sbci	r31, 0xFF	; 255
     be2:	a3 01       	movw	r20, r6
     be4:	92 01       	movw	r18, r4
     be6:	60 81       	ld	r22, Z
     be8:	71 81       	ldd	r23, Z+1	; 0x01
     bea:	82 81       	ldd	r24, Z+2	; 0x02
     bec:	93 81       	ldd	r25, Z+3	; 0x03
     bee:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <__subsf3>
     bf2:	f6 01       	movw	r30, r12
     bf4:	e0 0f       	add	r30, r16
     bf6:	f1 1f       	adc	r31, r17
     bf8:	ee 0f       	add	r30, r30
     bfa:	ff 1f       	adc	r31, r31
     bfc:	ee 0f       	add	r30, r30
     bfe:	ff 1f       	adc	r31, r31
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	e0 5a       	subi	r30, 0xA0	; 160
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	60 83       	st	Z, r22
     c0a:	71 83       	std	Z+1, r23	; 0x01
     c0c:	82 83       	std	Z+2, r24	; 0x02
     c0e:	93 83       	std	Z+3, r25	; 0x03
				*remainingBalance = accountsDB[index].balance;
     c10:	f5 01       	movw	r30, r10
     c12:	60 83       	st	Z, r22
     c14:	71 83       	std	Z+1, r23	; 0x01
     c16:	82 83       	std	Z+2, r24	; 0x02
     c18:	93 83       	std	Z+3, r25	; 0x03
		functionReturn = EXCEEDED_MAXIMUM_AMOUNT;
	}
	else
	{
		functionReturn = APPROVED;
		for (u8 index = 0; index < DB_SIZE; index++)
     c1a:	f3 94       	inc	r15
     c1c:	f9 e0       	ldi	r31, 0x09	; 9
     c1e:	ff 15       	cp	r31, r15
     c20:	08 f0       	brcs	.+2      	; 0xc24 <SERVER_recieveTransactionData+0x112>
     c22:	bc cf       	rjmp	.-136    	; 0xb9c <SERVER_recieveTransactionData+0x8a>
	{
		functionReturn = EXCEEDED_MAXIMUM_AMOUNT;
	}
	else
	{
		functionReturn = APPROVED;
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	07 c0       	rjmp	.+14     	; 0xc36 <SERVER_recieveTransactionData+0x124>
	
	amountValidity	= SERVER_isBelowMaxAmount(transAmount);

	if (accountValidity == ACCOUNT_NOT_FOUND)
	{
		functionReturn = FRAUD_CARD;
     c28:	83 e0       	ldi	r24, 0x03	; 3
     c2a:	05 c0       	rjmp	.+10     	; 0xc36 <SERVER_recieveTransactionData+0x124>
	}
	else if (accountState == BLOCKED_ACCOUNT)
	{
		functionReturn = DECLINED_STOLEN_CARD;
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	03 c0       	rjmp	.+6      	; 0xc36 <SERVER_recieveTransactionData+0x124>
	}
	else if (amountAvailability == LOW_BALANCE)
	{
		functionReturn = DECLINED_INSUFFECIENT_FUND;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <SERVER_recieveTransactionData+0x124>
	}
	else if (amountValidity == EXCEEDED_MAX_AMOUNT)
	{
		functionReturn = EXCEEDED_MAXIMUM_AMOUNT;
     c34:	84 e0       	ldi	r24, 0x04	; 4
	}


	return functionReturn;
	
}
     c36:	ab 96       	adiw	r28, 0x2b	; 43
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	df 90       	pop	r13
     c4e:	cf 90       	pop	r12
     c50:	bf 90       	pop	r11
     c52:	af 90       	pop	r10
     c54:	7f 90       	pop	r7
     c56:	6f 90       	pop	r6
     c58:	5f 90       	pop	r5
     c5a:	4f 90       	pop	r4
     c5c:	08 95       	ret

00000c5e <BUTTON_init>:


en_buttonError_t BUTTON_init(u8 u8_a_buttonPort, u8 u8_a_buttonPin)
{
	en_buttonError_t en_a_error = BUTTON_OK;
	if (u8_a_buttonPort > PORT_D)
     c5e:	85 34       	cpi	r24, 0x45	; 69
     c60:	38 f4       	brcc	.+14     	; 0xc70 <BUTTON_init+0x12>
	{
		en_a_error = WRONG_BUTTON_PORT;
	}
	else if (u8_a_buttonPin > 7)
     c62:	68 30       	cpi	r22, 0x08	; 8
     c64:	38 f4       	brcc	.+14     	; 0xc74 <BUTTON_init+0x16>
	{
		en_a_error = WRONG_BUTTON_PIN;
	}
	else
	{		
		DIO_init(u8_a_buttonPort, u8_a_buttonPin, INPUT);
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
		en_a_error = BUTTON_OK;
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	08 95       	ret
en_buttonError_t BUTTON_init(u8 u8_a_buttonPort, u8 u8_a_buttonPin)
{
	en_buttonError_t en_a_error = BUTTON_OK;
	if (u8_a_buttonPort > PORT_D)
	{
		en_a_error = WRONG_BUTTON_PORT;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	08 95       	ret
	}
	else if (u8_a_buttonPin > 7)
	{
		en_a_error = WRONG_BUTTON_PIN;
     c74:	82 e0       	ldi	r24, 0x02	; 2
		DIO_init(u8_a_buttonPort, u8_a_buttonPin, INPUT);
		en_a_error = BUTTON_OK;
	}
	
	return en_a_error;
}
     c76:	08 95       	ret

00000c78 <BUTTON_read>:

en_buttonError_t BUTTON_read(u8 u8_a_buttonPort, u8 u8_a_buttonPin, u8 *u8_a_buttonState)
{
	en_buttonError_t en_a_error = BUTTON_OK;
	if (u8_a_buttonPort > PORT_D)
     c78:	85 34       	cpi	r24, 0x45	; 69
     c7a:	30 f4       	brcc	.+12     	; 0xc88 <BUTTON_read+0x10>
	{
		en_a_error = WRONG_BUTTON_PORT;
	}
	else if (u8_a_buttonPin > 7)
     c7c:	68 30       	cpi	r22, 0x08	; 8
     c7e:	30 f4       	brcc	.+12     	; 0xc8c <BUTTON_read+0x14>
	{
		en_a_error = WRONG_BUTTON_PIN;
	}
	else
	{
		DIO_read(u8_a_buttonPort, u8_a_buttonPin, u8_a_buttonState);
     c80:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
		en_a_error = BUTTON_OK;
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	08 95       	ret
en_buttonError_t BUTTON_read(u8 u8_a_buttonPort, u8 u8_a_buttonPin, u8 *u8_a_buttonState)
{
	en_buttonError_t en_a_error = BUTTON_OK;
	if (u8_a_buttonPort > PORT_D)
	{
		en_a_error = WRONG_BUTTON_PORT;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	08 95       	ret
	}
	else if (u8_a_buttonPin > 7)
	{
		en_a_error = WRONG_BUTTON_PIN;
     c8c:	82 e0       	ldi	r24, 0x02	; 2
		DIO_read(u8_a_buttonPort, u8_a_buttonPin, u8_a_buttonState);
		en_a_error = BUTTON_OK;
	}
	
	return en_a_error;
     c8e:	08 95       	ret

00000c90 <BUZZER_init>:
*											WRONG_BUZZER
*******************************************************************************/	
en_buzzerError_t	BUZZER_init		(u8 u8_a_buzzerNumber)
{
	en_buzzerError_t error = BUZZER_OK;
	if (u8_a_buzzerNumber >= 0 && u8_a_buzzerNumber < NUMBER_OF_BUZZERS)
     c90:	81 11       	cpse	r24, r1
     c92:	0d c0       	rjmp	.+26     	; 0xcae <BUZZER_init+0x1e>
	{
		DIO_init(buzzerDB[u8_a_buzzerNumber].portNumber, buzzerDB[u8_a_buzzerNumber].pinNumber, OUTPUT);
     c94:	e8 2f       	mov	r30, r24
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	e0 5b       	subi	r30, 0xB0	; 176
     c9e:	fe 4f       	sbci	r31, 0xFE	; 254
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	61 81       	ldd	r22, Z+1	; 0x01
     ca4:	80 81       	ld	r24, Z
     ca6:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
* \Return value:   : en_buzzerError_t		BUZZER_OK
*											WRONG_BUZZER
*******************************************************************************/	
en_buzzerError_t	BUZZER_init		(u8 u8_a_buzzerNumber)
{
	en_buzzerError_t error = BUZZER_OK;
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	08 95       	ret
	{
		DIO_init(buzzerDB[u8_a_buzzerNumber].portNumber, buzzerDB[u8_a_buzzerNumber].pinNumber, OUTPUT);
	}
	else
	{
		error = WRONG_BUZZER;
     cae:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return error;
}
     cb0:	08 95       	ret

00000cb2 <BUZZER_on>:
*******************************************************************************/
en_buzzerError_t	BUZZER_on		(u8 u8_a_buzzerNumber)
{
	en_buzzerError_t error = BUZZER_OK;
	
	if (u8_a_buzzerNumber >= 0 && u8_a_buzzerNumber < NUMBER_OF_BUZZERS)
     cb2:	81 11       	cpse	r24, r1
     cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <BUZZER_on+0x1e>
	{
		DIO_write(buzzerDB[u8_a_buzzerNumber].portNumber, buzzerDB[u8_a_buzzerNumber].pinNumber, HIGH);
     cb6:	e8 2f       	mov	r30, r24
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	ee 0f       	add	r30, r30
     cbc:	ff 1f       	adc	r31, r31
     cbe:	e0 5b       	subi	r30, 0xB0	; 176
     cc0:	fe 4f       	sbci	r31, 0xFE	; 254
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	61 81       	ldd	r22, Z+1	; 0x01
     cc6:	80 81       	ld	r24, Z
     cc8:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
* \Return value:   : en_buzzerError_t		BUZZER_OK
*											WRONG_BUZZER
*******************************************************************************/
en_buzzerError_t	BUZZER_on		(u8 u8_a_buzzerNumber)
{
	en_buzzerError_t error = BUZZER_OK;
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	08 95       	ret
	{
		DIO_write(buzzerDB[u8_a_buzzerNumber].portNumber, buzzerDB[u8_a_buzzerNumber].pinNumber, HIGH);
	}
	else
	{
		error = WRONG_BUZZER;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return error;
}
     cd2:	08 95       	ret

00000cd4 <KEYPAD_init>:
* \Parameters (out): None
* \Return value:   : None
*******************************************************************************/
void KEYPAD_init				(void)
{
	DIO_init(KEYPAD_R0_PORT,KEYPAD_R0_PIN,OUTPUT);
     cd4:	41 e0       	ldi	r20, 0x01	; 1
     cd6:	62 e0       	ldi	r22, 0x02	; 2
     cd8:	83 e4       	ldi	r24, 0x43	; 67
     cda:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
	DIO_init(KEYPAD_R1_PORT,KEYPAD_R1_PIN,OUTPUT);
     cde:	41 e0       	ldi	r20, 0x01	; 1
     ce0:	63 e0       	ldi	r22, 0x03	; 3
     ce2:	83 e4       	ldi	r24, 0x43	; 67
     ce4:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
	DIO_init(KEYPAD_R2_PORT,KEYPAD_R2_PIN,OUTPUT);
     ce8:	41 e0       	ldi	r20, 0x01	; 1
     cea:	64 e0       	ldi	r22, 0x04	; 4
     cec:	83 e4       	ldi	r24, 0x43	; 67
     cee:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
	
	
	DIO_write(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
     cf2:	41 e0       	ldi	r20, 0x01	; 1
     cf4:	62 e0       	ldi	r22, 0x02	; 2
     cf6:	83 e4       	ldi	r24, 0x43	; 67
     cf8:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	DIO_write(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
     cfc:	41 e0       	ldi	r20, 0x01	; 1
     cfe:	63 e0       	ldi	r22, 0x03	; 3
     d00:	83 e4       	ldi	r24, 0x43	; 67
     d02:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	DIO_write(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
     d06:	41 e0       	ldi	r20, 0x01	; 1
     d08:	64 e0       	ldi	r22, 0x04	; 4
     d0a:	83 e4       	ldi	r24, 0x43	; 67
     d0c:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	
	DIO_init(KEYPAD_C0_PORT,KEYPAD_C0_PIN,INPUT);
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	65 e0       	ldi	r22, 0x05	; 5
     d14:	83 e4       	ldi	r24, 0x43	; 67
     d16:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
	DIO_init(KEYPAD_C1_PORT,KEYPAD_C1_PIN,INPUT);
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	66 e0       	ldi	r22, 0x06	; 6
     d1e:	83 e4       	ldi	r24, 0x43	; 67
     d20:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
	DIO_init(KEYPAD_C2_PORT,KEYPAD_C2_PIN,INPUT);
     d24:	40 e0       	ldi	r20, 0x00	; 0
     d26:	67 e0       	ldi	r22, 0x07	; 7
     d28:	83 e4       	ldi	r24, 0x43	; 67
     d2a:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
	
	DIO_pinPullUp(KEYPAD_C0_PORT,KEYPAD_C0_PIN,PULLUP_ENABLE);
     d2e:	41 e0       	ldi	r20, 0x01	; 1
     d30:	65 e0       	ldi	r22, 0x05	; 5
     d32:	83 e4       	ldi	r24, 0x43	; 67
     d34:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_pinPullUp>
	DIO_pinPullUp(KEYPAD_C1_PORT,KEYPAD_C1_PIN,PULLUP_ENABLE);
     d38:	41 e0       	ldi	r20, 0x01	; 1
     d3a:	66 e0       	ldi	r22, 0x06	; 6
     d3c:	83 e4       	ldi	r24, 0x43	; 67
     d3e:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_pinPullUp>
	DIO_pinPullUp(KEYPAD_C2_PORT,KEYPAD_C2_PIN,PULLUP_ENABLE);
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	67 e0       	ldi	r22, 0x07	; 7
     d46:	83 e4       	ldi	r24, 0x43	; 67
     d48:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_pinPullUp>
     d4c:	08 95       	ret

00000d4e <KEYPAD_read>:
* \Parameters (out): None
* \Return value:   : u8			returns 0 if there is no key pressed
*								or equivalent value for the key if there is a key pressed
*******************************************************************************/
u8	 KEYPAD_read				(void)
{
     d4e:	1f 93       	push	r17
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	1f 92       	push	r1
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
	u8 u8_a_keypadReading		=	0, u8_a_pinState = 0;
     d5a:	19 82       	std	Y+1, r1	; 0x01
	
	u8 u8_arr_a_keypadArr [3][3]	={	{'1','2','3'},
										{'4','5','6'},
										{'7','8','9'} };
	
	DIO_write(KEYPAD_R0_PORT,KEYPAD_R0_PIN,LOW);
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	62 e0       	ldi	r22, 0x02	; 2
     d60:	83 e4       	ldi	r24, 0x43	; 67
     d62:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	
	DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState); 
     d66:	ae 01       	movw	r20, r28
     d68:	4f 5f       	subi	r20, 0xFF	; 255
     d6a:	5f 4f       	sbci	r21, 0xFF	; 255
     d6c:	65 e0       	ldi	r22, 0x05	; 5
     d6e:	83 e4       	ldi	r24, 0x43	; 67
     d70:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	if(u8_a_pinState== 0) 
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	81 11       	cpse	r24, r1
     d78:	24 c0       	rjmp	.+72     	; 0xdc2 <KEYPAD_read+0x74>
	{ 
		TIMER_delay(TIMER_2, 70);
     d7a:	46 e4       	ldi	r20, 0x46	; 70
     d7c:	50 e0       	ldi	r21, 0x00	; 0
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
		DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState);
     d88:	ae 01       	movw	r20, r28
     d8a:	4f 5f       	subi	r20, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	65 e0       	ldi	r22, 0x05	; 5
     d90:	83 e4       	ldi	r24, 0x43	; 67
     d92:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
		if(u8_a_pinState == 0) 
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	88 23       	and	r24, r24
     d9a:	49 f0       	breq	.+18     	; 0xdae <KEYPAD_read+0x60>
* \Return value:   : u8			returns 0 if there is no key pressed
*								or equivalent value for the key if there is a key pressed
*******************************************************************************/
u8	 KEYPAD_read				(void)
{
	u8 u8_a_keypadReading		=	0, u8_a_pinState = 0;
     d9c:	10 e0       	ldi	r17, 0x00	; 0
     d9e:	12 c0       	rjmp	.+36     	; 0xdc4 <KEYPAD_read+0x76>
		TIMER_delay(TIMER_2, 70);
		DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState);
		if(u8_a_pinState == 0) 
		{
			while(u8_a_pinState == 0)
			DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState); 
     da0:	ae 01       	movw	r20, r28
     da2:	4f 5f       	subi	r20, 0xFF	; 255
     da4:	5f 4f       	sbci	r21, 0xFF	; 255
     da6:	65 e0       	ldi	r22, 0x05	; 5
     da8:	83 e4       	ldi	r24, 0x43	; 67
     daa:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	{ 
		TIMER_delay(TIMER_2, 70);
		DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState);
		if(u8_a_pinState == 0) 
		{
			while(u8_a_pinState == 0)
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	88 23       	and	r24, r24
     db2:	b1 f3       	breq	.-20     	; 0xda0 <KEYPAD_read+0x52>
			DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState); 
			DIO_write(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
     db4:	41 e0       	ldi	r20, 0x01	; 1
     db6:	62 e0       	ldi	r22, 0x02	; 2
     db8:	83 e4       	ldi	r24, 0x43	; 67
     dba:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			u8_a_keypadReading = u8_arr_a_keypadArr [0][0];
     dbe:	11 e3       	ldi	r17, 0x31	; 49
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <KEYPAD_read+0x76>
* \Return value:   : u8			returns 0 if there is no key pressed
*								or equivalent value for the key if there is a key pressed
*******************************************************************************/
u8	 KEYPAD_read				(void)
{
	u8 u8_a_keypadReading		=	0, u8_a_pinState = 0;
     dc2:	10 e0       	ldi	r17, 0x00	; 0
			DIO_write(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
			u8_a_keypadReading = u8_arr_a_keypadArr [0][0];
		}
	}
	
	DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
     dc4:	ae 01       	movw	r20, r28
     dc6:	4f 5f       	subi	r20, 0xFF	; 255
     dc8:	5f 4f       	sbci	r21, 0xFF	; 255
     dca:	66 e0       	ldi	r22, 0x06	; 6
     dcc:	83 e4       	ldi	r24, 0x43	; 67
     dce:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	if(u8_a_pinState == 0) 
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	81 11       	cpse	r24, r1
     dd6:	22 c0       	rjmp	.+68     	; 0xe1c <KEYPAD_read+0xce>
	{ 
		TIMER_delay(TIMER_2, 70);
     dd8:	46 e4       	ldi	r20, 0x46	; 70
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	82 e0       	ldi	r24, 0x02	; 2
     de2:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
		DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
     de6:	ae 01       	movw	r20, r28
     de8:	4f 5f       	subi	r20, 0xFF	; 255
     dea:	5f 4f       	sbci	r21, 0xFF	; 255
     dec:	66 e0       	ldi	r22, 0x06	; 6
     dee:	83 e4       	ldi	r24, 0x43	; 67
     df0:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
		if(u8_a_pinState == 0)
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	88 23       	and	r24, r24
     df8:	41 f0       	breq	.+16     	; 0xe0a <KEYPAD_read+0xbc>
     dfa:	10 c0       	rjmp	.+32     	; 0xe1c <KEYPAD_read+0xce>
		{
			while(u8_a_pinState == 0)
			DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
     dfc:	ae 01       	movw	r20, r28
     dfe:	4f 5f       	subi	r20, 0xFF	; 255
     e00:	5f 4f       	sbci	r21, 0xFF	; 255
     e02:	66 e0       	ldi	r22, 0x06	; 6
     e04:	83 e4       	ldi	r24, 0x43	; 67
     e06:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	{ 
		TIMER_delay(TIMER_2, 70);
		DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
		if(u8_a_pinState == 0)
		{
			while(u8_a_pinState == 0)
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	88 23       	and	r24, r24
     e0e:	b1 f3       	breq	.-20     	; 0xdfc <KEYPAD_read+0xae>
			DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
			DIO_write(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
     e10:	41 e0       	ldi	r20, 0x01	; 1
     e12:	62 e0       	ldi	r22, 0x02	; 2
     e14:	83 e4       	ldi	r24, 0x43	; 67
     e16:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			u8_a_keypadReading = u8_arr_a_keypadArr [0][1];
     e1a:	12 e3       	ldi	r17, 0x32	; 50
		}
	}
	
	DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
     e1c:	ae 01       	movw	r20, r28
     e1e:	4f 5f       	subi	r20, 0xFF	; 255
     e20:	5f 4f       	sbci	r21, 0xFF	; 255
     e22:	67 e0       	ldi	r22, 0x07	; 7
     e24:	83 e4       	ldi	r24, 0x43	; 67
     e26:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	if(u8_a_pinState == 0)
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	81 11       	cpse	r24, r1
     e2e:	22 c0       	rjmp	.+68     	; 0xe74 <KEYPAD_read+0x126>
	{ 
		TIMER_delay(TIMER_2, 70);
     e30:	46 e4       	ldi	r20, 0x46	; 70
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
		DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
     e3e:	ae 01       	movw	r20, r28
     e40:	4f 5f       	subi	r20, 0xFF	; 255
     e42:	5f 4f       	sbci	r21, 0xFF	; 255
     e44:	67 e0       	ldi	r22, 0x07	; 7
     e46:	83 e4       	ldi	r24, 0x43	; 67
     e48:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
		if(u8_a_pinState == 0)
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	88 23       	and	r24, r24
     e50:	41 f0       	breq	.+16     	; 0xe62 <KEYPAD_read+0x114>
     e52:	10 c0       	rjmp	.+32     	; 0xe74 <KEYPAD_read+0x126>
		{
			while(u8_a_pinState == 0)
			DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
     e54:	ae 01       	movw	r20, r28
     e56:	4f 5f       	subi	r20, 0xFF	; 255
     e58:	5f 4f       	sbci	r21, 0xFF	; 255
     e5a:	67 e0       	ldi	r22, 0x07	; 7
     e5c:	83 e4       	ldi	r24, 0x43	; 67
     e5e:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	{ 
		TIMER_delay(TIMER_2, 70);
		DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
		if(u8_a_pinState == 0)
		{
			while(u8_a_pinState == 0)
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	88 23       	and	r24, r24
     e66:	b1 f3       	breq	.-20     	; 0xe54 <KEYPAD_read+0x106>
			DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
			DIO_write(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
     e68:	41 e0       	ldi	r20, 0x01	; 1
     e6a:	62 e0       	ldi	r22, 0x02	; 2
     e6c:	83 e4       	ldi	r24, 0x43	; 67
     e6e:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			u8_a_keypadReading = u8_arr_a_keypadArr [0][2];
     e72:	13 e3       	ldi	r17, 0x33	; 51
		}
	}
	
	DIO_write(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
     e74:	41 e0       	ldi	r20, 0x01	; 1
     e76:	62 e0       	ldi	r22, 0x02	; 2
     e78:	83 e4       	ldi	r24, 0x43	; 67
     e7a:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	
	
	DIO_write(KEYPAD_R1_PORT,KEYPAD_R1_PIN,LOW);
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	63 e0       	ldi	r22, 0x03	; 3
     e82:	83 e4       	ldi	r24, 0x43	; 67
     e84:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	
	DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState);
     e88:	ae 01       	movw	r20, r28
     e8a:	4f 5f       	subi	r20, 0xFF	; 255
     e8c:	5f 4f       	sbci	r21, 0xFF	; 255
     e8e:	65 e0       	ldi	r22, 0x05	; 5
     e90:	83 e4       	ldi	r24, 0x43	; 67
     e92:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	if(u8_a_pinState== 0)
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	81 11       	cpse	r24, r1
     e9a:	22 c0       	rjmp	.+68     	; 0xee0 <KEYPAD_read+0x192>
	{
		TIMER_delay(TIMER_2, 70);
     e9c:	46 e4       	ldi	r20, 0x46	; 70
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
		DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState);
     eaa:	ae 01       	movw	r20, r28
     eac:	4f 5f       	subi	r20, 0xFF	; 255
     eae:	5f 4f       	sbci	r21, 0xFF	; 255
     eb0:	65 e0       	ldi	r22, 0x05	; 5
     eb2:	83 e4       	ldi	r24, 0x43	; 67
     eb4:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
		if(u8_a_pinState == 0)
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	88 23       	and	r24, r24
     ebc:	41 f0       	breq	.+16     	; 0xece <KEYPAD_read+0x180>
     ebe:	10 c0       	rjmp	.+32     	; 0xee0 <KEYPAD_read+0x192>
		{
			while(u8_a_pinState == 0)
			DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState);
     ec0:	ae 01       	movw	r20, r28
     ec2:	4f 5f       	subi	r20, 0xFF	; 255
     ec4:	5f 4f       	sbci	r21, 0xFF	; 255
     ec6:	65 e0       	ldi	r22, 0x05	; 5
     ec8:	83 e4       	ldi	r24, 0x43	; 67
     eca:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	{
		TIMER_delay(TIMER_2, 70);
		DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState);
		if(u8_a_pinState == 0)
		{
			while(u8_a_pinState == 0)
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	88 23       	and	r24, r24
     ed2:	b1 f3       	breq	.-20     	; 0xec0 <KEYPAD_read+0x172>
			DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState);
			DIO_write(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
     ed4:	41 e0       	ldi	r20, 0x01	; 1
     ed6:	63 e0       	ldi	r22, 0x03	; 3
     ed8:	83 e4       	ldi	r24, 0x43	; 67
     eda:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			u8_a_keypadReading = u8_arr_a_keypadArr [1][0];
     ede:	14 e3       	ldi	r17, 0x34	; 52
		}
	}
	
	DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
     ee0:	ae 01       	movw	r20, r28
     ee2:	4f 5f       	subi	r20, 0xFF	; 255
     ee4:	5f 4f       	sbci	r21, 0xFF	; 255
     ee6:	66 e0       	ldi	r22, 0x06	; 6
     ee8:	83 e4       	ldi	r24, 0x43	; 67
     eea:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	if(u8_a_pinState == 0)
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	81 11       	cpse	r24, r1
     ef2:	22 c0       	rjmp	.+68     	; 0xf38 <KEYPAD_read+0x1ea>
	{
		TIMER_delay(TIMER_2, 70);
     ef4:	46 e4       	ldi	r20, 0x46	; 70
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
		DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
     f02:	ae 01       	movw	r20, r28
     f04:	4f 5f       	subi	r20, 0xFF	; 255
     f06:	5f 4f       	sbci	r21, 0xFF	; 255
     f08:	66 e0       	ldi	r22, 0x06	; 6
     f0a:	83 e4       	ldi	r24, 0x43	; 67
     f0c:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
		if(u8_a_pinState == 0)
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	88 23       	and	r24, r24
     f14:	41 f0       	breq	.+16     	; 0xf26 <KEYPAD_read+0x1d8>
     f16:	10 c0       	rjmp	.+32     	; 0xf38 <KEYPAD_read+0x1ea>
		{
			while(u8_a_pinState == 0)
			DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
     f18:	ae 01       	movw	r20, r28
     f1a:	4f 5f       	subi	r20, 0xFF	; 255
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	66 e0       	ldi	r22, 0x06	; 6
     f20:	83 e4       	ldi	r24, 0x43	; 67
     f22:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	{
		TIMER_delay(TIMER_2, 70);
		DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
		if(u8_a_pinState == 0)
		{
			while(u8_a_pinState == 0)
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	88 23       	and	r24, r24
     f2a:	b1 f3       	breq	.-20     	; 0xf18 <KEYPAD_read+0x1ca>
			DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
			DIO_write(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
     f2c:	41 e0       	ldi	r20, 0x01	; 1
     f2e:	63 e0       	ldi	r22, 0x03	; 3
     f30:	83 e4       	ldi	r24, 0x43	; 67
     f32:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			u8_a_keypadReading = u8_arr_a_keypadArr [1][1];
     f36:	15 e3       	ldi	r17, 0x35	; 53
		}
	}
	
	DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
     f38:	ae 01       	movw	r20, r28
     f3a:	4f 5f       	subi	r20, 0xFF	; 255
     f3c:	5f 4f       	sbci	r21, 0xFF	; 255
     f3e:	67 e0       	ldi	r22, 0x07	; 7
     f40:	83 e4       	ldi	r24, 0x43	; 67
     f42:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	if(u8_a_pinState == 0)
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	81 11       	cpse	r24, r1
     f4a:	22 c0       	rjmp	.+68     	; 0xf90 <KEYPAD_read+0x242>
	{
		TIMER_delay(TIMER_2, 70);
     f4c:	46 e4       	ldi	r20, 0x46	; 70
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	82 e0       	ldi	r24, 0x02	; 2
     f56:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
		DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
     f5a:	ae 01       	movw	r20, r28
     f5c:	4f 5f       	subi	r20, 0xFF	; 255
     f5e:	5f 4f       	sbci	r21, 0xFF	; 255
     f60:	67 e0       	ldi	r22, 0x07	; 7
     f62:	83 e4       	ldi	r24, 0x43	; 67
     f64:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
		if(u8_a_pinState == 0)
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	88 23       	and	r24, r24
     f6c:	41 f0       	breq	.+16     	; 0xf7e <KEYPAD_read+0x230>
     f6e:	10 c0       	rjmp	.+32     	; 0xf90 <KEYPAD_read+0x242>
		{
			while(u8_a_pinState == 0)
			DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
     f70:	ae 01       	movw	r20, r28
     f72:	4f 5f       	subi	r20, 0xFF	; 255
     f74:	5f 4f       	sbci	r21, 0xFF	; 255
     f76:	67 e0       	ldi	r22, 0x07	; 7
     f78:	83 e4       	ldi	r24, 0x43	; 67
     f7a:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	{
		TIMER_delay(TIMER_2, 70);
		DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
		if(u8_a_pinState == 0)
		{
			while(u8_a_pinState == 0)
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
     f80:	88 23       	and	r24, r24
     f82:	b1 f3       	breq	.-20     	; 0xf70 <KEYPAD_read+0x222>
			DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
			DIO_write(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	63 e0       	ldi	r22, 0x03	; 3
     f88:	83 e4       	ldi	r24, 0x43	; 67
     f8a:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			u8_a_keypadReading = u8_arr_a_keypadArr [1][2];
     f8e:	16 e3       	ldi	r17, 0x36	; 54
		}
	}
		
	DIO_write(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	63 e0       	ldi	r22, 0x03	; 3
     f94:	83 e4       	ldi	r24, 0x43	; 67
     f96:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	
	
	DIO_write(KEYPAD_R2_PORT,KEYPAD_R2_PIN,LOW);
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	64 e0       	ldi	r22, 0x04	; 4
     f9e:	83 e4       	ldi	r24, 0x43	; 67
     fa0:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	
	DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState);
     fa4:	ae 01       	movw	r20, r28
     fa6:	4f 5f       	subi	r20, 0xFF	; 255
     fa8:	5f 4f       	sbci	r21, 0xFF	; 255
     faa:	65 e0       	ldi	r22, 0x05	; 5
     fac:	83 e4       	ldi	r24, 0x43	; 67
     fae:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	if(u8_a_pinState== 0)
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	81 11       	cpse	r24, r1
     fb6:	22 c0       	rjmp	.+68     	; 0xffc <KEYPAD_read+0x2ae>
	{
		TIMER_delay(TIMER_2, 70);
     fb8:	46 e4       	ldi	r20, 0x46	; 70
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
		DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState);
     fc6:	ae 01       	movw	r20, r28
     fc8:	4f 5f       	subi	r20, 0xFF	; 255
     fca:	5f 4f       	sbci	r21, 0xFF	; 255
     fcc:	65 e0       	ldi	r22, 0x05	; 5
     fce:	83 e4       	ldi	r24, 0x43	; 67
     fd0:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
		if(u8_a_pinState == 0)
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	88 23       	and	r24, r24
     fd8:	41 f0       	breq	.+16     	; 0xfea <KEYPAD_read+0x29c>
     fda:	10 c0       	rjmp	.+32     	; 0xffc <KEYPAD_read+0x2ae>
		{
			while(u8_a_pinState == 0)
			DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState);
     fdc:	ae 01       	movw	r20, r28
     fde:	4f 5f       	subi	r20, 0xFF	; 255
     fe0:	5f 4f       	sbci	r21, 0xFF	; 255
     fe2:	65 e0       	ldi	r22, 0x05	; 5
     fe4:	83 e4       	ldi	r24, 0x43	; 67
     fe6:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	{
		TIMER_delay(TIMER_2, 70);
		DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState);
		if(u8_a_pinState == 0)
		{
			while(u8_a_pinState == 0)
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	88 23       	and	r24, r24
     fee:	b1 f3       	breq	.-20     	; 0xfdc <KEYPAD_read+0x28e>
			DIO_read(KEYPAD_C0_PORT, KEYPAD_C0_PIN, &u8_a_pinState);
			DIO_write(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
     ff0:	41 e0       	ldi	r20, 0x01	; 1
     ff2:	64 e0       	ldi	r22, 0x04	; 4
     ff4:	83 e4       	ldi	r24, 0x43	; 67
     ff6:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			u8_a_keypadReading = u8_arr_a_keypadArr [2][0];
     ffa:	17 e3       	ldi	r17, 0x37	; 55
		}
	}
	
	DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
     ffc:	ae 01       	movw	r20, r28
     ffe:	4f 5f       	subi	r20, 0xFF	; 255
    1000:	5f 4f       	sbci	r21, 0xFF	; 255
    1002:	66 e0       	ldi	r22, 0x06	; 6
    1004:	83 e4       	ldi	r24, 0x43	; 67
    1006:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	if(u8_a_pinState == 0)
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	81 11       	cpse	r24, r1
    100e:	22 c0       	rjmp	.+68     	; 0x1054 <KEYPAD_read+0x306>
	{
		TIMER_delay(TIMER_2, 70);
    1010:	46 e4       	ldi	r20, 0x46	; 70
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
		DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
    101e:	ae 01       	movw	r20, r28
    1020:	4f 5f       	subi	r20, 0xFF	; 255
    1022:	5f 4f       	sbci	r21, 0xFF	; 255
    1024:	66 e0       	ldi	r22, 0x06	; 6
    1026:	83 e4       	ldi	r24, 0x43	; 67
    1028:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
		if(u8_a_pinState == 0)
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	88 23       	and	r24, r24
    1030:	41 f0       	breq	.+16     	; 0x1042 <KEYPAD_read+0x2f4>
    1032:	10 c0       	rjmp	.+32     	; 0x1054 <KEYPAD_read+0x306>
		{
			while(u8_a_pinState == 0)
			DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
    1034:	ae 01       	movw	r20, r28
    1036:	4f 5f       	subi	r20, 0xFF	; 255
    1038:	5f 4f       	sbci	r21, 0xFF	; 255
    103a:	66 e0       	ldi	r22, 0x06	; 6
    103c:	83 e4       	ldi	r24, 0x43	; 67
    103e:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	{
		TIMER_delay(TIMER_2, 70);
		DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
		if(u8_a_pinState == 0)
		{
			while(u8_a_pinState == 0)
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	88 23       	and	r24, r24
    1046:	b1 f3       	breq	.-20     	; 0x1034 <KEYPAD_read+0x2e6>
			DIO_read(KEYPAD_C1_PORT, KEYPAD_C1_PIN, &u8_a_pinState);
			DIO_write(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
    1048:	41 e0       	ldi	r20, 0x01	; 1
    104a:	64 e0       	ldi	r22, 0x04	; 4
    104c:	83 e4       	ldi	r24, 0x43	; 67
    104e:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			u8_a_keypadReading = u8_arr_a_keypadArr [2][1];
    1052:	18 e3       	ldi	r17, 0x38	; 56
		}
	}
	
	DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
    1054:	ae 01       	movw	r20, r28
    1056:	4f 5f       	subi	r20, 0xFF	; 255
    1058:	5f 4f       	sbci	r21, 0xFF	; 255
    105a:	67 e0       	ldi	r22, 0x07	; 7
    105c:	83 e4       	ldi	r24, 0x43	; 67
    105e:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	if(u8_a_pinState == 0)
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	81 11       	cpse	r24, r1
    1066:	22 c0       	rjmp	.+68     	; 0x10ac <KEYPAD_read+0x35e>
	{
		TIMER_delay(TIMER_2, 70);
    1068:	46 e4       	ldi	r20, 0x46	; 70
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
		DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
    1076:	ae 01       	movw	r20, r28
    1078:	4f 5f       	subi	r20, 0xFF	; 255
    107a:	5f 4f       	sbci	r21, 0xFF	; 255
    107c:	67 e0       	ldi	r22, 0x07	; 7
    107e:	83 e4       	ldi	r24, 0x43	; 67
    1080:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
		if(u8_a_pinState == 0)
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	88 23       	and	r24, r24
    1088:	41 f0       	breq	.+16     	; 0x109a <KEYPAD_read+0x34c>
    108a:	10 c0       	rjmp	.+32     	; 0x10ac <KEYPAD_read+0x35e>
		{
			while(u8_a_pinState == 0)
			DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
    108c:	ae 01       	movw	r20, r28
    108e:	4f 5f       	subi	r20, 0xFF	; 255
    1090:	5f 4f       	sbci	r21, 0xFF	; 255
    1092:	67 e0       	ldi	r22, 0x07	; 7
    1094:	83 e4       	ldi	r24, 0x43	; 67
    1096:	0e 94 cf 0a 	call	0x159e	; 0x159e <DIO_read>
	{
		TIMER_delay(TIMER_2, 70);
		DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
		if(u8_a_pinState == 0)
		{
			while(u8_a_pinState == 0)
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	88 23       	and	r24, r24
    109e:	b1 f3       	breq	.-20     	; 0x108c <KEYPAD_read+0x33e>
			DIO_read(KEYPAD_C2_PORT, KEYPAD_C2_PIN, &u8_a_pinState);
			DIO_write(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
    10a0:	41 e0       	ldi	r20, 0x01	; 1
    10a2:	64 e0       	ldi	r22, 0x04	; 4
    10a4:	83 e4       	ldi	r24, 0x43	; 67
    10a6:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			u8_a_keypadReading = u8_arr_a_keypadArr [2][2];
    10aa:	19 e3       	ldi	r17, 0x39	; 57
		}
	}
	
	DIO_write(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	64 e0       	ldi	r22, 0x04	; 4
    10b0:	83 e4       	ldi	r24, 0x43	; 67
    10b2:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	
	return u8_a_keypadReading ;
    10b6:	81 2f       	mov	r24, r17
    10b8:	0f 90       	pop	r0
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	08 95       	ret

000010c2 <LCD_WriteIns>:
	for(u8 i=0;i<8;i++)
	{
		LCD_WriteData(u8_a_pattern[i]);
	}
	LCD_WriteIns(0x80);
}
    10c2:	cf 93       	push	r28
    10c4:	c8 2f       	mov	r28, r24
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	81 e4       	ldi	r24, 0x41	; 65
    10cc:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    10d0:	4c 2f       	mov	r20, r28
    10d2:	44 1f       	adc	r20, r20
    10d4:	44 27       	eor	r20, r20
    10d6:	44 1f       	adc	r20, r20
    10d8:	67 e0       	ldi	r22, 0x07	; 7
    10da:	81 e4       	ldi	r24, 0x41	; 65
    10dc:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    10e0:	c6 fb       	bst	r28, 6
    10e2:	44 27       	eor	r20, r20
    10e4:	40 f9       	bld	r20, 0
    10e6:	66 e0       	ldi	r22, 0x06	; 6
    10e8:	81 e4       	ldi	r24, 0x41	; 65
    10ea:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    10ee:	c5 fb       	bst	r28, 5
    10f0:	44 27       	eor	r20, r20
    10f2:	40 f9       	bld	r20, 0
    10f4:	65 e0       	ldi	r22, 0x05	; 5
    10f6:	81 e4       	ldi	r24, 0x41	; 65
    10f8:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    10fc:	c4 fb       	bst	r28, 4
    10fe:	44 27       	eor	r20, r20
    1100:	40 f9       	bld	r20, 0
    1102:	64 e0       	ldi	r22, 0x04	; 4
    1104:	81 e4       	ldi	r24, 0x41	; 65
    1106:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    110a:	41 e0       	ldi	r20, 0x01	; 1
    110c:	63 e0       	ldi	r22, 0x03	; 3
    110e:	81 e4       	ldi	r24, 0x41	; 65
    1110:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    1114:	41 e0       	ldi	r20, 0x01	; 1
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	70 e0       	ldi	r23, 0x00	; 0
    111c:	82 e0       	ldi	r24, 0x02	; 2
    111e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	63 e0       	ldi	r22, 0x03	; 3
    1126:	81 e4       	ldi	r24, 0x41	; 65
    1128:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    112c:	41 e0       	ldi	r20, 0x01	; 1
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
    113a:	c3 fb       	bst	r28, 3
    113c:	44 27       	eor	r20, r20
    113e:	40 f9       	bld	r20, 0
    1140:	67 e0       	ldi	r22, 0x07	; 7
    1142:	81 e4       	ldi	r24, 0x41	; 65
    1144:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    1148:	c2 fb       	bst	r28, 2
    114a:	44 27       	eor	r20, r20
    114c:	40 f9       	bld	r20, 0
    114e:	66 e0       	ldi	r22, 0x06	; 6
    1150:	81 e4       	ldi	r24, 0x41	; 65
    1152:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    1156:	c1 fb       	bst	r28, 1
    1158:	44 27       	eor	r20, r20
    115a:	40 f9       	bld	r20, 0
    115c:	65 e0       	ldi	r22, 0x05	; 5
    115e:	81 e4       	ldi	r24, 0x41	; 65
    1160:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    1164:	4c 2f       	mov	r20, r28
    1166:	41 70       	andi	r20, 0x01	; 1
    1168:	64 e0       	ldi	r22, 0x04	; 4
    116a:	81 e4       	ldi	r24, 0x41	; 65
    116c:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    1170:	41 e0       	ldi	r20, 0x01	; 1
    1172:	63 e0       	ldi	r22, 0x03	; 3
    1174:	81 e4       	ldi	r24, 0x41	; 65
    1176:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    117a:	41 e0       	ldi	r20, 0x01	; 1
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
    1188:	40 e0       	ldi	r20, 0x00	; 0
    118a:	63 e0       	ldi	r22, 0x03	; 3
    118c:	81 e4       	ldi	r24, 0x41	; 65
    118e:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    1192:	41 e0       	ldi	r20, 0x01	; 1
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <LCD_WriteData>:
    11a4:	cf 93       	push	r28
    11a6:	c8 2f       	mov	r28, r24
    11a8:	41 e0       	ldi	r20, 0x01	; 1
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	81 e4       	ldi	r24, 0x41	; 65
    11ae:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    11b2:	4c 2f       	mov	r20, r28
    11b4:	44 1f       	adc	r20, r20
    11b6:	44 27       	eor	r20, r20
    11b8:	44 1f       	adc	r20, r20
    11ba:	67 e0       	ldi	r22, 0x07	; 7
    11bc:	81 e4       	ldi	r24, 0x41	; 65
    11be:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    11c2:	c6 fb       	bst	r28, 6
    11c4:	44 27       	eor	r20, r20
    11c6:	40 f9       	bld	r20, 0
    11c8:	66 e0       	ldi	r22, 0x06	; 6
    11ca:	81 e4       	ldi	r24, 0x41	; 65
    11cc:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    11d0:	c5 fb       	bst	r28, 5
    11d2:	44 27       	eor	r20, r20
    11d4:	40 f9       	bld	r20, 0
    11d6:	65 e0       	ldi	r22, 0x05	; 5
    11d8:	81 e4       	ldi	r24, 0x41	; 65
    11da:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    11de:	c4 fb       	bst	r28, 4
    11e0:	44 27       	eor	r20, r20
    11e2:	40 f9       	bld	r20, 0
    11e4:	64 e0       	ldi	r22, 0x04	; 4
    11e6:	81 e4       	ldi	r24, 0x41	; 65
    11e8:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    11ec:	41 e0       	ldi	r20, 0x01	; 1
    11ee:	63 e0       	ldi	r22, 0x03	; 3
    11f0:	81 e4       	ldi	r24, 0x41	; 65
    11f2:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    11f6:	41 e0       	ldi	r20, 0x01	; 1
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	63 e0       	ldi	r22, 0x03	; 3
    1208:	81 e4       	ldi	r24, 0x41	; 65
    120a:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	70 e0       	ldi	r23, 0x00	; 0
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
    121c:	c3 fb       	bst	r28, 3
    121e:	44 27       	eor	r20, r20
    1220:	40 f9       	bld	r20, 0
    1222:	67 e0       	ldi	r22, 0x07	; 7
    1224:	81 e4       	ldi	r24, 0x41	; 65
    1226:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    122a:	c2 fb       	bst	r28, 2
    122c:	44 27       	eor	r20, r20
    122e:	40 f9       	bld	r20, 0
    1230:	66 e0       	ldi	r22, 0x06	; 6
    1232:	81 e4       	ldi	r24, 0x41	; 65
    1234:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    1238:	c1 fb       	bst	r28, 1
    123a:	44 27       	eor	r20, r20
    123c:	40 f9       	bld	r20, 0
    123e:	65 e0       	ldi	r22, 0x05	; 5
    1240:	81 e4       	ldi	r24, 0x41	; 65
    1242:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    1246:	4c 2f       	mov	r20, r28
    1248:	41 70       	andi	r20, 0x01	; 1
    124a:	64 e0       	ldi	r22, 0x04	; 4
    124c:	81 e4       	ldi	r24, 0x41	; 65
    124e:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    1252:	41 e0       	ldi	r20, 0x01	; 1
    1254:	63 e0       	ldi	r22, 0x03	; 3
    1256:	81 e4       	ldi	r24, 0x41	; 65
    1258:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    125c:	41 e0       	ldi	r20, 0x01	; 1
    125e:	50 e0       	ldi	r21, 0x00	; 0
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	63 e0       	ldi	r22, 0x03	; 3
    126e:	81 e4       	ldi	r24, 0x41	; 65
    1270:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    1274:	41 e0       	ldi	r20, 0x01	; 1
    1276:	50 e0       	ldi	r21, 0x00	; 0
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	82 e0       	ldi	r24, 0x02	; 2
    127e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
    1282:	cf 91       	pop	r28
    1284:	08 95       	ret

00001286 <LCD_Init>:
    1286:	42 e3       	ldi	r20, 0x32	; 50
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	82 e0       	ldi	r24, 0x02	; 2
    1290:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_WriteIns>
    129a:	88 e2       	ldi	r24, 0x28	; 40
    129c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_WriteIns>
    12a0:	8c e0       	ldi	r24, 0x0C	; 12
    12a2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_WriteIns>
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_WriteIns>
    12ac:	41 e0       	ldi	r20, 0x01	; 1
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
    12ba:	86 e0       	ldi	r24, 0x06	; 6
    12bc:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_WriteIns>
    12c0:	08 95       	ret

000012c2 <LCD_WriteChar>:
    12c2:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <LCD_WriteData>
    12c6:	08 95       	ret

000012c8 <LCD_WriteString>:
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	8c 01       	movw	r16, r24
    12d0:	c0 e0       	ldi	r28, 0x00	; 0
    12d2:	03 c0       	rjmp	.+6      	; 0x12da <LCD_WriteString+0x12>
    12d4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <LCD_WriteChar>
    12d8:	cf 5f       	subi	r28, 0xFF	; 255
    12da:	f8 01       	movw	r30, r16
    12dc:	ec 0f       	add	r30, r28
    12de:	f1 1d       	adc	r31, r1
    12e0:	80 81       	ld	r24, Z
    12e2:	81 11       	cpse	r24, r1
    12e4:	f7 cf       	rjmp	.-18     	; 0x12d4 <LCD_WriteString+0xc>
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	08 95       	ret

000012ee <LCD_SetCursor>:
    12ee:	81 11       	cpse	r24, r1
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <LCD_SetCursor+0xe>
    12f2:	86 2f       	mov	r24, r22
    12f4:	80 68       	ori	r24, 0x80	; 128
    12f6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_WriteIns>
    12fa:	08 95       	ret
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	21 f4       	brne	.+8      	; 0x1308 <LCD_SetCursor+0x1a>
    1300:	80 ec       	ldi	r24, 0xC0	; 192
    1302:	86 0f       	add	r24, r22
    1304:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_WriteIns>
    1308:	08 95       	ret

0000130a <LCD_Clear>:
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <LCD_WriteIns>
    1310:	41 e0       	ldi	r20, 0x01	; 1
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <TIMER_delay>
    131e:	08 95       	ret

00001320 <LCD_PinsInit>:
* \Return value:   : None
*******************************************************************************/
 void LCD_PinsInit ()
 {
	 //DIO_init(LCD_PORT,0,OUTPUT);
	 DIO_init(LCD_PORT,1,OUTPUT);
    1320:	41 e0       	ldi	r20, 0x01	; 1
    1322:	61 e0       	ldi	r22, 0x01	; 1
    1324:	81 e4       	ldi	r24, 0x41	; 65
    1326:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
	 DIO_init(LCD_PORT,2,OUTPUT);
    132a:	41 e0       	ldi	r20, 0x01	; 1
    132c:	62 e0       	ldi	r22, 0x02	; 2
    132e:	81 e4       	ldi	r24, 0x41	; 65
    1330:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
	 DIO_init(LCD_PORT,3,OUTPUT);
    1334:	41 e0       	ldi	r20, 0x01	; 1
    1336:	63 e0       	ldi	r22, 0x03	; 3
    1338:	81 e4       	ldi	r24, 0x41	; 65
    133a:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
	 DIO_init(LCD_PORT,4,OUTPUT);
    133e:	41 e0       	ldi	r20, 0x01	; 1
    1340:	64 e0       	ldi	r22, 0x04	; 4
    1342:	81 e4       	ldi	r24, 0x41	; 65
    1344:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
	 DIO_init(LCD_PORT,5,OUTPUT);
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	65 e0       	ldi	r22, 0x05	; 5
    134c:	81 e4       	ldi	r24, 0x41	; 65
    134e:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
	 DIO_init(LCD_PORT,6,OUTPUT);
    1352:	41 e0       	ldi	r20, 0x01	; 1
    1354:	66 e0       	ldi	r22, 0x06	; 6
    1356:	81 e4       	ldi	r24, 0x41	; 65
    1358:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
	 DIO_init(LCD_PORT,7,OUTPUT);
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	67 e0       	ldi	r22, 0x07	; 7
    1360:	81 e4       	ldi	r24, 0x41	; 65
    1362:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
    1366:	08 95       	ret

00001368 <main>:
    /* Replace with your application code */
	//SPI_initSlave();
	//APP_lcdTEST();
    //APP_buttonTest();
	//APP_spiSlaveTest();
	APP_init();
    1368:	0e 94 5e 00 	call	0xbc	; 0xbc <APP_init>
	APP_superLoop();
    136c:	0e 94 ab 00 	call	0x156	; 0x156 <APP_superLoop>
    1370:	ff cf       	rjmp	.-2      	; 0x1370 <main+0x8>

00001372 <DIO_init>:
	else
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;
}
    1372:	68 30       	cpi	r22, 0x08	; 8
    1374:	08 f0       	brcs	.+2      	; 0x1378 <DIO_init+0x6>
    1376:	80 c0       	rjmp	.+256    	; 0x1478 <DIO_init+0x106>
    1378:	44 23       	and	r20, r20
    137a:	21 f0       	breq	.+8      	; 0x1384 <DIO_init+0x12>
    137c:	41 30       	cpi	r20, 0x01	; 1
    137e:	09 f4       	brne	.+2      	; 0x1382 <DIO_init+0x10>
    1380:	40 c0       	rjmp	.+128    	; 0x1402 <DIO_init+0x90>
    1382:	7c c0       	rjmp	.+248    	; 0x147c <DIO_init+0x10a>
    1384:	82 34       	cpi	r24, 0x42	; 66
    1386:	b1 f0       	breq	.+44     	; 0x13b4 <DIO_init+0x42>
    1388:	18 f4       	brcc	.+6      	; 0x1390 <DIO_init+0x1e>
    138a:	81 34       	cpi	r24, 0x41	; 65
    138c:	31 f0       	breq	.+12     	; 0x139a <DIO_init+0x28>
    138e:	78 c0       	rjmp	.+240    	; 0x1480 <DIO_init+0x10e>
    1390:	83 34       	cpi	r24, 0x43	; 67
    1392:	e9 f0       	breq	.+58     	; 0x13ce <DIO_init+0x5c>
    1394:	84 34       	cpi	r24, 0x44	; 68
    1396:	41 f1       	breq	.+80     	; 0x13e8 <DIO_init+0x76>
    1398:	73 c0       	rjmp	.+230    	; 0x1480 <DIO_init+0x10e>
    139a:	2a b3       	in	r18, 0x1a	; 26
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_init+0x34>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	6a 95       	dec	r22
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_init+0x30>
    13aa:	80 95       	com	r24
    13ac:	82 23       	and	r24, r18
    13ae:	8a bb       	out	0x1a, r24	; 26
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	08 95       	ret
    13b4:	27 b3       	in	r18, 0x17	; 23
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <DIO_init+0x4e>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	6a 95       	dec	r22
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <DIO_init+0x4a>
    13c4:	80 95       	com	r24
    13c6:	82 23       	and	r24, r18
    13c8:	87 bb       	out	0x17, r24	; 23
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	08 95       	ret
    13ce:	24 b3       	in	r18, 0x14	; 20
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_init+0x68>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	6a 95       	dec	r22
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_init+0x64>
    13de:	80 95       	com	r24
    13e0:	82 23       	and	r24, r18
    13e2:	84 bb       	out	0x14, r24	; 20
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	08 95       	ret
    13e8:	21 b3       	in	r18, 0x11	; 17
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_init+0x82>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	6a 95       	dec	r22
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_init+0x7e>
    13f8:	80 95       	com	r24
    13fa:	82 23       	and	r24, r18
    13fc:	81 bb       	out	0x11, r24	; 17
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	08 95       	ret
    1402:	82 34       	cpi	r24, 0x42	; 66
    1404:	a9 f0       	breq	.+42     	; 0x1430 <DIO_init+0xbe>
    1406:	18 f4       	brcc	.+6      	; 0x140e <DIO_init+0x9c>
    1408:	81 34       	cpi	r24, 0x41	; 65
    140a:	31 f0       	breq	.+12     	; 0x1418 <DIO_init+0xa6>
    140c:	3b c0       	rjmp	.+118    	; 0x1484 <DIO_init+0x112>
    140e:	83 34       	cpi	r24, 0x43	; 67
    1410:	d9 f0       	breq	.+54     	; 0x1448 <DIO_init+0xd6>
    1412:	84 34       	cpi	r24, 0x44	; 68
    1414:	29 f1       	breq	.+74     	; 0x1460 <DIO_init+0xee>
    1416:	36 c0       	rjmp	.+108    	; 0x1484 <DIO_init+0x112>
    1418:	2a b3       	in	r18, 0x1a	; 26
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <DIO_init+0xb2>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	6a 95       	dec	r22
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <DIO_init+0xae>
    1428:	82 2b       	or	r24, r18
    142a:	8a bb       	out	0x1a, r24	; 26
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	08 95       	ret
    1430:	27 b3       	in	r18, 0x17	; 23
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_init+0xca>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	6a 95       	dec	r22
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_init+0xc6>
    1440:	82 2b       	or	r24, r18
    1442:	87 bb       	out	0x17, r24	; 23
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	08 95       	ret
    1448:	24 b3       	in	r18, 0x14	; 20
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_init+0xe2>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	6a 95       	dec	r22
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_init+0xde>
    1458:	82 2b       	or	r24, r18
    145a:	84 bb       	out	0x14, r24	; 20
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	08 95       	ret
    1460:	21 b3       	in	r18, 0x11	; 17
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_init+0xfa>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	6a 95       	dec	r22
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_init+0xf6>
    1470:	82 2b       	or	r24, r18
    1472:	81 bb       	out	0x11, r24	; 17
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	08 95       	ret
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	08 95       	ret
    147c:	84 e0       	ldi	r24, 0x04	; 4
    147e:	08 95       	ret
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	08 95       	ret
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	08 95       	ret

00001488 <DIO_write>:
    1488:	68 30       	cpi	r22, 0x08	; 8
    148a:	08 f0       	brcs	.+2      	; 0x148e <DIO_write+0x6>
    148c:	80 c0       	rjmp	.+256    	; 0x158e <DIO_write+0x106>
    148e:	44 23       	and	r20, r20
    1490:	21 f0       	breq	.+8      	; 0x149a <DIO_write+0x12>
    1492:	41 30       	cpi	r20, 0x01	; 1
    1494:	09 f4       	brne	.+2      	; 0x1498 <DIO_write+0x10>
    1496:	40 c0       	rjmp	.+128    	; 0x1518 <DIO_write+0x90>
    1498:	7c c0       	rjmp	.+248    	; 0x1592 <DIO_write+0x10a>
    149a:	82 34       	cpi	r24, 0x42	; 66
    149c:	b1 f0       	breq	.+44     	; 0x14ca <DIO_write+0x42>
    149e:	18 f4       	brcc	.+6      	; 0x14a6 <DIO_write+0x1e>
    14a0:	81 34       	cpi	r24, 0x41	; 65
    14a2:	31 f0       	breq	.+12     	; 0x14b0 <DIO_write+0x28>
    14a4:	78 c0       	rjmp	.+240    	; 0x1596 <DIO_write+0x10e>
    14a6:	83 34       	cpi	r24, 0x43	; 67
    14a8:	e9 f0       	breq	.+58     	; 0x14e4 <DIO_write+0x5c>
    14aa:	84 34       	cpi	r24, 0x44	; 68
    14ac:	41 f1       	breq	.+80     	; 0x14fe <DIO_write+0x76>
    14ae:	73 c0       	rjmp	.+230    	; 0x1596 <DIO_write+0x10e>
    14b0:	2b b3       	in	r18, 0x1b	; 27
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO_write+0x34>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	6a 95       	dec	r22
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <DIO_write+0x30>
    14c0:	80 95       	com	r24
    14c2:	82 23       	and	r24, r18
    14c4:	8b bb       	out	0x1b, r24	; 27
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	08 95       	ret
    14ca:	28 b3       	in	r18, 0x18	; 24
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <DIO_write+0x4e>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	6a 95       	dec	r22
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <DIO_write+0x4a>
    14da:	80 95       	com	r24
    14dc:	82 23       	and	r24, r18
    14de:	88 bb       	out	0x18, r24	; 24
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	08 95       	ret
    14e4:	25 b3       	in	r18, 0x15	; 21
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_write+0x68>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	6a 95       	dec	r22
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_write+0x64>
    14f4:	80 95       	com	r24
    14f6:	82 23       	and	r24, r18
    14f8:	85 bb       	out	0x15, r24	; 21
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	08 95       	ret
    14fe:	22 b3       	in	r18, 0x12	; 18
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 c0       	rjmp	.+4      	; 0x150a <DIO_write+0x82>
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	6a 95       	dec	r22
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <DIO_write+0x7e>
    150e:	80 95       	com	r24
    1510:	82 23       	and	r24, r18
    1512:	82 bb       	out	0x12, r24	; 18
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	08 95       	ret
    1518:	82 34       	cpi	r24, 0x42	; 66
    151a:	a9 f0       	breq	.+42     	; 0x1546 <DIO_write+0xbe>
    151c:	18 f4       	brcc	.+6      	; 0x1524 <DIO_write+0x9c>
    151e:	81 34       	cpi	r24, 0x41	; 65
    1520:	31 f0       	breq	.+12     	; 0x152e <DIO_write+0xa6>
    1522:	3b c0       	rjmp	.+118    	; 0x159a <DIO_write+0x112>
    1524:	83 34       	cpi	r24, 0x43	; 67
    1526:	d9 f0       	breq	.+54     	; 0x155e <DIO_write+0xd6>
    1528:	84 34       	cpi	r24, 0x44	; 68
    152a:	29 f1       	breq	.+74     	; 0x1576 <DIO_write+0xee>
    152c:	36 c0       	rjmp	.+108    	; 0x159a <DIO_write+0x112>
    152e:	2b b3       	in	r18, 0x1b	; 27
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_write+0xb2>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	6a 95       	dec	r22
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_write+0xae>
    153e:	82 2b       	or	r24, r18
    1540:	8b bb       	out	0x1b, r24	; 27
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	08 95       	ret
    1546:	28 b3       	in	r18, 0x18	; 24
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <DIO_write+0xca>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	6a 95       	dec	r22
    1554:	e2 f7       	brpl	.-8      	; 0x154e <DIO_write+0xc6>
    1556:	82 2b       	or	r24, r18
    1558:	88 bb       	out	0x18, r24	; 24
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	08 95       	ret
    155e:	25 b3       	in	r18, 0x15	; 21
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DIO_write+0xe2>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	6a 95       	dec	r22
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <DIO_write+0xde>
    156e:	82 2b       	or	r24, r18
    1570:	85 bb       	out	0x15, r24	; 21
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	08 95       	ret
    1576:	22 b3       	in	r18, 0x12	; 18
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <DIO_write+0xfa>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	6a 95       	dec	r22
    1584:	e2 f7       	brpl	.-8      	; 0x157e <DIO_write+0xf6>
    1586:	82 2b       	or	r24, r18
    1588:	82 bb       	out	0x12, r24	; 18
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	08 95       	ret
    158e:	82 e0       	ldi	r24, 0x02	; 2
    1590:	08 95       	ret
    1592:	83 e0       	ldi	r24, 0x03	; 3
    1594:	08 95       	ret
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	08 95       	ret
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	08 95       	ret

0000159e <DIO_read>:
*										WRONG_PORT_NUMBER
*******************************************************************************/
en_dioError_t DIO_read(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 *u8_a_value)		// Read dio
{
	en_dioError_t error = DIO_OK;
	if (u8_a_pinNumber < 8)
    159e:	68 30       	cpi	r22, 0x08	; 8
    15a0:	d8 f5       	brcc	.+118    	; 0x1618 <DIO_read+0x7a>
	{

		switch(u8_a_portNumber)
    15a2:	82 34       	cpi	r24, 0x42	; 66
    15a4:	a9 f0       	breq	.+42     	; 0x15d0 <DIO_read+0x32>
    15a6:	18 f4       	brcc	.+6      	; 0x15ae <DIO_read+0x10>
    15a8:	81 34       	cpi	r24, 0x41	; 65
    15aa:	31 f0       	breq	.+12     	; 0x15b8 <DIO_read+0x1a>
    15ac:	37 c0       	rjmp	.+110    	; 0x161c <DIO_read+0x7e>
    15ae:	83 34       	cpi	r24, 0x43	; 67
    15b0:	d9 f0       	breq	.+54     	; 0x15e8 <DIO_read+0x4a>
    15b2:	84 34       	cpi	r24, 0x44	; 68
    15b4:	29 f1       	breq	.+74     	; 0x1600 <DIO_read+0x62>
    15b6:	32 c0       	rjmp	.+100    	; 0x161c <DIO_read+0x7e>
		{
			case PORT_A:	*u8_a_value = GET_BIT(PINA,u8_a_pinNumber);		break;
    15b8:	89 b3       	in	r24, 0x19	; 25
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <DIO_read+0x24>
    15be:	95 95       	asr	r25
    15c0:	87 95       	ror	r24
    15c2:	6a 95       	dec	r22
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <DIO_read+0x20>
    15c6:	81 70       	andi	r24, 0x01	; 1
    15c8:	fa 01       	movw	r30, r20
    15ca:	80 83       	st	Z, r24
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
en_dioError_t DIO_read(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 *u8_a_value)		// Read dio
{
	en_dioError_t error = DIO_OK;
    15cc:	80 e0       	ldi	r24, 0x00	; 0
	if (u8_a_pinNumber < 8)
	{

		switch(u8_a_portNumber)
		{
			case PORT_A:	*u8_a_value = GET_BIT(PINA,u8_a_pinNumber);		break;
    15ce:	08 95       	ret
			case PORT_B:	*u8_a_value = GET_BIT(PINB,u8_a_pinNumber);		break;
    15d0:	86 b3       	in	r24, 0x16	; 22
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_read+0x3c>
    15d6:	95 95       	asr	r25
    15d8:	87 95       	ror	r24
    15da:	6a 95       	dec	r22
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <DIO_read+0x38>
    15de:	81 70       	andi	r24, 0x01	; 1
    15e0:	fa 01       	movw	r30, r20
    15e2:	80 83       	st	Z, r24
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
en_dioError_t DIO_read(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 *u8_a_value)		// Read dio
{
	en_dioError_t error = DIO_OK;
    15e4:	80 e0       	ldi	r24, 0x00	; 0
	{

		switch(u8_a_portNumber)
		{
			case PORT_A:	*u8_a_value = GET_BIT(PINA,u8_a_pinNumber);		break;
			case PORT_B:	*u8_a_value = GET_BIT(PINB,u8_a_pinNumber);		break;
    15e6:	08 95       	ret
			case PORT_C:	*u8_a_value = GET_BIT(PINC,u8_a_pinNumber);		break;
    15e8:	83 b3       	in	r24, 0x13	; 19
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <DIO_read+0x54>
    15ee:	95 95       	asr	r25
    15f0:	87 95       	ror	r24
    15f2:	6a 95       	dec	r22
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <DIO_read+0x50>
    15f6:	81 70       	andi	r24, 0x01	; 1
    15f8:	fa 01       	movw	r30, r20
    15fa:	80 83       	st	Z, r24
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
en_dioError_t DIO_read(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 *u8_a_value)		// Read dio
{
	en_dioError_t error = DIO_OK;
    15fc:	80 e0       	ldi	r24, 0x00	; 0

		switch(u8_a_portNumber)
		{
			case PORT_A:	*u8_a_value = GET_BIT(PINA,u8_a_pinNumber);		break;
			case PORT_B:	*u8_a_value = GET_BIT(PINB,u8_a_pinNumber);		break;
			case PORT_C:	*u8_a_value = GET_BIT(PINC,u8_a_pinNumber);		break;
    15fe:	08 95       	ret
			case PORT_D:	*u8_a_value = GET_BIT(PIND,u8_a_pinNumber);		break;
    1600:	80 b3       	in	r24, 0x10	; 16
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 c0       	rjmp	.+4      	; 0x160a <DIO_read+0x6c>
    1606:	95 95       	asr	r25
    1608:	87 95       	ror	r24
    160a:	6a 95       	dec	r22
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <DIO_read+0x68>
    160e:	81 70       	andi	r24, 0x01	; 1
    1610:	fa 01       	movw	r30, r20
    1612:	80 83       	st	Z, r24
*										WRONG_PIN_NUMBER
*										WRONG_PORT_NUMBER
*******************************************************************************/
en_dioError_t DIO_read(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 *u8_a_value)		// Read dio
{
	en_dioError_t error = DIO_OK;
    1614:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_portNumber)
		{
			case PORT_A:	*u8_a_value = GET_BIT(PINA,u8_a_pinNumber);		break;
			case PORT_B:	*u8_a_value = GET_BIT(PINB,u8_a_pinNumber);		break;
			case PORT_C:	*u8_a_value = GET_BIT(PINC,u8_a_pinNumber);		break;
			case PORT_D:	*u8_a_value = GET_BIT(PIND,u8_a_pinNumber);		break;
    1616:	08 95       	ret
			default:		error = WRONG_PORT_NUMBER;				break;
		}
	}
	else
	{
		error = WRONG_PIN_NUMBER;
    1618:	82 e0       	ldi	r24, 0x02	; 2
    161a:	08 95       	ret
		{
			case PORT_A:	*u8_a_value = GET_BIT(PINA,u8_a_pinNumber);		break;
			case PORT_B:	*u8_a_value = GET_BIT(PINB,u8_a_pinNumber);		break;
			case PORT_C:	*u8_a_value = GET_BIT(PINC,u8_a_pinNumber);		break;
			case PORT_D:	*u8_a_value = GET_BIT(PIND,u8_a_pinNumber);		break;
			default:		error = WRONG_PORT_NUMBER;				break;
    161c:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;
}
    161e:	08 95       	ret

00001620 <DIO_pinPullUp>:
*										WRONG_VALUE
*******************************************************************************/
en_dioError_t DIO_pinPullUp(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 pullUpState)
{
	en_dioError_t error = DIO_OK;
	if (u8_a_pinNumber < 8)
    1620:	68 30       	cpi	r22, 0x08	; 8
    1622:	08 f0       	brcs	.+2      	; 0x1626 <DIO_pinPullUp+0x6>
    1624:	80 c0       	rjmp	.+256    	; 0x1726 <DIO_pinPullUp+0x106>
	{
		switch(pullUpState)
    1626:	44 23       	and	r20, r20
    1628:	21 f0       	breq	.+8      	; 0x1632 <DIO_pinPullUp+0x12>
    162a:	41 30       	cpi	r20, 0x01	; 1
    162c:	09 f4       	brne	.+2      	; 0x1630 <DIO_pinPullUp+0x10>
    162e:	40 c0       	rjmp	.+128    	; 0x16b0 <DIO_pinPullUp+0x90>
    1630:	7c c0       	rjmp	.+248    	; 0x172a <DIO_pinPullUp+0x10a>
		{
			case PULLUP_DISABLE:
			switch(u8_a_portNumber)
    1632:	82 34       	cpi	r24, 0x42	; 66
    1634:	b1 f0       	breq	.+44     	; 0x1662 <DIO_pinPullUp+0x42>
    1636:	18 f4       	brcc	.+6      	; 0x163e <DIO_pinPullUp+0x1e>
    1638:	81 34       	cpi	r24, 0x41	; 65
    163a:	31 f0       	breq	.+12     	; 0x1648 <DIO_pinPullUp+0x28>
    163c:	78 c0       	rjmp	.+240    	; 0x172e <DIO_pinPullUp+0x10e>
    163e:	83 34       	cpi	r24, 0x43	; 67
    1640:	e9 f0       	breq	.+58     	; 0x167c <DIO_pinPullUp+0x5c>
    1642:	84 34       	cpi	r24, 0x44	; 68
    1644:	41 f1       	breq	.+80     	; 0x1696 <DIO_pinPullUp+0x76>
    1646:	73 c0       	rjmp	.+230    	; 0x172e <DIO_pinPullUp+0x10e>
			{
				case PORT_A:	CLR_BIT(PORTA, u8_a_pinNumber);		break;
    1648:	2b b3       	in	r18, 0x1b	; 27
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <DIO_pinPullUp+0x34>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	6a 95       	dec	r22
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <DIO_pinPullUp+0x30>
    1658:	80 95       	com	r24
    165a:	82 23       	and	r24, r18
    165c:	8b bb       	out	0x1b, r24	; 27
*										WRONG_PORT_NUMBER
*										WRONG_VALUE
*******************************************************************************/
en_dioError_t DIO_pinPullUp(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 pullUpState)
{
	en_dioError_t error = DIO_OK;
    165e:	80 e0       	ldi	r24, 0x00	; 0
		switch(pullUpState)
		{
			case PULLUP_DISABLE:
			switch(u8_a_portNumber)
			{
				case PORT_A:	CLR_BIT(PORTA, u8_a_pinNumber);		break;
    1660:	08 95       	ret
				case PORT_B:	CLR_BIT(PORTB, u8_a_pinNumber);		break;
    1662:	28 b3       	in	r18, 0x18	; 24
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 c0       	rjmp	.+4      	; 0x166e <DIO_pinPullUp+0x4e>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	6a 95       	dec	r22
    1670:	e2 f7       	brpl	.-8      	; 0x166a <DIO_pinPullUp+0x4a>
    1672:	80 95       	com	r24
    1674:	82 23       	and	r24, r18
    1676:	88 bb       	out	0x18, r24	; 24
*										WRONG_PORT_NUMBER
*										WRONG_VALUE
*******************************************************************************/
en_dioError_t DIO_pinPullUp(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 pullUpState)
{
	en_dioError_t error = DIO_OK;
    1678:	80 e0       	ldi	r24, 0x00	; 0
		{
			case PULLUP_DISABLE:
			switch(u8_a_portNumber)
			{
				case PORT_A:	CLR_BIT(PORTA, u8_a_pinNumber);		break;
				case PORT_B:	CLR_BIT(PORTB, u8_a_pinNumber);		break;
    167a:	08 95       	ret
				case PORT_C:	CLR_BIT(PORTC, u8_a_pinNumber);		break;
    167c:	25 b3       	in	r18, 0x15	; 21
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DIO_pinPullUp+0x68>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	6a 95       	dec	r22
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <DIO_pinPullUp+0x64>
    168c:	80 95       	com	r24
    168e:	82 23       	and	r24, r18
    1690:	85 bb       	out	0x15, r24	; 21
*										WRONG_PORT_NUMBER
*										WRONG_VALUE
*******************************************************************************/
en_dioError_t DIO_pinPullUp(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 pullUpState)
{
	en_dioError_t error = DIO_OK;
    1692:	80 e0       	ldi	r24, 0x00	; 0
			case PULLUP_DISABLE:
			switch(u8_a_portNumber)
			{
				case PORT_A:	CLR_BIT(PORTA, u8_a_pinNumber);		break;
				case PORT_B:	CLR_BIT(PORTB, u8_a_pinNumber);		break;
				case PORT_C:	CLR_BIT(PORTC, u8_a_pinNumber);		break;
    1694:	08 95       	ret
				case PORT_D:	CLR_BIT(PORTD, u8_a_pinNumber);		break;
    1696:	22 b3       	in	r18, 0x12	; 18
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <DIO_pinPullUp+0x82>
    169e:	88 0f       	add	r24, r24
    16a0:	99 1f       	adc	r25, r25
    16a2:	6a 95       	dec	r22
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <DIO_pinPullUp+0x7e>
    16a6:	80 95       	com	r24
    16a8:	82 23       	and	r24, r18
    16aa:	82 bb       	out	0x12, r24	; 18
*										WRONG_PORT_NUMBER
*										WRONG_VALUE
*******************************************************************************/
en_dioError_t DIO_pinPullUp(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 pullUpState)
{
	en_dioError_t error = DIO_OK;
    16ac:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	CLR_BIT(PORTA, u8_a_pinNumber);		break;
				case PORT_B:	CLR_BIT(PORTB, u8_a_pinNumber);		break;
				case PORT_C:	CLR_BIT(PORTC, u8_a_pinNumber);		break;
				case PORT_D:	CLR_BIT(PORTD, u8_a_pinNumber);		break;
    16ae:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;			break;
			}
			break;
			
			case PULLUP_ENABLE:
			switch(u8_a_portNumber)
    16b0:	82 34       	cpi	r24, 0x42	; 66
    16b2:	a9 f0       	breq	.+42     	; 0x16de <DIO_pinPullUp+0xbe>
    16b4:	18 f4       	brcc	.+6      	; 0x16bc <DIO_pinPullUp+0x9c>
    16b6:	81 34       	cpi	r24, 0x41	; 65
    16b8:	31 f0       	breq	.+12     	; 0x16c6 <DIO_pinPullUp+0xa6>
    16ba:	3b c0       	rjmp	.+118    	; 0x1732 <DIO_pinPullUp+0x112>
    16bc:	83 34       	cpi	r24, 0x43	; 67
    16be:	d9 f0       	breq	.+54     	; 0x16f6 <DIO_pinPullUp+0xd6>
    16c0:	84 34       	cpi	r24, 0x44	; 68
    16c2:	29 f1       	breq	.+74     	; 0x170e <DIO_pinPullUp+0xee>
    16c4:	36 c0       	rjmp	.+108    	; 0x1732 <DIO_pinPullUp+0x112>
			{
				case PORT_A:	SET_BIT(PORTA, u8_a_pinNumber);		break;
    16c6:	2b b3       	in	r18, 0x1b	; 27
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <DIO_pinPullUp+0xb2>
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	6a 95       	dec	r22
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <DIO_pinPullUp+0xae>
    16d6:	82 2b       	or	r24, r18
    16d8:	8b bb       	out	0x1b, r24	; 27
*										WRONG_PORT_NUMBER
*										WRONG_VALUE
*******************************************************************************/
en_dioError_t DIO_pinPullUp(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 pullUpState)
{
	en_dioError_t error = DIO_OK;
    16da:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case PULLUP_ENABLE:
			switch(u8_a_portNumber)
			{
				case PORT_A:	SET_BIT(PORTA, u8_a_pinNumber);		break;
    16dc:	08 95       	ret
				case PORT_B:	SET_BIT(PORTB, u8_a_pinNumber);		break;
    16de:	28 b3       	in	r18, 0x18	; 24
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <DIO_pinPullUp+0xca>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	6a 95       	dec	r22
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <DIO_pinPullUp+0xc6>
    16ee:	82 2b       	or	r24, r18
    16f0:	88 bb       	out	0x18, r24	; 24
*										WRONG_PORT_NUMBER
*										WRONG_VALUE
*******************************************************************************/
en_dioError_t DIO_pinPullUp(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 pullUpState)
{
	en_dioError_t error = DIO_OK;
    16f2:	80 e0       	ldi	r24, 0x00	; 0
			
			case PULLUP_ENABLE:
			switch(u8_a_portNumber)
			{
				case PORT_A:	SET_BIT(PORTA, u8_a_pinNumber);		break;
				case PORT_B:	SET_BIT(PORTB, u8_a_pinNumber);		break;
    16f4:	08 95       	ret
				case PORT_C:	SET_BIT(PORTC, u8_a_pinNumber);		break;
    16f6:	25 b3       	in	r18, 0x15	; 21
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <DIO_pinPullUp+0xe2>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	6a 95       	dec	r22
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <DIO_pinPullUp+0xde>
    1706:	82 2b       	or	r24, r18
    1708:	85 bb       	out	0x15, r24	; 21
*										WRONG_PORT_NUMBER
*										WRONG_VALUE
*******************************************************************************/
en_dioError_t DIO_pinPullUp(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 pullUpState)
{
	en_dioError_t error = DIO_OK;
    170a:	80 e0       	ldi	r24, 0x00	; 0
			case PULLUP_ENABLE:
			switch(u8_a_portNumber)
			{
				case PORT_A:	SET_BIT(PORTA, u8_a_pinNumber);		break;
				case PORT_B:	SET_BIT(PORTB, u8_a_pinNumber);		break;
				case PORT_C:	SET_BIT(PORTC, u8_a_pinNumber);		break;
    170c:	08 95       	ret
				case PORT_D:	SET_BIT(PORTD, u8_a_pinNumber);		break;
    170e:	22 b3       	in	r18, 0x12	; 18
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 c0       	rjmp	.+4      	; 0x171a <DIO_pinPullUp+0xfa>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	6a 95       	dec	r22
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <DIO_pinPullUp+0xf6>
    171e:	82 2b       	or	r24, r18
    1720:	82 bb       	out	0x12, r24	; 18
*										WRONG_PORT_NUMBER
*										WRONG_VALUE
*******************************************************************************/
en_dioError_t DIO_pinPullUp(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 pullUpState)
{
	en_dioError_t error = DIO_OK;
    1722:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	SET_BIT(PORTA, u8_a_pinNumber);		break;
				case PORT_B:	SET_BIT(PORTB, u8_a_pinNumber);		break;
				case PORT_C:	SET_BIT(PORTC, u8_a_pinNumber);		break;
				case PORT_D:	SET_BIT(PORTD, u8_a_pinNumber);		break;
    1724:	08 95       	ret
			break;
		}
	}
	else
	{
		error = WRONG_PIN_NUMBER;
    1726:	82 e0       	ldi	r24, 0x02	; 2
    1728:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;		break;
			}
			break;
			
			default:
			error = WRONG_VALUE;
    172a:	83 e0       	ldi	r24, 0x03	; 3
    172c:	08 95       	ret
			{
				case PORT_A:	CLR_BIT(PORTA, u8_a_pinNumber);		break;
				case PORT_B:	CLR_BIT(PORTB, u8_a_pinNumber);		break;
				case PORT_C:	CLR_BIT(PORTC, u8_a_pinNumber);		break;
				case PORT_D:	CLR_BIT(PORTD, u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;			break;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	08 95       	ret
			{
				case PORT_A:	SET_BIT(PORTA, u8_a_pinNumber);		break;
				case PORT_B:	SET_BIT(PORTB, u8_a_pinNumber);		break;
				case PORT_C:	SET_BIT(PORTC, u8_a_pinNumber);		break;
				case PORT_D:	SET_BIT(PORTD, u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;		break;
    1732:	81 e0       	ldi	r24, 0x01	; 1
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;

    1734:	08 95       	ret

00001736 <EXTINT_init>:

en_extintError_t EXTINT_init (u8 u8_a_intNumber)
{
	en_extintError_t en_a_error =EXTINT_OK;
	/* Step 1	->		Choose Sense Control */
	switch(u8_a_intNumber)
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	61 f0       	breq	.+24     	; 0x1752 <EXTINT_init+0x1c>
    173a:	18 f0       	brcs	.+6      	; 0x1742 <EXTINT_init+0xc>
    173c:	82 30       	cpi	r24, 0x02	; 2
    173e:	89 f0       	breq	.+34     	; 0x1762 <EXTINT_init+0x2c>
    1740:	15 c0       	rjmp	.+42     	; 0x176c <EXTINT_init+0x36>
		CLR_BIT(MCUCR,ISC01);
		#elif		SENSE_CONTROL_0		==		FALLING_EDGE
		CLR_BIT(MCUCR,ISC00);
		SET_BIT(MCUCR,ISC01);
		#elif		SENSE_CONTROL_0		==		RISING_EDGE
		SET_BIT(MCUCR,ISC00);
    1742:	95 b7       	in	r25, 0x35	; 53
    1744:	91 60       	ori	r25, 0x01	; 1
    1746:	95 bf       	out	0x35, r25	; 53
		SET_BIT(MCUCR,ISC01);
    1748:	95 b7       	in	r25, 0x35	; 53
    174a:	92 60       	ori	r25, 0x02	; 2
    174c:	95 bf       	out	0x35, r25	; 53
void (*EXTINT_1_callBack) (void) = nullPtr;
void (*EXTINT_2_callBack) (void) = nullPtr;

en_extintError_t EXTINT_init (u8 u8_a_intNumber)
{
	en_extintError_t en_a_error =EXTINT_OK;
    174e:	20 e0       	ldi	r18, 0x00	; 0
		SET_BIT(MCUCR,ISC01);
		#elif		SENSE_CONTROL_0		==		RISING_EDGE
		SET_BIT(MCUCR,ISC00);
		SET_BIT(MCUCR,ISC01);
		#endif
		break;
    1750:	0e c0       	rjmp	.+28     	; 0x176e <EXTINT_init+0x38>
		CLR_BIT(MCUCR,ISC11);
		#elif		SENSE_CONTROL_1		==		FALLING_EDGE
		CLR_BIT(MCUCR,ISC10);
		SET_BIT(MCUCR,ISC11);
		#elif		SENSE_CONTROL_1		==		RISING_EDGE
		SET_BIT(MCUCR,ISC10);
    1752:	95 b7       	in	r25, 0x35	; 53
    1754:	94 60       	ori	r25, 0x04	; 4
    1756:	95 bf       	out	0x35, r25	; 53
		SET_BIT(MCUCR,ISC11);
    1758:	95 b7       	in	r25, 0x35	; 53
    175a:	98 60       	ori	r25, 0x08	; 8
    175c:	95 bf       	out	0x35, r25	; 53
void (*EXTINT_1_callBack) (void) = nullPtr;
void (*EXTINT_2_callBack) (void) = nullPtr;

en_extintError_t EXTINT_init (u8 u8_a_intNumber)
{
	en_extintError_t en_a_error =EXTINT_OK;
    175e:	20 e0       	ldi	r18, 0x00	; 0
		SET_BIT(MCUCR,ISC11);
		#elif		SENSE_CONTROL_1		==		RISING_EDGE
		SET_BIT(MCUCR,ISC10);
		SET_BIT(MCUCR,ISC11);
		#endif
		break;
    1760:	06 c0       	rjmp	.+12     	; 0x176e <EXTINT_init+0x38>
		
		case INT_2:
		#if			SENSE_CONTROL_2		==		FALLING_EDGE
		CLR_BIT(MCUCR,ISC2);
		#elif		SENSE_CONTROL_2		==		RISING_EDGE
		SET_BIT(MCUCSR,ISC2);
    1762:	94 b7       	in	r25, 0x34	; 52
    1764:	90 64       	ori	r25, 0x40	; 64
    1766:	94 bf       	out	0x34, r25	; 52
void (*EXTINT_1_callBack) (void) = nullPtr;
void (*EXTINT_2_callBack) (void) = nullPtr;

en_extintError_t EXTINT_init (u8 u8_a_intNumber)
{
	en_extintError_t en_a_error =EXTINT_OK;
    1768:	20 e0       	ldi	r18, 0x00	; 0
		#if			SENSE_CONTROL_2		==		FALLING_EDGE
		CLR_BIT(MCUCR,ISC2);
		#elif		SENSE_CONTROL_2		==		RISING_EDGE
		SET_BIT(MCUCSR,ISC2);
		#endif
		break;
    176a:	01 c0       	rjmp	.+2      	; 0x176e <EXTINT_init+0x38>
		
		default: en_a_error = WRONG_INT_NUMBER;
    176c:	21 e0       	ldi	r18, 0x01	; 1
		break;
	}
	/* Step 2	->		Enable Peripheral Interrupt */
	switch(u8_a_intNumber)
    176e:	81 30       	cpi	r24, 0x01	; 1
    1770:	41 f0       	breq	.+16     	; 0x1782 <EXTINT_init+0x4c>
    1772:	18 f0       	brcs	.+6      	; 0x177a <EXTINT_init+0x44>
    1774:	82 30       	cpi	r24, 0x02	; 2
    1776:	49 f0       	breq	.+18     	; 0x178a <EXTINT_init+0x54>
    1778:	0c c0       	rjmp	.+24     	; 0x1792 <EXTINT_init+0x5c>
	{
		case INT_0:	SET_BIT(GICR,INT0);		break;
    177a:	8b b7       	in	r24, 0x3b	; 59
    177c:	80 64       	ori	r24, 0x40	; 64
    177e:	8b bf       	out	0x3b, r24	; 59
    1780:	09 c0       	rjmp	.+18     	; 0x1794 <EXTINT_init+0x5e>
		case INT_1:	SET_BIT(GICR,INT1);		break;
    1782:	8b b7       	in	r24, 0x3b	; 59
    1784:	80 68       	ori	r24, 0x80	; 128
    1786:	8b bf       	out	0x3b, r24	; 59
    1788:	05 c0       	rjmp	.+10     	; 0x1794 <EXTINT_init+0x5e>
		case INT_2:	SET_BIT(GICR,INT2);		break;
    178a:	8b b7       	in	r24, 0x3b	; 59
    178c:	80 62       	ori	r24, 0x20	; 32
    178e:	8b bf       	out	0x3b, r24	; 59
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <EXTINT_init+0x5e>
		default: en_a_error = WRONG_INT_NUMBER;	break;
    1792:	21 e0       	ldi	r18, 0x01	; 1
	}
	
	
	/* Step 3	->		Enable Global Interrupt */
	SET_BIT(SREG,Ibit);
    1794:	9f b7       	in	r25, 0x3f	; 63
    1796:	90 68       	ori	r25, 0x80	; 128
    1798:	9f bf       	out	0x3f, r25	; 63
	
	return en_a_error;
}
    179a:	82 2f       	mov	r24, r18
    179c:	08 95       	ret

0000179e <EXTINT_setCallBackInt>:


void EXTINT_setCallBackInt (u8 u8_a_intNumber, void (*funPtr) (void))
{
	if (funPtr != nullPtr)
    179e:	61 15       	cp	r22, r1
    17a0:	71 05       	cpc	r23, r1
    17a2:	a1 f0       	breq	.+40     	; 0x17cc <EXTINT_setCallBackInt+0x2e>
	{
		
		if (u8_a_intNumber == INT_0)
    17a4:	81 11       	cpse	r24, r1
    17a6:	05 c0       	rjmp	.+10     	; 0x17b2 <EXTINT_setCallBackInt+0x14>
		{
			EXTINT_0_callBack = funPtr;
    17a8:	70 93 38 02 	sts	0x0238, r23	; 0x800238 <EXTINT_0_callBack+0x1>
    17ac:	60 93 37 02 	sts	0x0237, r22	; 0x800237 <EXTINT_0_callBack>
    17b0:	08 95       	ret
		}
		else if (u8_a_intNumber == INT_1)
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	29 f4       	brne	.+10     	; 0x17c0 <EXTINT_setCallBackInt+0x22>
		{
			EXTINT_1_callBack = funPtr;
    17b6:	70 93 36 02 	sts	0x0236, r23	; 0x800236 <EXTINT_1_callBack+0x1>
    17ba:	60 93 35 02 	sts	0x0235, r22	; 0x800235 <EXTINT_1_callBack>
    17be:	08 95       	ret
		}
		else if (u8_a_intNumber == INT_2)
    17c0:	82 30       	cpi	r24, 0x02	; 2
    17c2:	21 f4       	brne	.+8      	; 0x17cc <EXTINT_setCallBackInt+0x2e>
		{
			EXTINT_2_callBack = funPtr;
    17c4:	70 93 34 02 	sts	0x0234, r23	; 0x800234 <EXTINT_2_callBack+0x1>
    17c8:	60 93 33 02 	sts	0x0233, r22	; 0x800233 <EXTINT_2_callBack>
    17cc:	08 95       	ret

000017ce <__vector_1>:
	}
}


ISR(EXT_INT_0)
{
    17ce:	1f 92       	push	r1
    17d0:	0f 92       	push	r0
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	0f 92       	push	r0
    17d6:	11 24       	eor	r1, r1
    17d8:	2f 93       	push	r18
    17da:	3f 93       	push	r19
    17dc:	4f 93       	push	r20
    17de:	5f 93       	push	r21
    17e0:	6f 93       	push	r22
    17e2:	7f 93       	push	r23
    17e4:	8f 93       	push	r24
    17e6:	9f 93       	push	r25
    17e8:	af 93       	push	r26
    17ea:	bf 93       	push	r27
    17ec:	ef 93       	push	r30
    17ee:	ff 93       	push	r31
	if (EXTINT_0_callBack != nullPtr)
    17f0:	e0 91 37 02 	lds	r30, 0x0237	; 0x800237 <EXTINT_0_callBack>
    17f4:	f0 91 38 02 	lds	r31, 0x0238	; 0x800238 <EXTINT_0_callBack+0x1>
    17f8:	30 97       	sbiw	r30, 0x00	; 0
    17fa:	09 f0       	breq	.+2      	; 0x17fe <__vector_1+0x30>
	{
		EXTINT_0_callBack();
    17fc:	09 95       	icall
	}
}
    17fe:	ff 91       	pop	r31
    1800:	ef 91       	pop	r30
    1802:	bf 91       	pop	r27
    1804:	af 91       	pop	r26
    1806:	9f 91       	pop	r25
    1808:	8f 91       	pop	r24
    180a:	7f 91       	pop	r23
    180c:	6f 91       	pop	r22
    180e:	5f 91       	pop	r21
    1810:	4f 91       	pop	r20
    1812:	3f 91       	pop	r19
    1814:	2f 91       	pop	r18
    1816:	0f 90       	pop	r0
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	0f 90       	pop	r0
    181c:	1f 90       	pop	r1
    181e:	18 95       	reti

00001820 <__vector_2>:

ISR(EXT_INT_1)
{
    1820:	1f 92       	push	r1
    1822:	0f 92       	push	r0
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	0f 92       	push	r0
    1828:	11 24       	eor	r1, r1
    182a:	2f 93       	push	r18
    182c:	3f 93       	push	r19
    182e:	4f 93       	push	r20
    1830:	5f 93       	push	r21
    1832:	6f 93       	push	r22
    1834:	7f 93       	push	r23
    1836:	8f 93       	push	r24
    1838:	9f 93       	push	r25
    183a:	af 93       	push	r26
    183c:	bf 93       	push	r27
    183e:	ef 93       	push	r30
    1840:	ff 93       	push	r31
	if (EXTINT_1_callBack != nullPtr)
    1842:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <EXTINT_1_callBack>
    1846:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <EXTINT_1_callBack+0x1>
    184a:	30 97       	sbiw	r30, 0x00	; 0
    184c:	09 f0       	breq	.+2      	; 0x1850 <__vector_2+0x30>
	{
		EXTINT_1_callBack();
    184e:	09 95       	icall
	}
}
    1850:	ff 91       	pop	r31
    1852:	ef 91       	pop	r30
    1854:	bf 91       	pop	r27
    1856:	af 91       	pop	r26
    1858:	9f 91       	pop	r25
    185a:	8f 91       	pop	r24
    185c:	7f 91       	pop	r23
    185e:	6f 91       	pop	r22
    1860:	5f 91       	pop	r21
    1862:	4f 91       	pop	r20
    1864:	3f 91       	pop	r19
    1866:	2f 91       	pop	r18
    1868:	0f 90       	pop	r0
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	0f 90       	pop	r0
    186e:	1f 90       	pop	r1
    1870:	18 95       	reti

00001872 <__vector_3>:

ISR(EXT_INT_2)
{
    1872:	1f 92       	push	r1
    1874:	0f 92       	push	r0
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	0f 92       	push	r0
    187a:	11 24       	eor	r1, r1
    187c:	2f 93       	push	r18
    187e:	3f 93       	push	r19
    1880:	4f 93       	push	r20
    1882:	5f 93       	push	r21
    1884:	6f 93       	push	r22
    1886:	7f 93       	push	r23
    1888:	8f 93       	push	r24
    188a:	9f 93       	push	r25
    188c:	af 93       	push	r26
    188e:	bf 93       	push	r27
    1890:	ef 93       	push	r30
    1892:	ff 93       	push	r31
	if (EXTINT_2_callBack != nullPtr)
    1894:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <EXTINT_2_callBack>
    1898:	f0 91 34 02 	lds	r31, 0x0234	; 0x800234 <EXTINT_2_callBack+0x1>
    189c:	30 97       	sbiw	r30, 0x00	; 0
    189e:	09 f0       	breq	.+2      	; 0x18a2 <__vector_3+0x30>
	{
		EXTINT_2_callBack();
    18a0:	09 95       	icall
	}
    18a2:	ff 91       	pop	r31
    18a4:	ef 91       	pop	r30
    18a6:	bf 91       	pop	r27
    18a8:	af 91       	pop	r26
    18aa:	9f 91       	pop	r25
    18ac:	8f 91       	pop	r24
    18ae:	7f 91       	pop	r23
    18b0:	6f 91       	pop	r22
    18b2:	5f 91       	pop	r21
    18b4:	4f 91       	pop	r20
    18b6:	3f 91       	pop	r19
    18b8:	2f 91       	pop	r18
    18ba:	0f 90       	pop	r0
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	0f 90       	pop	r0
    18c0:	1f 90       	pop	r1
    18c2:	18 95       	reti

000018c4 <SPI_initSlave>:
}


void SPI_stopTransmission (void)
{
	DIO_write(PORT_B,4,HIGH);
    18c4:	40 e0       	ldi	r20, 0x00	; 0
    18c6:	64 e0       	ldi	r22, 0x04	; 4
    18c8:	82 e4       	ldi	r24, 0x42	; 66
    18ca:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
    18ce:	40 e0       	ldi	r20, 0x00	; 0
    18d0:	65 e0       	ldi	r22, 0x05	; 5
    18d2:	82 e4       	ldi	r24, 0x42	; 66
    18d4:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	67 e0       	ldi	r22, 0x07	; 7
    18dc:	82 e4       	ldi	r24, 0x42	; 66
    18de:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	66 e0       	ldi	r22, 0x06	; 6
    18e6:	82 e4       	ldi	r24, 0x42	; 66
    18e8:	0e 94 b9 09 	call	0x1372	; 0x1372 <DIO_init>
    18ec:	8d b1       	in	r24, 0x0d	; 13
    18ee:	80 64       	ori	r24, 0x40	; 64
    18f0:	8d b9       	out	0x0d, r24	; 13
    18f2:	08 95       	ret

000018f4 <SPI_transmitByte>:
u8 SPI_transmitByte(u8 data)
{
	/*Slave*/
	
	u8 flushBuffer;	
	SPDR=data;
    18f4:	8f b9       	out	0x0f, r24	; 15
	while(GET_BIT(SPSR,SPIF)==0);
    18f6:	77 9b       	sbis	0x0e, 7	; 14
    18f8:	fe cf       	rjmp	.-4      	; 0x18f6 <SPI_transmitByte+0x2>
	
	flushBuffer = SPDR;
    18fa:	8f b1       	in	r24, 0x0f	; 15
	
	return flushBuffer;
}
    18fc:	08 95       	ret

000018fe <TIMER_init>:
	{
		en_error = WRONG_TIMER_USED;
	}
	return en_error;
		
}
    18fe:	81 11       	cpse	r24, r1
    1900:	0e c0       	rjmp	.+28     	; 0x191e <TIMER_init+0x20>
    1902:	83 b7       	in	r24, 0x33	; 51
    1904:	87 7f       	andi	r24, 0xF7	; 247
    1906:	83 bf       	out	0x33, r24	; 51
    1908:	83 b7       	in	r24, 0x33	; 51
    190a:	8f 7b       	andi	r24, 0xBF	; 191
    190c:	83 bf       	out	0x33, r24	; 51
    190e:	89 b7       	in	r24, 0x39	; 57
    1910:	81 60       	ori	r24, 0x01	; 1
    1912:	89 bf       	out	0x39, r24	; 57
    1914:	8f b7       	in	r24, 0x3f	; 63
    1916:	80 68       	ori	r24, 0x80	; 128
    1918:	8f bf       	out	0x3f, r24	; 63
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	08 95       	ret
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	81 f0       	breq	.+32     	; 0x1942 <TIMER_init+0x44>
    1922:	82 30       	cpi	r24, 0x02	; 2
    1924:	81 f4       	brne	.+32     	; 0x1946 <TIMER_init+0x48>
    1926:	85 b5       	in	r24, 0x25	; 37
    1928:	87 7f       	andi	r24, 0xF7	; 247
    192a:	85 bd       	out	0x25, r24	; 37
    192c:	85 b5       	in	r24, 0x25	; 37
    192e:	8f 7b       	andi	r24, 0xBF	; 191
    1930:	85 bd       	out	0x25, r24	; 37
    1932:	89 b7       	in	r24, 0x39	; 57
    1934:	80 64       	ori	r24, 0x40	; 64
    1936:	89 bf       	out	0x39, r24	; 57
    1938:	8f b7       	in	r24, 0x3f	; 63
    193a:	80 68       	ori	r24, 0x80	; 128
    193c:	8f bf       	out	0x3f, r24	; 63
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	08 95       	ret
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	08 95       	ret
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	08 95       	ret

0000194a <TIMER_setTime>:
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	81 11       	cpse	r24, r1
    1950:	3f c0       	rjmp	.+126    	; 0x19d0 <TIMER_setTime+0x86>
    1952:	a8 ee       	ldi	r26, 0xE8	; 232
    1954:	b3 e0       	ldi	r27, 0x03	; 3
    1956:	9a 01       	movw	r18, r20
    1958:	ab 01       	movw	r20, r22
    195a:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__muluhisi3>
    195e:	8b 01       	movw	r16, r22
    1960:	9c 01       	movw	r18, r24
    1962:	68 94       	set
    1964:	13 f8       	bld	r1, 3
    1966:	36 95       	lsr	r19
    1968:	27 95       	ror	r18
    196a:	17 95       	ror	r17
    196c:	07 95       	ror	r16
    196e:	16 94       	lsr	r1
    1970:	d1 f7       	brne	.-12     	; 0x1966 <TIMER_setTime+0x1c>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	07 2e       	mov	r0, r23
    1978:	7c e0       	ldi	r23, 0x0C	; 12
    197a:	b6 95       	lsr	r27
    197c:	a7 95       	ror	r26
    197e:	97 95       	ror	r25
    1980:	87 95       	ror	r24
    1982:	7a 95       	dec	r23
    1984:	d1 f7       	brne	.-12     	; 0x197a <TIMER_setTime+0x30>
    1986:	70 2d       	mov	r23, r0
    1988:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <u32_g_timer0NumberOfOVFs>
    198c:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <u32_g_timer0NumberOfOVFs+0x1>
    1990:	a0 93 54 02 	sts	0x0254, r26	; 0x800254 <u32_g_timer0NumberOfOVFs+0x2>
    1994:	b0 93 55 02 	sts	0x0255, r27	; 0x800255 <u32_g_timer0NumberOfOVFs+0x3>
    1998:	00 93 51 02 	sts	0x0251, r16	; 0x800251 <u8_g_timer0RemTicks>
    199c:	00 23       	and	r16, r16
    199e:	09 f4       	brne	.+2      	; 0x19a2 <TIMER_setTime+0x58>
    19a0:	68 c0       	rjmp	.+208    	; 0x1a72 <TIMER_setTime+0x128>
    19a2:	01 95       	neg	r16
    19a4:	02 bf       	out	0x32, r16	; 50
    19a6:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <u32_g_timer0NumberOfOVFs>
    19aa:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <u32_g_timer0NumberOfOVFs+0x1>
    19ae:	a0 91 54 02 	lds	r26, 0x0254	; 0x800254 <u32_g_timer0NumberOfOVFs+0x2>
    19b2:	b0 91 55 02 	lds	r27, 0x0255	; 0x800255 <u32_g_timer0NumberOfOVFs+0x3>
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	a1 1d       	adc	r26, r1
    19ba:	b1 1d       	adc	r27, r1
    19bc:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <u32_g_timer0NumberOfOVFs>
    19c0:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <u32_g_timer0NumberOfOVFs+0x1>
    19c4:	a0 93 54 02 	sts	0x0254, r26	; 0x800254 <u32_g_timer0NumberOfOVFs+0x2>
    19c8:	b0 93 55 02 	sts	0x0255, r27	; 0x800255 <u32_g_timer0NumberOfOVFs+0x3>
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	58 c0       	rjmp	.+176    	; 0x1a80 <TIMER_setTime+0x136>
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <TIMER_setTime+0x8c>
    19d4:	50 c0       	rjmp	.+160    	; 0x1a76 <TIMER_setTime+0x12c>
    19d6:	82 30       	cpi	r24, 0x02	; 2
    19d8:	09 f0       	breq	.+2      	; 0x19dc <TIMER_setTime+0x92>
    19da:	4f c0       	rjmp	.+158    	; 0x1a7a <TIMER_setTime+0x130>
    19dc:	a8 ee       	ldi	r26, 0xE8	; 232
    19de:	b3 e0       	ldi	r27, 0x03	; 3
    19e0:	9a 01       	movw	r18, r20
    19e2:	ab 01       	movw	r20, r22
    19e4:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__muluhisi3>
    19e8:	8b 01       	movw	r16, r22
    19ea:	9c 01       	movw	r18, r24
    19ec:	68 94       	set
    19ee:	13 f8       	bld	r1, 3
    19f0:	36 95       	lsr	r19
    19f2:	27 95       	ror	r18
    19f4:	17 95       	ror	r17
    19f6:	07 95       	ror	r16
    19f8:	16 94       	lsr	r1
    19fa:	d1 f7       	brne	.-12     	; 0x19f0 <TIMER_setTime+0xa6>
    19fc:	ab 01       	movw	r20, r22
    19fe:	bc 01       	movw	r22, r24
    1a00:	03 2e       	mov	r0, r19
    1a02:	3c e0       	ldi	r19, 0x0C	; 12
    1a04:	76 95       	lsr	r23
    1a06:	67 95       	ror	r22
    1a08:	57 95       	ror	r21
    1a0a:	47 95       	ror	r20
    1a0c:	3a 95       	dec	r19
    1a0e:	d1 f7       	brne	.-12     	; 0x1a04 <TIMER_setTime+0xba>
    1a10:	30 2d       	mov	r19, r0
    1a12:	40 93 4d 02 	sts	0x024D, r20	; 0x80024d <u32_g_timer2NumberOfOVFs>
    1a16:	50 93 4e 02 	sts	0x024E, r21	; 0x80024e <u32_g_timer2NumberOfOVFs+0x1>
    1a1a:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <u32_g_timer2NumberOfOVFs+0x2>
    1a1e:	70 93 50 02 	sts	0x0250, r23	; 0x800250 <u32_g_timer2NumberOfOVFs+0x3>
    1a22:	d9 01       	movw	r26, r18
    1a24:	c8 01       	movw	r24, r16
    1a26:	99 27       	eor	r25, r25
    1a28:	aa 27       	eor	r26, r26
    1a2a:	bb 27       	eor	r27, r27
    1a2c:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <u8_g_timer2RemTicks>
    1a30:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <u8_g_timer2RemTicks+0x1>
    1a34:	a0 93 4b 02 	sts	0x024B, r26	; 0x80024b <u8_g_timer2RemTicks+0x2>
    1a38:	b0 93 4c 02 	sts	0x024C, r27	; 0x80024c <u8_g_timer2RemTicks+0x3>
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	a1 05       	cpc	r26, r1
    1a40:	b1 05       	cpc	r27, r1
    1a42:	e9 f0       	breq	.+58     	; 0x1a7e <TIMER_setTime+0x134>
    1a44:	81 95       	neg	r24
    1a46:	84 bd       	out	0x24, r24	; 36
    1a48:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <u32_g_timer2NumberOfOVFs>
    1a4c:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <u32_g_timer2NumberOfOVFs+0x1>
    1a50:	a0 91 4f 02 	lds	r26, 0x024F	; 0x80024f <u32_g_timer2NumberOfOVFs+0x2>
    1a54:	b0 91 50 02 	lds	r27, 0x0250	; 0x800250 <u32_g_timer2NumberOfOVFs+0x3>
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	a1 1d       	adc	r26, r1
    1a5c:	b1 1d       	adc	r27, r1
    1a5e:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <u32_g_timer2NumberOfOVFs>
    1a62:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <u32_g_timer2NumberOfOVFs+0x1>
    1a66:	a0 93 4f 02 	sts	0x024F, r26	; 0x80024f <u32_g_timer2NumberOfOVFs+0x2>
    1a6a:	b0 93 50 02 	sts	0x0250, r27	; 0x800250 <u32_g_timer2NumberOfOVFs+0x3>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	07 c0       	rjmp	.+14     	; 0x1a80 <TIMER_setTime+0x136>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	05 c0       	rjmp	.+10     	; 0x1a80 <TIMER_setTime+0x136>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	03 c0       	rjmp	.+6      	; 0x1a80 <TIMER_setTime+0x136>
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	01 c0       	rjmp	.+2      	; 0x1a80 <TIMER_setTime+0x136>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	08 95       	ret

00001a86 <TIMER_start>:
 */
en_timerError_t TIMER_start(u8 u8_a_timerUsed)
{
	en_timerError_t en_a_error = TIMER_OK;
	
	if (u8_a_timerUsed == TIMER_0)
    1a86:	81 11       	cpse	r24, r1
    1a88:	0b c0       	rjmp	.+22     	; 0x1aa0 <TIMER_start+0x1a>
		
		#elif	TIMER_0_PRESCALER == PRESCLNG_64
		CLR_BIT(TCCR0, CS02);	SET_BIT(TCCR0, CS01);	SET_BIT(TCCR0, CS00);
		
		#elif	TIMER_0_PRESCALER == PRESCLNG_256
		SET_BIT(TCCR0, CS02);	CLR_BIT(TCCR0, CS01);	CLR_BIT(TCCR0, CS00);
    1a8a:	83 b7       	in	r24, 0x33	; 51
    1a8c:	84 60       	ori	r24, 0x04	; 4
    1a8e:	83 bf       	out	0x33, r24	; 51
    1a90:	83 b7       	in	r24, 0x33	; 51
    1a92:	8d 7f       	andi	r24, 0xFD	; 253
    1a94:	83 bf       	out	0x33, r24	; 51
    1a96:	83 b7       	in	r24, 0x33	; 51
    1a98:	8e 7f       	andi	r24, 0xFE	; 254
    1a9a:	83 bf       	out	0x33, r24	; 51
 * timer  The timer to be started. Must be either TIMER0 or TIMER2.
 * error  Error code indicating the success or failure of the function.               
 */
en_timerError_t TIMER_start(u8 u8_a_timerUsed)
{
	en_timerError_t en_a_error = TIMER_OK;
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	08 95       	ret
		#elif	TIMER_0_PRESCALER == PRESCLNG_1024
		SET_BIT(TCCR0, CS02);	CLR_BIT(TCCR0, CS01);	SET_BIT(TCCR0, CS00);
		
		#endif
	}
	else if (u8_a_timerUsed == TIMER_1)
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	69 f0       	breq	.+26     	; 0x1abe <TIMER_start+0x38>
	{
	}
	else if (u8_a_timerUsed == TIMER_2)
    1aa4:	82 30       	cpi	r24, 0x02	; 2
    1aa6:	69 f4       	brne	.+26     	; 0x1ac2 <TIMER_start+0x3c>
		#elif		TIMER_2_PRESCALER	==		PRESCLNG_8
		CLR_BIT(TCCR2,CS22); SET_BIT(TCCR2,CS21);	CLR_BIT(TCCR2,CS20);
		#elif		TIMER_2_PRESCALER	==		PRESCLNG_64
		SET_BIT(TCCR2,CS22); CLR_BIT(TCCR2,CS21);	CLR_BIT(TCCR2,CS20);
		#elif		TIMER_2_PRESCALER	==		PRESCLNG_256
		SET_BIT(TCCR2,CS22); SET_BIT(TCCR2,CS21);	CLR_BIT(TCCR2,CS20);
    1aa8:	85 b5       	in	r24, 0x25	; 37
    1aaa:	84 60       	ori	r24, 0x04	; 4
    1aac:	85 bd       	out	0x25, r24	; 37
    1aae:	85 b5       	in	r24, 0x25	; 37
    1ab0:	82 60       	ori	r24, 0x02	; 2
    1ab2:	85 bd       	out	0x25, r24	; 37
    1ab4:	85 b5       	in	r24, 0x25	; 37
    1ab6:	8e 7f       	andi	r24, 0xFE	; 254
    1ab8:	85 bd       	out	0x25, r24	; 37
 * timer  The timer to be started. Must be either TIMER0 or TIMER2.
 * error  Error code indicating the success or failure of the function.               
 */
en_timerError_t TIMER_start(u8 u8_a_timerUsed)
{
	en_timerError_t en_a_error = TIMER_OK;
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	08 95       	ret
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	08 95       	ret
		#endif

	}
	else
	{
		en_a_error = WRONG_TIMER_USED;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_error;
	
}
    1ac4:	08 95       	ret

00001ac6 <TIMER_stop>:
 */
en_timerError_t TIMER_stop(u8 u8_a_timerUsed)
{
	en_timerError_t en_a_error = TIMER_OK;
	
	if (u8_a_timerUsed == TIMER_0)
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	19 c0       	rjmp	.+50     	; 0x1afc <TIMER_stop+0x36>
	{
		if (u8_g_normalToPwm)
    1aca:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <u8_g_normalToPwm>
    1ace:	88 23       	and	r24, r24
    1ad0:	51 f0       	breq	.+20     	; 0x1ae6 <TIMER_stop+0x20>
		{
			DIO_write(PORT_D,4, LOW);
    1ad2:	40 e0       	ldi	r20, 0x00	; 0
    1ad4:	64 e0       	ldi	r22, 0x04	; 4
    1ad6:	84 e4       	ldi	r24, 0x44	; 68
    1ad8:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			DIO_write(PORT_D,5, LOW);
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	65 e0       	ldi	r22, 0x05	; 5
    1ae0:	84 e4       	ldi	r24, 0x44	; 68
    1ae2:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			
		}
		CLR_BIT(TCCR0, CS02);	CLR_BIT(TCCR0, CS01);	CLR_BIT(TCCR0, CS00);
    1ae6:	83 b7       	in	r24, 0x33	; 51
    1ae8:	8b 7f       	andi	r24, 0xFB	; 251
    1aea:	83 bf       	out	0x33, r24	; 51
    1aec:	83 b7       	in	r24, 0x33	; 51
    1aee:	8d 7f       	andi	r24, 0xFD	; 253
    1af0:	83 bf       	out	0x33, r24	; 51
    1af2:	83 b7       	in	r24, 0x33	; 51
    1af4:	8e 7f       	andi	r24, 0xFE	; 254
    1af6:	83 bf       	out	0x33, r24	; 51
 *u8_a_timerUsed: The timer to be stopped.
 *en_error: Error code indicating the success or failure of the function.
 */
en_timerError_t TIMER_stop(u8 u8_a_timerUsed)
{
	en_timerError_t en_a_error = TIMER_OK;
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	08 95       	ret
			DIO_write(PORT_D,5, LOW);
			
		}
		CLR_BIT(TCCR0, CS02);	CLR_BIT(TCCR0, CS01);	CLR_BIT(TCCR0, CS00);
	}
	else if (u8_a_timerUsed == TIMER_1)
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	69 f0       	breq	.+26     	; 0x1b1a <TIMER_stop+0x54>
	{
	}
	else if (u8_a_timerUsed == TIMER_2)
    1b00:	82 30       	cpi	r24, 0x02	; 2
    1b02:	69 f4       	brne	.+26     	; 0x1b1e <TIMER_stop+0x58>
	{
		CLR_BIT(TCCR2, CS22);	CLR_BIT(TCCR2, CS21);	CLR_BIT(TCCR2, CS20);
    1b04:	85 b5       	in	r24, 0x25	; 37
    1b06:	8b 7f       	andi	r24, 0xFB	; 251
    1b08:	85 bd       	out	0x25, r24	; 37
    1b0a:	85 b5       	in	r24, 0x25	; 37
    1b0c:	8d 7f       	andi	r24, 0xFD	; 253
    1b0e:	85 bd       	out	0x25, r24	; 37
    1b10:	85 b5       	in	r24, 0x25	; 37
    1b12:	8e 7f       	andi	r24, 0xFE	; 254
    1b14:	85 bd       	out	0x25, r24	; 37
 *u8_a_timerUsed: The timer to be stopped.
 *en_error: Error code indicating the success or failure of the function.
 */
en_timerError_t TIMER_stop(u8 u8_a_timerUsed)
{
	en_timerError_t en_a_error = TIMER_OK;
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	08 95       	ret
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	08 95       	ret
	{
		CLR_BIT(TCCR2, CS22);	CLR_BIT(TCCR2, CS21);	CLR_BIT(TCCR2, CS20);
	}
	else
	{
		en_a_error = WRONG_TIMER_USED;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return en_a_error;
	
}
    1b20:	08 95       	ret

00001b22 <TIMER_setCallBack>:
 *funPtr: Pointer to the function to be called when a timer interrupt occurs.
 *return None.
*/
void TIMER_setCallBack(u8 u8_a_timerUsed, void (*funPtr)(void))
{
	if(funPtr != nullPtr)
    1b22:	61 15       	cp	r22, r1
    1b24:	71 05       	cpc	r23, r1
    1b26:	a1 f0       	breq	.+40     	; 0x1b50 <TIMER_setCallBack+0x2e>
	{
		if (u8_a_timerUsed == TIMER_0)
    1b28:	81 11       	cpse	r24, r1
    1b2a:	05 c0       	rjmp	.+10     	; 0x1b36 <TIMER_setCallBack+0x14>
		{
			TIMER_0_callBack = funPtr;
    1b2c:	70 93 48 02 	sts	0x0248, r23	; 0x800248 <TIMER_0_callBack+0x1>
    1b30:	60 93 47 02 	sts	0x0247, r22	; 0x800247 <TIMER_0_callBack>
    1b34:	08 95       	ret
		}
		else if (u8_a_timerUsed == TIMER_1)
    1b36:	81 30       	cpi	r24, 0x01	; 1
    1b38:	29 f4       	brne	.+10     	; 0x1b44 <TIMER_setCallBack+0x22>
		{
			TIMER_1_callBack = funPtr;
    1b3a:	70 93 46 02 	sts	0x0246, r23	; 0x800246 <TIMER_1_callBack+0x1>
    1b3e:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <TIMER_1_callBack>
    1b42:	08 95       	ret
		}
		else if (u8_a_timerUsed == TIMER_2)
    1b44:	82 30       	cpi	r24, 0x02	; 2
    1b46:	21 f4       	brne	.+8      	; 0x1b50 <TIMER_setCallBack+0x2e>
		{
			TIMER_2_callBack = funPtr;
    1b48:	70 93 44 02 	sts	0x0244, r23	; 0x800244 <TIMER_2_callBack+0x1>
    1b4c:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <TIMER_2_callBack>
    1b50:	08 95       	ret

00001b52 <TIMER_stopInterrupt>:
 */
en_timerError_t	TIMER_stopInterrupt(u8 u8_a_timerUsed)
{
	en_timerError_t en_a_error;
	
	if (u8_a_timerUsed == TIMER_0)
    1b52:	81 11       	cpse	r24, r1
    1b54:	07 c0       	rjmp	.+14     	; 0x1b64 <TIMER_stopInterrupt+0x12>
	{
		CLR_BIT(TIMSK,TOIE0);
    1b56:	89 b7       	in	r24, 0x39	; 57
    1b58:	8e 7f       	andi	r24, 0xFE	; 254
    1b5a:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK,OCIE0);
    1b5c:	89 b7       	in	r24, 0x39	; 57
    1b5e:	8d 7f       	andi	r24, 0xFD	; 253
    1b60:	89 bf       	out	0x39, r24	; 57
    1b62:	0a c0       	rjmp	.+20     	; 0x1b78 <TIMER_stopInterrupt+0x26>
	}
	else if (u8_a_timerUsed == TIMER_1)
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	41 f0       	breq	.+16     	; 0x1b78 <TIMER_stopInterrupt+0x26>
	{
		
	}
	else if (u8_a_timerUsed == TIMER_2)
    1b68:	82 30       	cpi	r24, 0x02	; 2
    1b6a:	31 f4       	brne	.+12     	; 0x1b78 <TIMER_stopInterrupt+0x26>
	{
		CLR_BIT(TIMSK,TOIE2);
    1b6c:	89 b7       	in	r24, 0x39	; 57
    1b6e:	8f 7b       	andi	r24, 0xBF	; 191
    1b70:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK,OCIE2);
    1b72:	89 b7       	in	r24, 0x39	; 57
    1b74:	8f 77       	andi	r24, 0x7F	; 127
    1b76:	89 bf       	out	0x39, r24	; 57
	else
	{
		en_a_error = WRONG_TIMER_USED;
	}
	return en_a_error;
}
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	08 95       	ret

00001b7c <TIMER_enableInterrupt>:

en_timerError_t	TIMER_enableInterrupt(u8 u8_a_timerUsed)
{
	en_timerError_t en_a_error;
	
	if (u8_a_timerUsed == TIMER_0)
    1b7c:	81 11       	cpse	r24, r1
    1b7e:	04 c0       	rjmp	.+8      	; 0x1b88 <TIMER_enableInterrupt+0xc>
	{
		#if		TIMER_0_MODE		==		OV_TIMER
		SET_BIT(TIMSK,TOIE0);
    1b80:	89 b7       	in	r24, 0x39	; 57
    1b82:	81 60       	ori	r24, 0x01	; 1
    1b84:	89 bf       	out	0x39, r24	; 57
    1b86:	07 c0       	rjmp	.+14     	; 0x1b96 <TIMER_enableInterrupt+0x1a>
		#elif	TIMER_0_MODE		==	CTC_TIMER
		SET_BIT(TIMSK,OCIE0);
		#endif
	}
	else if (u8_a_timerUsed == TIMER_1)
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	29 f0       	breq	.+10     	; 0x1b96 <TIMER_enableInterrupt+0x1a>
	{
		
	}
	else if (u8_a_timerUsed == TIMER_2)
    1b8c:	82 30       	cpi	r24, 0x02	; 2
    1b8e:	19 f4       	brne	.+6      	; 0x1b96 <TIMER_enableInterrupt+0x1a>
	{
		#if		TIMER_2_MODE		==		OV_TIMER
		SET_BIT(TIMSK,TOIE2);
    1b90:	89 b7       	in	r24, 0x39	; 57
    1b92:	80 64       	ori	r24, 0x40	; 64
    1b94:	89 bf       	out	0x39, r24	; 57
	else
	{
		en_a_error = WRONG_TIMER_USED;
	}
	return en_a_error;
}
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	08 95       	ret

00001b9a <TIMER_delay>:
 *Delays the program for the specified time using the specified timer.
 *u8_a_timerUsed The timer to use for the delay (TIMER_0, TIMER_1, or TIMER_2).
 *u32_a_timeInMS The time to delay the program in milliseconds. en_timerError_t Returns TIMER_OK if the operation was successful, or WRONG_TIMER_USED if an invalid timer is specified.
 */
en_timerError_t TIMER_delay(u8 u8_a_timerUsed, u32 u32_a_timeInMS)
{
    1b9a:	cf 92       	push	r12
    1b9c:	df 92       	push	r13
    1b9e:	ef 92       	push	r14
    1ba0:	ff 92       	push	r15
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
	en_timerError_t en_a_error;
	
	if (u8_a_timerUsed == TIMER_0)
    1ba6:	88 23       	and	r24, r24
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <TIMER_delay+0x12>
    1baa:	4b c0       	rjmp	.+150    	; 0x1c42 <TIMER_delay+0xa8>
	{

	}
	else if (u8_a_timerUsed == TIMER_1)
    1bac:	81 30       	cpi	r24, 0x01	; 1
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <TIMER_delay+0x18>
    1bb0:	48 c0       	rjmp	.+144    	; 0x1c42 <TIMER_delay+0xa8>
	{
		
	}
	else if (u8_a_timerUsed == TIMER_2)
    1bb2:	82 30       	cpi	r24, 0x02	; 2
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <TIMER_delay+0x1e>
    1bb6:	45 c0       	rjmp	.+138    	; 0x1c42 <TIMER_delay+0xa8>
    1bb8:	6a 01       	movw	r12, r20
    1bba:	7b 01       	movw	r14, r22
	{
		TIMER_stopInterrupt(TIMER_2);
    1bbc:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <TIMER_stopInterrupt>
		TIMER_start(TIMER_2);
    1bc0:	82 e0       	ldi	r24, 0x02	; 2
    1bc2:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <TIMER_start>
		u32 numberOfOverflows = 0;
		u8 numberOfRemTicks	= 0;
		
		
		tickTime = TIMER_2_PRESCALER / XTAL_FREQ;
		numberOfTicks = ((u32_a_timeInMS*1000)/tickTime);
    1bc6:	a8 ee       	ldi	r26, 0xE8	; 232
    1bc8:	b3 e0       	ldi	r27, 0x03	; 3
    1bca:	a7 01       	movw	r20, r14
    1bcc:	96 01       	movw	r18, r12
    1bce:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__muluhisi3>
    1bd2:	6b 01       	movw	r12, r22
    1bd4:	7c 01       	movw	r14, r24
    1bd6:	68 94       	set
    1bd8:	13 f8       	bld	r1, 3
    1bda:	f6 94       	lsr	r15
    1bdc:	e7 94       	ror	r14
    1bde:	d7 94       	ror	r13
    1be0:	c7 94       	ror	r12
    1be2:	16 94       	lsr	r1
    1be4:	d1 f7       	brne	.-12     	; 0x1bda <TIMER_delay+0x40>
		numberOfOverflows = numberOfTicks / 256;
    1be6:	8b 01       	movw	r16, r22
    1be8:	9c 01       	movw	r18, r24
    1bea:	0f 2e       	mov	r0, r31
    1bec:	fc e0       	ldi	r31, 0x0C	; 12
    1bee:	36 95       	lsr	r19
    1bf0:	27 95       	ror	r18
    1bf2:	17 95       	ror	r17
    1bf4:	07 95       	ror	r16
    1bf6:	fa 95       	dec	r31
    1bf8:	d1 f7       	brne	.-12     	; 0x1bee <TIMER_delay+0x54>
    1bfa:	f0 2d       	mov	r31, r0
		numberOfRemTicks	= numberOfTicks % 256;
		
		if (numberOfRemTicks)
    1bfc:	cc 20       	and	r12, r12
    1bfe:	51 f0       	breq	.+20     	; 0x1c14 <TIMER_delay+0x7a>
		{
			numberOfOverflows++;
    1c00:	0f 5f       	subi	r16, 0xFF	; 255
    1c02:	1f 4f       	sbci	r17, 0xFF	; 255
    1c04:	2f 4f       	sbci	r18, 0xFF	; 255
    1c06:	3f 4f       	sbci	r19, 0xFF	; 255
			TCNT2 = 256 - numberOfRemTicks;
    1c08:	c1 94       	neg	r12
    1c0a:	c4 bc       	out	0x24, r12	; 36
 *Delays the program for the specified time using the specified timer.
 *u8_a_timerUsed The timer to use for the delay (TIMER_0, TIMER_1, or TIMER_2).
 *u32_a_timeInMS The time to delay the program in milliseconds. en_timerError_t Returns TIMER_OK if the operation was successful, or WRONG_TIMER_USED if an invalid timer is specified.
 */
en_timerError_t TIMER_delay(u8 u8_a_timerUsed, u32 u32_a_timeInMS)
{
    1c0c:	40 e0       	ldi	r20, 0x00	; 0
    1c0e:	50 e0       	ldi	r21, 0x00	; 0
    1c10:	ba 01       	movw	r22, r20
    1c12:	0c c0       	rjmp	.+24     	; 0x1c2c <TIMER_delay+0x92>
			numberOfOverflows++;
			TCNT2 = 256 - numberOfRemTicks;
		}
		else
		{
			TCNT2 = 0;
    1c14:	14 bc       	out	0x24, r1	; 36
    1c16:	fa cf       	rjmp	.-12     	; 0x1c0c <TIMER_delay+0x72>
		}
		while(overflowCounter < numberOfOverflows)		
		{
			while((GET_BIT(TIFR, TOV2)) == 0);
    1c18:	08 b6       	in	r0, 0x38	; 56
    1c1a:	06 fe       	sbrs	r0, 6
    1c1c:	fd cf       	rjmp	.-6      	; 0x1c18 <TIMER_delay+0x7e>
			SET_BIT(TIFR, TOV2);
    1c1e:	88 b7       	in	r24, 0x38	; 56
    1c20:	80 64       	ori	r24, 0x40	; 64
    1c22:	88 bf       	out	0x38, r24	; 56
			overflowCounter++;
    1c24:	4f 5f       	subi	r20, 0xFF	; 255
    1c26:	5f 4f       	sbci	r21, 0xFF	; 255
    1c28:	6f 4f       	sbci	r22, 0xFF	; 255
    1c2a:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		else
		{
			TCNT2 = 0;
		}
		while(overflowCounter < numberOfOverflows)		
    1c2c:	40 17       	cp	r20, r16
    1c2e:	51 07       	cpc	r21, r17
    1c30:	62 07       	cpc	r22, r18
    1c32:	73 07       	cpc	r23, r19
    1c34:	88 f3       	brcs	.-30     	; 0x1c18 <TIMER_delay+0x7e>
		{
			while((GET_BIT(TIFR, TOV2)) == 0);
			SET_BIT(TIFR, TOV2);
			overflowCounter++;
		}
		TIMER_stop(TIMER_2);
    1c36:	82 e0       	ldi	r24, 0x02	; 2
    1c38:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <TIMER_stop>
		TIMER_enableInterrupt(TIMER_2);
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <TIMER_enableInterrupt>
	{
		en_a_error = WRONG_TIMER_USED;
	}
	return en_a_error;
	
}
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	1f 91       	pop	r17
    1c46:	0f 91       	pop	r16
    1c48:	ff 90       	pop	r15
    1c4a:	ef 90       	pop	r14
    1c4c:	df 90       	pop	r13
    1c4e:	cf 90       	pop	r12
    1c50:	08 95       	ret

00001c52 <__vector_11>:

#if			TIMER_0_MODE		==		OV_TIMER
ISR(TIMER0_OVF)
{
    1c52:	1f 92       	push	r1
    1c54:	0f 92       	push	r0
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	0f 92       	push	r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	2f 93       	push	r18
    1c5e:	3f 93       	push	r19
    1c60:	4f 93       	push	r20
    1c62:	5f 93       	push	r21
    1c64:	6f 93       	push	r22
    1c66:	7f 93       	push	r23
    1c68:	8f 93       	push	r24
    1c6a:	9f 93       	push	r25
    1c6c:	af 93       	push	r26
    1c6e:	bf 93       	push	r27
    1c70:	ef 93       	push	r30
    1c72:	ff 93       	push	r31
	if (u8_g_normalToPwm == 0	)
    1c74:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <u8_g_normalToPwm>
    1c78:	81 11       	cpse	r24, r1
    1c7a:	35 c0       	rjmp	.+106    	; 0x1ce6 <__vector_11+0x94>
	{
		
		static u32 OVFCounter = 0;
		OVFCounter  ++;
    1c7c:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <OVFCounter.1713>
    1c80:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <OVFCounter.1713+0x1>
    1c84:	a0 91 40 02 	lds	r26, 0x0240	; 0x800240 <OVFCounter.1713+0x2>
    1c88:	b0 91 41 02 	lds	r27, 0x0241	; 0x800241 <OVFCounter.1713+0x3>
    1c8c:	01 96       	adiw	r24, 0x01	; 1
    1c8e:	a1 1d       	adc	r26, r1
    1c90:	b1 1d       	adc	r27, r1
    1c92:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <OVFCounter.1713>
    1c96:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <OVFCounter.1713+0x1>
    1c9a:	a0 93 40 02 	sts	0x0240, r26	; 0x800240 <OVFCounter.1713+0x2>
    1c9e:	b0 93 41 02 	sts	0x0241, r27	; 0x800241 <OVFCounter.1713+0x3>
		if (OVFCounter  == u32_g_timer0NumberOfOVFs)
    1ca2:	40 91 52 02 	lds	r20, 0x0252	; 0x800252 <u32_g_timer0NumberOfOVFs>
    1ca6:	50 91 53 02 	lds	r21, 0x0253	; 0x800253 <u32_g_timer0NumberOfOVFs+0x1>
    1caa:	60 91 54 02 	lds	r22, 0x0254	; 0x800254 <u32_g_timer0NumberOfOVFs+0x2>
    1cae:	70 91 55 02 	lds	r23, 0x0255	; 0x800255 <u32_g_timer0NumberOfOVFs+0x3>
    1cb2:	84 17       	cp	r24, r20
    1cb4:	95 07       	cpc	r25, r21
    1cb6:	a6 07       	cpc	r26, r22
    1cb8:	b7 07       	cpc	r27, r23
    1cba:	09 f0       	breq	.+2      	; 0x1cbe <__vector_11+0x6c>
    1cbc:	4a c0       	rjmp	.+148    	; 0x1d52 <__vector_11+0x100>
		{
			if(TIMER_0_callBack != nullPtr)
    1cbe:	e0 91 47 02 	lds	r30, 0x0247	; 0x800247 <TIMER_0_callBack>
    1cc2:	f0 91 48 02 	lds	r31, 0x0248	; 0x800248 <TIMER_0_callBack+0x1>
    1cc6:	30 97       	sbiw	r30, 0x00	; 0
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <__vector_11+0x7a>
			{
				TIMER_0_callBack();
    1cca:	09 95       	icall
			}
			OVFCounter  =	0;
    1ccc:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <OVFCounter.1713>
    1cd0:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <OVFCounter.1713+0x1>
    1cd4:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <OVFCounter.1713+0x2>
    1cd8:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <OVFCounter.1713+0x3>
			TCNT0 = 256 - u8_g_timer0RemTicks;
    1cdc:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <u8_g_timer0RemTicks>
    1ce0:	81 95       	neg	r24
    1ce2:	82 bf       	out	0x32, r24	; 50
    1ce4:	36 c0       	rjmp	.+108    	; 0x1d52 <__vector_11+0x100>
		}
	}
	else
	{
		static u8 u8_gs_generatorState = 0;
		if (u8_gs_generatorState)
    1ce6:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <u8_gs_generatorState.1714>
    1cea:	88 23       	and	r24, r24
    1cec:	c9 f0       	breq	.+50     	; 0x1d20 <__vector_11+0xce>
		{
			DIO_write(PORT_D,4,LOW);
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	64 e0       	ldi	r22, 0x04	; 4
    1cf2:	84 e4       	ldi	r24, 0x44	; 68
    1cf4:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			DIO_write(PORT_D,5,LOW);
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	65 e0       	ldi	r22, 0x05	; 5
    1cfc:	84 e4       	ldi	r24, 0x44	; 68
    1cfe:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			TCNT0 = 256 - u16_g_offTime;
    1d02:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <u16_g_offTime>
    1d06:	81 95       	neg	r24
    1d08:	82 bf       	out	0x32, r24	; 50
			if (u16_g_offTime < 256)
    1d0a:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <u16_g_offTime>
    1d0e:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <u16_g_offTime+0x1>
    1d12:	8f 3f       	cpi	r24, 0xFF	; 255
    1d14:	91 05       	cpc	r25, r1
    1d16:	09 f0       	breq	.+2      	; 0x1d1a <__vector_11+0xc8>
    1d18:	e0 f4       	brcc	.+56     	; 0x1d52 <__vector_11+0x100>
			{
				u8_gs_generatorState = 0;
    1d1a:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <u8_gs_generatorState.1714>
    1d1e:	19 c0       	rjmp	.+50     	; 0x1d52 <__vector_11+0x100>
			}	
		}
		else
		{
			DIO_write(PORT_D,4, HIGH);
    1d20:	41 e0       	ldi	r20, 0x01	; 1
    1d22:	64 e0       	ldi	r22, 0x04	; 4
    1d24:	84 e4       	ldi	r24, 0x44	; 68
    1d26:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			DIO_write(PORT_D,5, HIGH);
    1d2a:	41 e0       	ldi	r20, 0x01	; 1
    1d2c:	65 e0       	ldi	r22, 0x05	; 5
    1d2e:	84 e4       	ldi	r24, 0x44	; 68
    1d30:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			TCNT0 = 256 - u16_g_onTime;
    1d34:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <u16_g_onTime>
    1d38:	81 95       	neg	r24
    1d3a:	82 bf       	out	0x32, r24	; 50
			if (u16_g_onTime < 256)
    1d3c:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <u16_g_onTime>
    1d40:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <u16_g_onTime+0x1>
    1d44:	8f 3f       	cpi	r24, 0xFF	; 255
    1d46:	91 05       	cpc	r25, r1
    1d48:	09 f0       	breq	.+2      	; 0x1d4c <__vector_11+0xfa>
    1d4a:	18 f4       	brcc	.+6      	; 0x1d52 <__vector_11+0x100>
			{
				u8_gs_generatorState = 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <u8_gs_generatorState.1714>
			}
			
		}
		
	}
}
    1d52:	ff 91       	pop	r31
    1d54:	ef 91       	pop	r30
    1d56:	bf 91       	pop	r27
    1d58:	af 91       	pop	r26
    1d5a:	9f 91       	pop	r25
    1d5c:	8f 91       	pop	r24
    1d5e:	7f 91       	pop	r23
    1d60:	6f 91       	pop	r22
    1d62:	5f 91       	pop	r21
    1d64:	4f 91       	pop	r20
    1d66:	3f 91       	pop	r19
    1d68:	2f 91       	pop	r18
    1d6a:	0f 90       	pop	r0
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	0f 90       	pop	r0
    1d70:	1f 90       	pop	r1
    1d72:	18 95       	reti

00001d74 <__vector_5>:
	}
}
#endif

ISR(TIMER2_OVF)
{		
    1d74:	1f 92       	push	r1
    1d76:	0f 92       	push	r0
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	0f 92       	push	r0
    1d7c:	11 24       	eor	r1, r1
    1d7e:	2f 93       	push	r18
    1d80:	3f 93       	push	r19
    1d82:	4f 93       	push	r20
    1d84:	5f 93       	push	r21
    1d86:	6f 93       	push	r22
    1d88:	7f 93       	push	r23
    1d8a:	8f 93       	push	r24
    1d8c:	9f 93       	push	r25
    1d8e:	af 93       	push	r26
    1d90:	bf 93       	push	r27
    1d92:	ef 93       	push	r30
    1d94:	ff 93       	push	r31
		static u32 OVFCounter = 0;
		OVFCounter  ++;
    1d96:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <OVFCounter.1720>
    1d9a:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <OVFCounter.1720+0x1>
    1d9e:	a0 91 3b 02 	lds	r26, 0x023B	; 0x80023b <OVFCounter.1720+0x2>
    1da2:	b0 91 3c 02 	lds	r27, 0x023C	; 0x80023c <OVFCounter.1720+0x3>
    1da6:	01 96       	adiw	r24, 0x01	; 1
    1da8:	a1 1d       	adc	r26, r1
    1daa:	b1 1d       	adc	r27, r1
    1dac:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <OVFCounter.1720>
    1db0:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <OVFCounter.1720+0x1>
    1db4:	a0 93 3b 02 	sts	0x023B, r26	; 0x80023b <OVFCounter.1720+0x2>
    1db8:	b0 93 3c 02 	sts	0x023C, r27	; 0x80023c <OVFCounter.1720+0x3>
		if (OVFCounter  == u32_g_timer2NumberOfOVFs)
    1dbc:	40 91 4d 02 	lds	r20, 0x024D	; 0x80024d <u32_g_timer2NumberOfOVFs>
    1dc0:	50 91 4e 02 	lds	r21, 0x024E	; 0x80024e <u32_g_timer2NumberOfOVFs+0x1>
    1dc4:	60 91 4f 02 	lds	r22, 0x024F	; 0x80024f <u32_g_timer2NumberOfOVFs+0x2>
    1dc8:	70 91 50 02 	lds	r23, 0x0250	; 0x800250 <u32_g_timer2NumberOfOVFs+0x3>
    1dcc:	84 17       	cp	r24, r20
    1dce:	95 07       	cpc	r25, r21
    1dd0:	a6 07       	cpc	r26, r22
    1dd2:	b7 07       	cpc	r27, r23
    1dd4:	99 f4       	brne	.+38     	; 0x1dfc <__vector_5+0x88>
		{
			if(TIMER_2_callBack != nullPtr)
    1dd6:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <TIMER_2_callBack>
    1dda:	f0 91 44 02 	lds	r31, 0x0244	; 0x800244 <TIMER_2_callBack+0x1>
    1dde:	30 97       	sbiw	r30, 0x00	; 0
    1de0:	09 f0       	breq	.+2      	; 0x1de4 <__vector_5+0x70>
			{
				TIMER_2_callBack();
    1de2:	09 95       	icall
			}
			OVFCounter  =	0;
    1de4:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <OVFCounter.1720>
    1de8:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <OVFCounter.1720+0x1>
    1dec:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <OVFCounter.1720+0x2>
    1df0:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <OVFCounter.1720+0x3>
			TCNT0 = 256 - u8_g_timer2RemTicks;
    1df4:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <u8_g_timer2RemTicks>
    1df8:	81 95       	neg	r24
    1dfa:	82 bf       	out	0x32, r24	; 50
			
		}

    1dfc:	ff 91       	pop	r31
    1dfe:	ef 91       	pop	r30
    1e00:	bf 91       	pop	r27
    1e02:	af 91       	pop	r26
    1e04:	9f 91       	pop	r25
    1e06:	8f 91       	pop	r24
    1e08:	7f 91       	pop	r23
    1e0a:	6f 91       	pop	r22
    1e0c:	5f 91       	pop	r21
    1e0e:	4f 91       	pop	r20
    1e10:	3f 91       	pop	r19
    1e12:	2f 91       	pop	r18
    1e14:	0f 90       	pop	r0
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	0f 90       	pop	r0
    1e1a:	1f 90       	pop	r1
    1e1c:	18 95       	reti

00001e1e <__subsf3>:
    1e1e:	50 58       	subi	r21, 0x80	; 128

00001e20 <__addsf3>:
    1e20:	bb 27       	eor	r27, r27
    1e22:	aa 27       	eor	r26, r26
    1e24:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <__addsf3x>
    1e28:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <__fp_round>
    1e2c:	0e 94 8c 10 	call	0x2118	; 0x2118 <__fp_pscA>
    1e30:	38 f0       	brcs	.+14     	; 0x1e40 <__addsf3+0x20>
    1e32:	0e 94 93 10 	call	0x2126	; 0x2126 <__fp_pscB>
    1e36:	20 f0       	brcs	.+8      	; 0x1e40 <__addsf3+0x20>
    1e38:	39 f4       	brne	.+14     	; 0x1e48 <__addsf3+0x28>
    1e3a:	9f 3f       	cpi	r25, 0xFF	; 255
    1e3c:	19 f4       	brne	.+6      	; 0x1e44 <__addsf3+0x24>
    1e3e:	26 f4       	brtc	.+8      	; 0x1e48 <__addsf3+0x28>
    1e40:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__fp_nan>
    1e44:	0e f4       	brtc	.+2      	; 0x1e48 <__addsf3+0x28>
    1e46:	e0 95       	com	r30
    1e48:	e7 fb       	bst	r30, 7
    1e4a:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__fp_inf>

00001e4e <__addsf3x>:
    1e4e:	e9 2f       	mov	r30, r25
    1e50:	0e 94 ab 10 	call	0x2156	; 0x2156 <__fp_split3>
    1e54:	58 f3       	brcs	.-42     	; 0x1e2c <__addsf3+0xc>
    1e56:	ba 17       	cp	r27, r26
    1e58:	62 07       	cpc	r22, r18
    1e5a:	73 07       	cpc	r23, r19
    1e5c:	84 07       	cpc	r24, r20
    1e5e:	95 07       	cpc	r25, r21
    1e60:	20 f0       	brcs	.+8      	; 0x1e6a <__addsf3x+0x1c>
    1e62:	79 f4       	brne	.+30     	; 0x1e82 <__addsf3x+0x34>
    1e64:	a6 f5       	brtc	.+104    	; 0x1ece <__addsf3x+0x80>
    1e66:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__fp_zero>
    1e6a:	0e f4       	brtc	.+2      	; 0x1e6e <__addsf3x+0x20>
    1e6c:	e0 95       	com	r30
    1e6e:	0b 2e       	mov	r0, r27
    1e70:	ba 2f       	mov	r27, r26
    1e72:	a0 2d       	mov	r26, r0
    1e74:	0b 01       	movw	r0, r22
    1e76:	b9 01       	movw	r22, r18
    1e78:	90 01       	movw	r18, r0
    1e7a:	0c 01       	movw	r0, r24
    1e7c:	ca 01       	movw	r24, r20
    1e7e:	a0 01       	movw	r20, r0
    1e80:	11 24       	eor	r1, r1
    1e82:	ff 27       	eor	r31, r31
    1e84:	59 1b       	sub	r21, r25
    1e86:	99 f0       	breq	.+38     	; 0x1eae <__addsf3x+0x60>
    1e88:	59 3f       	cpi	r21, 0xF9	; 249
    1e8a:	50 f4       	brcc	.+20     	; 0x1ea0 <__addsf3x+0x52>
    1e8c:	50 3e       	cpi	r21, 0xE0	; 224
    1e8e:	68 f1       	brcs	.+90     	; 0x1eea <__addsf3x+0x9c>
    1e90:	1a 16       	cp	r1, r26
    1e92:	f0 40       	sbci	r31, 0x00	; 0
    1e94:	a2 2f       	mov	r26, r18
    1e96:	23 2f       	mov	r18, r19
    1e98:	34 2f       	mov	r19, r20
    1e9a:	44 27       	eor	r20, r20
    1e9c:	58 5f       	subi	r21, 0xF8	; 248
    1e9e:	f3 cf       	rjmp	.-26     	; 0x1e86 <__addsf3x+0x38>
    1ea0:	46 95       	lsr	r20
    1ea2:	37 95       	ror	r19
    1ea4:	27 95       	ror	r18
    1ea6:	a7 95       	ror	r26
    1ea8:	f0 40       	sbci	r31, 0x00	; 0
    1eaa:	53 95       	inc	r21
    1eac:	c9 f7       	brne	.-14     	; 0x1ea0 <__addsf3x+0x52>
    1eae:	7e f4       	brtc	.+30     	; 0x1ece <__addsf3x+0x80>
    1eb0:	1f 16       	cp	r1, r31
    1eb2:	ba 0b       	sbc	r27, r26
    1eb4:	62 0b       	sbc	r22, r18
    1eb6:	73 0b       	sbc	r23, r19
    1eb8:	84 0b       	sbc	r24, r20
    1eba:	ba f0       	brmi	.+46     	; 0x1eea <__addsf3x+0x9c>
    1ebc:	91 50       	subi	r25, 0x01	; 1
    1ebe:	a1 f0       	breq	.+40     	; 0x1ee8 <__addsf3x+0x9a>
    1ec0:	ff 0f       	add	r31, r31
    1ec2:	bb 1f       	adc	r27, r27
    1ec4:	66 1f       	adc	r22, r22
    1ec6:	77 1f       	adc	r23, r23
    1ec8:	88 1f       	adc	r24, r24
    1eca:	c2 f7       	brpl	.-16     	; 0x1ebc <__addsf3x+0x6e>
    1ecc:	0e c0       	rjmp	.+28     	; 0x1eea <__addsf3x+0x9c>
    1ece:	ba 0f       	add	r27, r26
    1ed0:	62 1f       	adc	r22, r18
    1ed2:	73 1f       	adc	r23, r19
    1ed4:	84 1f       	adc	r24, r20
    1ed6:	48 f4       	brcc	.+18     	; 0x1eea <__addsf3x+0x9c>
    1ed8:	87 95       	ror	r24
    1eda:	77 95       	ror	r23
    1edc:	67 95       	ror	r22
    1ede:	b7 95       	ror	r27
    1ee0:	f7 95       	ror	r31
    1ee2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ee4:	08 f0       	brcs	.+2      	; 0x1ee8 <__addsf3x+0x9a>
    1ee6:	b0 cf       	rjmp	.-160    	; 0x1e48 <__addsf3+0x28>
    1ee8:	93 95       	inc	r25
    1eea:	88 0f       	add	r24, r24
    1eec:	08 f0       	brcs	.+2      	; 0x1ef0 <__addsf3x+0xa2>
    1eee:	99 27       	eor	r25, r25
    1ef0:	ee 0f       	add	r30, r30
    1ef2:	97 95       	ror	r25
    1ef4:	87 95       	ror	r24
    1ef6:	08 95       	ret

00001ef8 <__cmpsf2>:
    1ef8:	0e 94 5f 10 	call	0x20be	; 0x20be <__fp_cmp>
    1efc:	08 f4       	brcc	.+2      	; 0x1f00 <__cmpsf2+0x8>
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	08 95       	ret

00001f02 <__divsf3>:
    1f02:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__divsf3x>
    1f06:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <__fp_round>
    1f0a:	0e 94 93 10 	call	0x2126	; 0x2126 <__fp_pscB>
    1f0e:	58 f0       	brcs	.+22     	; 0x1f26 <__divsf3+0x24>
    1f10:	0e 94 8c 10 	call	0x2118	; 0x2118 <__fp_pscA>
    1f14:	40 f0       	brcs	.+16     	; 0x1f26 <__divsf3+0x24>
    1f16:	29 f4       	brne	.+10     	; 0x1f22 <__divsf3+0x20>
    1f18:	5f 3f       	cpi	r21, 0xFF	; 255
    1f1a:	29 f0       	breq	.+10     	; 0x1f26 <__divsf3+0x24>
    1f1c:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__fp_inf>
    1f20:	51 11       	cpse	r21, r1
    1f22:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__fp_szero>
    1f26:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__fp_nan>

00001f2a <__divsf3x>:
    1f2a:	0e 94 ab 10 	call	0x2156	; 0x2156 <__fp_split3>
    1f2e:	68 f3       	brcs	.-38     	; 0x1f0a <__divsf3+0x8>

00001f30 <__divsf3_pse>:
    1f30:	99 23       	and	r25, r25
    1f32:	b1 f3       	breq	.-20     	; 0x1f20 <__divsf3+0x1e>
    1f34:	55 23       	and	r21, r21
    1f36:	91 f3       	breq	.-28     	; 0x1f1c <__divsf3+0x1a>
    1f38:	95 1b       	sub	r25, r21
    1f3a:	55 0b       	sbc	r21, r21
    1f3c:	bb 27       	eor	r27, r27
    1f3e:	aa 27       	eor	r26, r26
    1f40:	62 17       	cp	r22, r18
    1f42:	73 07       	cpc	r23, r19
    1f44:	84 07       	cpc	r24, r20
    1f46:	38 f0       	brcs	.+14     	; 0x1f56 <__divsf3_pse+0x26>
    1f48:	9f 5f       	subi	r25, 0xFF	; 255
    1f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4c:	22 0f       	add	r18, r18
    1f4e:	33 1f       	adc	r19, r19
    1f50:	44 1f       	adc	r20, r20
    1f52:	aa 1f       	adc	r26, r26
    1f54:	a9 f3       	breq	.-22     	; 0x1f40 <__divsf3_pse+0x10>
    1f56:	35 d0       	rcall	.+106    	; 0x1fc2 <__divsf3_pse+0x92>
    1f58:	0e 2e       	mov	r0, r30
    1f5a:	3a f0       	brmi	.+14     	; 0x1f6a <__divsf3_pse+0x3a>
    1f5c:	e0 e8       	ldi	r30, 0x80	; 128
    1f5e:	32 d0       	rcall	.+100    	; 0x1fc4 <__divsf3_pse+0x94>
    1f60:	91 50       	subi	r25, 0x01	; 1
    1f62:	50 40       	sbci	r21, 0x00	; 0
    1f64:	e6 95       	lsr	r30
    1f66:	00 1c       	adc	r0, r0
    1f68:	ca f7       	brpl	.-14     	; 0x1f5c <__divsf3_pse+0x2c>
    1f6a:	2b d0       	rcall	.+86     	; 0x1fc2 <__divsf3_pse+0x92>
    1f6c:	fe 2f       	mov	r31, r30
    1f6e:	29 d0       	rcall	.+82     	; 0x1fc2 <__divsf3_pse+0x92>
    1f70:	66 0f       	add	r22, r22
    1f72:	77 1f       	adc	r23, r23
    1f74:	88 1f       	adc	r24, r24
    1f76:	bb 1f       	adc	r27, r27
    1f78:	26 17       	cp	r18, r22
    1f7a:	37 07       	cpc	r19, r23
    1f7c:	48 07       	cpc	r20, r24
    1f7e:	ab 07       	cpc	r26, r27
    1f80:	b0 e8       	ldi	r27, 0x80	; 128
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <__divsf3_pse+0x56>
    1f84:	bb 0b       	sbc	r27, r27
    1f86:	80 2d       	mov	r24, r0
    1f88:	bf 01       	movw	r22, r30
    1f8a:	ff 27       	eor	r31, r31
    1f8c:	93 58       	subi	r25, 0x83	; 131
    1f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f90:	3a f0       	brmi	.+14     	; 0x1fa0 <__divsf3_pse+0x70>
    1f92:	9e 3f       	cpi	r25, 0xFE	; 254
    1f94:	51 05       	cpc	r21, r1
    1f96:	78 f0       	brcs	.+30     	; 0x1fb6 <__divsf3_pse+0x86>
    1f98:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__fp_inf>
    1f9c:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__fp_szero>
    1fa0:	5f 3f       	cpi	r21, 0xFF	; 255
    1fa2:	e4 f3       	brlt	.-8      	; 0x1f9c <__divsf3_pse+0x6c>
    1fa4:	98 3e       	cpi	r25, 0xE8	; 232
    1fa6:	d4 f3       	brlt	.-12     	; 0x1f9c <__divsf3_pse+0x6c>
    1fa8:	86 95       	lsr	r24
    1faa:	77 95       	ror	r23
    1fac:	67 95       	ror	r22
    1fae:	b7 95       	ror	r27
    1fb0:	f7 95       	ror	r31
    1fb2:	9f 5f       	subi	r25, 0xFF	; 255
    1fb4:	c9 f7       	brne	.-14     	; 0x1fa8 <__divsf3_pse+0x78>
    1fb6:	88 0f       	add	r24, r24
    1fb8:	91 1d       	adc	r25, r1
    1fba:	96 95       	lsr	r25
    1fbc:	87 95       	ror	r24
    1fbe:	97 f9       	bld	r25, 7
    1fc0:	08 95       	ret
    1fc2:	e1 e0       	ldi	r30, 0x01	; 1
    1fc4:	66 0f       	add	r22, r22
    1fc6:	77 1f       	adc	r23, r23
    1fc8:	88 1f       	adc	r24, r24
    1fca:	bb 1f       	adc	r27, r27
    1fcc:	62 17       	cp	r22, r18
    1fce:	73 07       	cpc	r23, r19
    1fd0:	84 07       	cpc	r24, r20
    1fd2:	ba 07       	cpc	r27, r26
    1fd4:	20 f0       	brcs	.+8      	; 0x1fde <__divsf3_pse+0xae>
    1fd6:	62 1b       	sub	r22, r18
    1fd8:	73 0b       	sbc	r23, r19
    1fda:	84 0b       	sbc	r24, r20
    1fdc:	ba 0b       	sbc	r27, r26
    1fde:	ee 1f       	adc	r30, r30
    1fe0:	88 f7       	brcc	.-30     	; 0x1fc4 <__divsf3_pse+0x94>
    1fe2:	e0 95       	com	r30
    1fe4:	08 95       	ret

00001fe6 <__fixunssfsi>:
    1fe6:	0e 94 b3 10 	call	0x2166	; 0x2166 <__fp_splitA>
    1fea:	88 f0       	brcs	.+34     	; 0x200e <__fixunssfsi+0x28>
    1fec:	9f 57       	subi	r25, 0x7F	; 127
    1fee:	98 f0       	brcs	.+38     	; 0x2016 <__fixunssfsi+0x30>
    1ff0:	b9 2f       	mov	r27, r25
    1ff2:	99 27       	eor	r25, r25
    1ff4:	b7 51       	subi	r27, 0x17	; 23
    1ff6:	b0 f0       	brcs	.+44     	; 0x2024 <__fixunssfsi+0x3e>
    1ff8:	e1 f0       	breq	.+56     	; 0x2032 <__fixunssfsi+0x4c>
    1ffa:	66 0f       	add	r22, r22
    1ffc:	77 1f       	adc	r23, r23
    1ffe:	88 1f       	adc	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	1a f0       	brmi	.+6      	; 0x200a <__fixunssfsi+0x24>
    2004:	ba 95       	dec	r27
    2006:	c9 f7       	brne	.-14     	; 0x1ffa <__fixunssfsi+0x14>
    2008:	14 c0       	rjmp	.+40     	; 0x2032 <__fixunssfsi+0x4c>
    200a:	b1 30       	cpi	r27, 0x01	; 1
    200c:	91 f0       	breq	.+36     	; 0x2032 <__fixunssfsi+0x4c>
    200e:	0e 94 cd 10 	call	0x219a	; 0x219a <__fp_zero>
    2012:	b1 e0       	ldi	r27, 0x01	; 1
    2014:	08 95       	ret
    2016:	0c 94 cd 10 	jmp	0x219a	; 0x219a <__fp_zero>
    201a:	67 2f       	mov	r22, r23
    201c:	78 2f       	mov	r23, r24
    201e:	88 27       	eor	r24, r24
    2020:	b8 5f       	subi	r27, 0xF8	; 248
    2022:	39 f0       	breq	.+14     	; 0x2032 <__fixunssfsi+0x4c>
    2024:	b9 3f       	cpi	r27, 0xF9	; 249
    2026:	cc f3       	brlt	.-14     	; 0x201a <__fixunssfsi+0x34>
    2028:	86 95       	lsr	r24
    202a:	77 95       	ror	r23
    202c:	67 95       	ror	r22
    202e:	b3 95       	inc	r27
    2030:	d9 f7       	brne	.-10     	; 0x2028 <__fixunssfsi+0x42>
    2032:	3e f4       	brtc	.+14     	; 0x2042 <__fixunssfsi+0x5c>
    2034:	90 95       	com	r25
    2036:	80 95       	com	r24
    2038:	70 95       	com	r23
    203a:	61 95       	neg	r22
    203c:	7f 4f       	sbci	r23, 0xFF	; 255
    203e:	8f 4f       	sbci	r24, 0xFF	; 255
    2040:	9f 4f       	sbci	r25, 0xFF	; 255
    2042:	08 95       	ret

00002044 <__floatunsisf>:
    2044:	e8 94       	clt
    2046:	09 c0       	rjmp	.+18     	; 0x205a <__floatsisf+0x12>

00002048 <__floatsisf>:
    2048:	97 fb       	bst	r25, 7
    204a:	3e f4       	brtc	.+14     	; 0x205a <__floatsisf+0x12>
    204c:	90 95       	com	r25
    204e:	80 95       	com	r24
    2050:	70 95       	com	r23
    2052:	61 95       	neg	r22
    2054:	7f 4f       	sbci	r23, 0xFF	; 255
    2056:	8f 4f       	sbci	r24, 0xFF	; 255
    2058:	9f 4f       	sbci	r25, 0xFF	; 255
    205a:	99 23       	and	r25, r25
    205c:	a9 f0       	breq	.+42     	; 0x2088 <__floatsisf+0x40>
    205e:	f9 2f       	mov	r31, r25
    2060:	96 e9       	ldi	r25, 0x96	; 150
    2062:	bb 27       	eor	r27, r27
    2064:	93 95       	inc	r25
    2066:	f6 95       	lsr	r31
    2068:	87 95       	ror	r24
    206a:	77 95       	ror	r23
    206c:	67 95       	ror	r22
    206e:	b7 95       	ror	r27
    2070:	f1 11       	cpse	r31, r1
    2072:	f8 cf       	rjmp	.-16     	; 0x2064 <__floatsisf+0x1c>
    2074:	fa f4       	brpl	.+62     	; 0x20b4 <__floatsisf+0x6c>
    2076:	bb 0f       	add	r27, r27
    2078:	11 f4       	brne	.+4      	; 0x207e <__floatsisf+0x36>
    207a:	60 ff       	sbrs	r22, 0
    207c:	1b c0       	rjmp	.+54     	; 0x20b4 <__floatsisf+0x6c>
    207e:	6f 5f       	subi	r22, 0xFF	; 255
    2080:	7f 4f       	sbci	r23, 0xFF	; 255
    2082:	8f 4f       	sbci	r24, 0xFF	; 255
    2084:	9f 4f       	sbci	r25, 0xFF	; 255
    2086:	16 c0       	rjmp	.+44     	; 0x20b4 <__floatsisf+0x6c>
    2088:	88 23       	and	r24, r24
    208a:	11 f0       	breq	.+4      	; 0x2090 <__floatsisf+0x48>
    208c:	96 e9       	ldi	r25, 0x96	; 150
    208e:	11 c0       	rjmp	.+34     	; 0x20b2 <__floatsisf+0x6a>
    2090:	77 23       	and	r23, r23
    2092:	21 f0       	breq	.+8      	; 0x209c <__floatsisf+0x54>
    2094:	9e e8       	ldi	r25, 0x8E	; 142
    2096:	87 2f       	mov	r24, r23
    2098:	76 2f       	mov	r23, r22
    209a:	05 c0       	rjmp	.+10     	; 0x20a6 <__floatsisf+0x5e>
    209c:	66 23       	and	r22, r22
    209e:	71 f0       	breq	.+28     	; 0x20bc <__floatsisf+0x74>
    20a0:	96 e8       	ldi	r25, 0x86	; 134
    20a2:	86 2f       	mov	r24, r22
    20a4:	70 e0       	ldi	r23, 0x00	; 0
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	2a f0       	brmi	.+10     	; 0x20b4 <__floatsisf+0x6c>
    20aa:	9a 95       	dec	r25
    20ac:	66 0f       	add	r22, r22
    20ae:	77 1f       	adc	r23, r23
    20b0:	88 1f       	adc	r24, r24
    20b2:	da f7       	brpl	.-10     	; 0x20aa <__floatsisf+0x62>
    20b4:	88 0f       	add	r24, r24
    20b6:	96 95       	lsr	r25
    20b8:	87 95       	ror	r24
    20ba:	97 f9       	bld	r25, 7
    20bc:	08 95       	ret

000020be <__fp_cmp>:
    20be:	99 0f       	add	r25, r25
    20c0:	00 08       	sbc	r0, r0
    20c2:	55 0f       	add	r21, r21
    20c4:	aa 0b       	sbc	r26, r26
    20c6:	e0 e8       	ldi	r30, 0x80	; 128
    20c8:	fe ef       	ldi	r31, 0xFE	; 254
    20ca:	16 16       	cp	r1, r22
    20cc:	17 06       	cpc	r1, r23
    20ce:	e8 07       	cpc	r30, r24
    20d0:	f9 07       	cpc	r31, r25
    20d2:	c0 f0       	brcs	.+48     	; 0x2104 <__fp_cmp+0x46>
    20d4:	12 16       	cp	r1, r18
    20d6:	13 06       	cpc	r1, r19
    20d8:	e4 07       	cpc	r30, r20
    20da:	f5 07       	cpc	r31, r21
    20dc:	98 f0       	brcs	.+38     	; 0x2104 <__fp_cmp+0x46>
    20de:	62 1b       	sub	r22, r18
    20e0:	73 0b       	sbc	r23, r19
    20e2:	84 0b       	sbc	r24, r20
    20e4:	95 0b       	sbc	r25, r21
    20e6:	39 f4       	brne	.+14     	; 0x20f6 <__fp_cmp+0x38>
    20e8:	0a 26       	eor	r0, r26
    20ea:	61 f0       	breq	.+24     	; 0x2104 <__fp_cmp+0x46>
    20ec:	23 2b       	or	r18, r19
    20ee:	24 2b       	or	r18, r20
    20f0:	25 2b       	or	r18, r21
    20f2:	21 f4       	brne	.+8      	; 0x20fc <__fp_cmp+0x3e>
    20f4:	08 95       	ret
    20f6:	0a 26       	eor	r0, r26
    20f8:	09 f4       	brne	.+2      	; 0x20fc <__fp_cmp+0x3e>
    20fa:	a1 40       	sbci	r26, 0x01	; 1
    20fc:	a6 95       	lsr	r26
    20fe:	8f ef       	ldi	r24, 0xFF	; 255
    2100:	81 1d       	adc	r24, r1
    2102:	81 1d       	adc	r24, r1
    2104:	08 95       	ret

00002106 <__fp_inf>:
    2106:	97 f9       	bld	r25, 7
    2108:	9f 67       	ori	r25, 0x7F	; 127
    210a:	80 e8       	ldi	r24, 0x80	; 128
    210c:	70 e0       	ldi	r23, 0x00	; 0
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	08 95       	ret

00002112 <__fp_nan>:
    2112:	9f ef       	ldi	r25, 0xFF	; 255
    2114:	80 ec       	ldi	r24, 0xC0	; 192
    2116:	08 95       	ret

00002118 <__fp_pscA>:
    2118:	00 24       	eor	r0, r0
    211a:	0a 94       	dec	r0
    211c:	16 16       	cp	r1, r22
    211e:	17 06       	cpc	r1, r23
    2120:	18 06       	cpc	r1, r24
    2122:	09 06       	cpc	r0, r25
    2124:	08 95       	ret

00002126 <__fp_pscB>:
    2126:	00 24       	eor	r0, r0
    2128:	0a 94       	dec	r0
    212a:	12 16       	cp	r1, r18
    212c:	13 06       	cpc	r1, r19
    212e:	14 06       	cpc	r1, r20
    2130:	05 06       	cpc	r0, r21
    2132:	08 95       	ret

00002134 <__fp_round>:
    2134:	09 2e       	mov	r0, r25
    2136:	03 94       	inc	r0
    2138:	00 0c       	add	r0, r0
    213a:	11 f4       	brne	.+4      	; 0x2140 <__fp_round+0xc>
    213c:	88 23       	and	r24, r24
    213e:	52 f0       	brmi	.+20     	; 0x2154 <__fp_round+0x20>
    2140:	bb 0f       	add	r27, r27
    2142:	40 f4       	brcc	.+16     	; 0x2154 <__fp_round+0x20>
    2144:	bf 2b       	or	r27, r31
    2146:	11 f4       	brne	.+4      	; 0x214c <__fp_round+0x18>
    2148:	60 ff       	sbrs	r22, 0
    214a:	04 c0       	rjmp	.+8      	; 0x2154 <__fp_round+0x20>
    214c:	6f 5f       	subi	r22, 0xFF	; 255
    214e:	7f 4f       	sbci	r23, 0xFF	; 255
    2150:	8f 4f       	sbci	r24, 0xFF	; 255
    2152:	9f 4f       	sbci	r25, 0xFF	; 255
    2154:	08 95       	ret

00002156 <__fp_split3>:
    2156:	57 fd       	sbrc	r21, 7
    2158:	90 58       	subi	r25, 0x80	; 128
    215a:	44 0f       	add	r20, r20
    215c:	55 1f       	adc	r21, r21
    215e:	59 f0       	breq	.+22     	; 0x2176 <__fp_splitA+0x10>
    2160:	5f 3f       	cpi	r21, 0xFF	; 255
    2162:	71 f0       	breq	.+28     	; 0x2180 <__fp_splitA+0x1a>
    2164:	47 95       	ror	r20

00002166 <__fp_splitA>:
    2166:	88 0f       	add	r24, r24
    2168:	97 fb       	bst	r25, 7
    216a:	99 1f       	adc	r25, r25
    216c:	61 f0       	breq	.+24     	; 0x2186 <__fp_splitA+0x20>
    216e:	9f 3f       	cpi	r25, 0xFF	; 255
    2170:	79 f0       	breq	.+30     	; 0x2190 <__fp_splitA+0x2a>
    2172:	87 95       	ror	r24
    2174:	08 95       	ret
    2176:	12 16       	cp	r1, r18
    2178:	13 06       	cpc	r1, r19
    217a:	14 06       	cpc	r1, r20
    217c:	55 1f       	adc	r21, r21
    217e:	f2 cf       	rjmp	.-28     	; 0x2164 <__fp_split3+0xe>
    2180:	46 95       	lsr	r20
    2182:	f1 df       	rcall	.-30     	; 0x2166 <__fp_splitA>
    2184:	08 c0       	rjmp	.+16     	; 0x2196 <__fp_splitA+0x30>
    2186:	16 16       	cp	r1, r22
    2188:	17 06       	cpc	r1, r23
    218a:	18 06       	cpc	r1, r24
    218c:	99 1f       	adc	r25, r25
    218e:	f1 cf       	rjmp	.-30     	; 0x2172 <__fp_splitA+0xc>
    2190:	86 95       	lsr	r24
    2192:	71 05       	cpc	r23, r1
    2194:	61 05       	cpc	r22, r1
    2196:	08 94       	sec
    2198:	08 95       	ret

0000219a <__fp_zero>:
    219a:	e8 94       	clt

0000219c <__fp_szero>:
    219c:	bb 27       	eor	r27, r27
    219e:	66 27       	eor	r22, r22
    21a0:	77 27       	eor	r23, r23
    21a2:	cb 01       	movw	r24, r22
    21a4:	97 f9       	bld	r25, 7
    21a6:	08 95       	ret

000021a8 <__gesf2>:
    21a8:	0e 94 5f 10 	call	0x20be	; 0x20be <__fp_cmp>
    21ac:	08 f4       	brcc	.+2      	; 0x21b0 <__gesf2+0x8>
    21ae:	8f ef       	ldi	r24, 0xFF	; 255
    21b0:	08 95       	ret

000021b2 <__mulsf3>:
    21b2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <__mulsf3x>
    21b6:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <__fp_round>
    21ba:	0e 94 8c 10 	call	0x2118	; 0x2118 <__fp_pscA>
    21be:	38 f0       	brcs	.+14     	; 0x21ce <__mulsf3+0x1c>
    21c0:	0e 94 93 10 	call	0x2126	; 0x2126 <__fp_pscB>
    21c4:	20 f0       	brcs	.+8      	; 0x21ce <__mulsf3+0x1c>
    21c6:	95 23       	and	r25, r21
    21c8:	11 f0       	breq	.+4      	; 0x21ce <__mulsf3+0x1c>
    21ca:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__fp_inf>
    21ce:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__fp_nan>
    21d2:	11 24       	eor	r1, r1
    21d4:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__fp_szero>

000021d8 <__mulsf3x>:
    21d8:	0e 94 ab 10 	call	0x2156	; 0x2156 <__fp_split3>
    21dc:	70 f3       	brcs	.-36     	; 0x21ba <__mulsf3+0x8>

000021de <__mulsf3_pse>:
    21de:	95 9f       	mul	r25, r21
    21e0:	c1 f3       	breq	.-16     	; 0x21d2 <__mulsf3+0x20>
    21e2:	95 0f       	add	r25, r21
    21e4:	50 e0       	ldi	r21, 0x00	; 0
    21e6:	55 1f       	adc	r21, r21
    21e8:	62 9f       	mul	r22, r18
    21ea:	f0 01       	movw	r30, r0
    21ec:	72 9f       	mul	r23, r18
    21ee:	bb 27       	eor	r27, r27
    21f0:	f0 0d       	add	r31, r0
    21f2:	b1 1d       	adc	r27, r1
    21f4:	63 9f       	mul	r22, r19
    21f6:	aa 27       	eor	r26, r26
    21f8:	f0 0d       	add	r31, r0
    21fa:	b1 1d       	adc	r27, r1
    21fc:	aa 1f       	adc	r26, r26
    21fe:	64 9f       	mul	r22, r20
    2200:	66 27       	eor	r22, r22
    2202:	b0 0d       	add	r27, r0
    2204:	a1 1d       	adc	r26, r1
    2206:	66 1f       	adc	r22, r22
    2208:	82 9f       	mul	r24, r18
    220a:	22 27       	eor	r18, r18
    220c:	b0 0d       	add	r27, r0
    220e:	a1 1d       	adc	r26, r1
    2210:	62 1f       	adc	r22, r18
    2212:	73 9f       	mul	r23, r19
    2214:	b0 0d       	add	r27, r0
    2216:	a1 1d       	adc	r26, r1
    2218:	62 1f       	adc	r22, r18
    221a:	83 9f       	mul	r24, r19
    221c:	a0 0d       	add	r26, r0
    221e:	61 1d       	adc	r22, r1
    2220:	22 1f       	adc	r18, r18
    2222:	74 9f       	mul	r23, r20
    2224:	33 27       	eor	r19, r19
    2226:	a0 0d       	add	r26, r0
    2228:	61 1d       	adc	r22, r1
    222a:	23 1f       	adc	r18, r19
    222c:	84 9f       	mul	r24, r20
    222e:	60 0d       	add	r22, r0
    2230:	21 1d       	adc	r18, r1
    2232:	82 2f       	mov	r24, r18
    2234:	76 2f       	mov	r23, r22
    2236:	6a 2f       	mov	r22, r26
    2238:	11 24       	eor	r1, r1
    223a:	9f 57       	subi	r25, 0x7F	; 127
    223c:	50 40       	sbci	r21, 0x00	; 0
    223e:	9a f0       	brmi	.+38     	; 0x2266 <__mulsf3_pse+0x88>
    2240:	f1 f0       	breq	.+60     	; 0x227e <__mulsf3_pse+0xa0>
    2242:	88 23       	and	r24, r24
    2244:	4a f0       	brmi	.+18     	; 0x2258 <__mulsf3_pse+0x7a>
    2246:	ee 0f       	add	r30, r30
    2248:	ff 1f       	adc	r31, r31
    224a:	bb 1f       	adc	r27, r27
    224c:	66 1f       	adc	r22, r22
    224e:	77 1f       	adc	r23, r23
    2250:	88 1f       	adc	r24, r24
    2252:	91 50       	subi	r25, 0x01	; 1
    2254:	50 40       	sbci	r21, 0x00	; 0
    2256:	a9 f7       	brne	.-22     	; 0x2242 <__mulsf3_pse+0x64>
    2258:	9e 3f       	cpi	r25, 0xFE	; 254
    225a:	51 05       	cpc	r21, r1
    225c:	80 f0       	brcs	.+32     	; 0x227e <__mulsf3_pse+0xa0>
    225e:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__fp_inf>
    2262:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__fp_szero>
    2266:	5f 3f       	cpi	r21, 0xFF	; 255
    2268:	e4 f3       	brlt	.-8      	; 0x2262 <__mulsf3_pse+0x84>
    226a:	98 3e       	cpi	r25, 0xE8	; 232
    226c:	d4 f3       	brlt	.-12     	; 0x2262 <__mulsf3_pse+0x84>
    226e:	86 95       	lsr	r24
    2270:	77 95       	ror	r23
    2272:	67 95       	ror	r22
    2274:	b7 95       	ror	r27
    2276:	f7 95       	ror	r31
    2278:	e7 95       	ror	r30
    227a:	9f 5f       	subi	r25, 0xFF	; 255
    227c:	c1 f7       	brne	.-16     	; 0x226e <__mulsf3_pse+0x90>
    227e:	fe 2b       	or	r31, r30
    2280:	88 0f       	add	r24, r24
    2282:	91 1d       	adc	r25, r1
    2284:	96 95       	lsr	r25
    2286:	87 95       	ror	r24
    2288:	97 f9       	bld	r25, 7
    228a:	08 95       	ret

0000228c <__udivmodsi4>:
    228c:	a1 e2       	ldi	r26, 0x21	; 33
    228e:	1a 2e       	mov	r1, r26
    2290:	aa 1b       	sub	r26, r26
    2292:	bb 1b       	sub	r27, r27
    2294:	fd 01       	movw	r30, r26
    2296:	0d c0       	rjmp	.+26     	; 0x22b2 <__udivmodsi4_ep>

00002298 <__udivmodsi4_loop>:
    2298:	aa 1f       	adc	r26, r26
    229a:	bb 1f       	adc	r27, r27
    229c:	ee 1f       	adc	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	a2 17       	cp	r26, r18
    22a2:	b3 07       	cpc	r27, r19
    22a4:	e4 07       	cpc	r30, r20
    22a6:	f5 07       	cpc	r31, r21
    22a8:	20 f0       	brcs	.+8      	; 0x22b2 <__udivmodsi4_ep>
    22aa:	a2 1b       	sub	r26, r18
    22ac:	b3 0b       	sbc	r27, r19
    22ae:	e4 0b       	sbc	r30, r20
    22b0:	f5 0b       	sbc	r31, r21

000022b2 <__udivmodsi4_ep>:
    22b2:	66 1f       	adc	r22, r22
    22b4:	77 1f       	adc	r23, r23
    22b6:	88 1f       	adc	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	1a 94       	dec	r1
    22bc:	69 f7       	brne	.-38     	; 0x2298 <__udivmodsi4_loop>
    22be:	60 95       	com	r22
    22c0:	70 95       	com	r23
    22c2:	80 95       	com	r24
    22c4:	90 95       	com	r25
    22c6:	9b 01       	movw	r18, r22
    22c8:	ac 01       	movw	r20, r24
    22ca:	bd 01       	movw	r22, r26
    22cc:	cf 01       	movw	r24, r30
    22ce:	08 95       	ret

000022d0 <__tablejump2__>:
    22d0:	ee 0f       	add	r30, r30
    22d2:	ff 1f       	adc	r31, r31
    22d4:	05 90       	lpm	r0, Z+
    22d6:	f4 91       	lpm	r31, Z
    22d8:	e0 2d       	mov	r30, r0
    22da:	09 94       	ijmp

000022dc <__umulhisi3>:
    22dc:	a2 9f       	mul	r26, r18
    22de:	b0 01       	movw	r22, r0
    22e0:	b3 9f       	mul	r27, r19
    22e2:	c0 01       	movw	r24, r0
    22e4:	a3 9f       	mul	r26, r19
    22e6:	70 0d       	add	r23, r0
    22e8:	81 1d       	adc	r24, r1
    22ea:	11 24       	eor	r1, r1
    22ec:	91 1d       	adc	r25, r1
    22ee:	b2 9f       	mul	r27, r18
    22f0:	70 0d       	add	r23, r0
    22f2:	81 1d       	adc	r24, r1
    22f4:	11 24       	eor	r1, r1
    22f6:	91 1d       	adc	r25, r1
    22f8:	08 95       	ret

000022fa <__muluhisi3>:
    22fa:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__umulhisi3>
    22fe:	a5 9f       	mul	r26, r21
    2300:	90 0d       	add	r25, r0
    2302:	b4 9f       	mul	r27, r20
    2304:	90 0d       	add	r25, r0
    2306:	a4 9f       	mul	r26, r20
    2308:	80 0d       	add	r24, r0
    230a:	91 1d       	adc	r25, r1
    230c:	11 24       	eor	r1, r1
    230e:	08 95       	ret

00002310 <strcmp>:
    2310:	fb 01       	movw	r30, r22
    2312:	dc 01       	movw	r26, r24
    2314:	8d 91       	ld	r24, X+
    2316:	01 90       	ld	r0, Z+
    2318:	80 19       	sub	r24, r0
    231a:	01 10       	cpse	r0, r1
    231c:	d9 f3       	breq	.-10     	; 0x2314 <strcmp+0x4>
    231e:	99 0b       	sbc	r25, r25
    2320:	08 95       	ret

00002322 <strcpy>:
    2322:	fb 01       	movw	r30, r22
    2324:	dc 01       	movw	r26, r24
    2326:	01 90       	ld	r0, Z+
    2328:	0d 92       	st	X+, r0
    232a:	00 20       	and	r0, r0
    232c:	e1 f7       	brne	.-8      	; 0x2326 <strcpy+0x4>
    232e:	08 95       	ret

00002330 <_exit>:
    2330:	f8 94       	cli

00002332 <__stop_program>:
    2332:	ff cf       	rjmp	.-2      	; 0x2332 <__stop_program>
