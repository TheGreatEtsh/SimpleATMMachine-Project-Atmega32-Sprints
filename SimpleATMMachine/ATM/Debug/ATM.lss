
ATM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000470  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800060  00800060  000004e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc7  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000894  00000000  00000000  00001627  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b62  00000000  00000000  00001ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00002a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000779  00000000  00000000  00002d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001003  00000000  00000000  000034dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000044e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_1>
   8:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_2>
   c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 38       	cpi	r26, 0x85	; 133
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 36 02 	jmp	0x46c	; 0x46c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 * Author : Ahmed Hesham
 */ 


int main(void)
{
  92:	ff cf       	rjmp	.-2      	; 0x92 <main>

00000094 <DIO_write>:
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
	if (u8_a_pinNumber < 8)
  94:	68 30       	cpi	r22, 0x08	; 8
  96:	08 f0       	brcs	.+2      	; 0x9a <DIO_write+0x6>
  98:	80 c0       	rjmp	.+256    	; 0x19a <DIO_write+0x106>
	{
		switch(u8_a_value)
  9a:	44 23       	and	r20, r20
  9c:	21 f0       	breq	.+8      	; 0xa6 <DIO_write+0x12>
  9e:	41 30       	cpi	r20, 0x01	; 1
  a0:	09 f4       	brne	.+2      	; 0xa4 <DIO_write+0x10>
  a2:	40 c0       	rjmp	.+128    	; 0x124 <DIO_write+0x90>
  a4:	7c c0       	rjmp	.+248    	; 0x19e <DIO_write+0x10a>
		{
			case LOW:
			switch(u8_a_portNumber)
  a6:	82 34       	cpi	r24, 0x42	; 66
  a8:	b1 f0       	breq	.+44     	; 0xd6 <DIO_write+0x42>
  aa:	18 f4       	brcc	.+6      	; 0xb2 <DIO_write+0x1e>
  ac:	81 34       	cpi	r24, 0x41	; 65
  ae:	31 f0       	breq	.+12     	; 0xbc <DIO_write+0x28>
  b0:	78 c0       	rjmp	.+240    	; 0x1a2 <DIO_write+0x10e>
  b2:	83 34       	cpi	r24, 0x43	; 67
  b4:	e9 f0       	breq	.+58     	; 0xf0 <DIO_write+0x5c>
  b6:	84 34       	cpi	r24, 0x44	; 68
  b8:	41 f1       	breq	.+80     	; 0x10a <DIO_write+0x76>
  ba:	73 c0       	rjmp	.+230    	; 0x1a2 <DIO_write+0x10e>
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
  bc:	2b b3       	in	r18, 0x1b	; 27
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_write+0x34>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_write+0x30>
  cc:	80 95       	com	r24
  ce:	82 23       	and	r24, r18
  d0:	8b bb       	out	0x1b, r24	; 27
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
  d2:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_value)
		{
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
  d4:	08 95       	ret
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
  d6:	28 b3       	in	r18, 0x18	; 24
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_write+0x4e>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_write+0x4a>
  e6:	80 95       	com	r24
  e8:	82 23       	and	r24, r18
  ea:	88 bb       	out	0x18, r24	; 24
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
  ec:	80 e0       	ldi	r24, 0x00	; 0
		{
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
  ee:	08 95       	ret
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
  f0:	25 b3       	in	r18, 0x15	; 21
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_write+0x68>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_write+0x64>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	85 bb       	out	0x15, r24	; 21
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 106:	80 e0       	ldi	r24, 0x00	; 0
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
 108:	08 95       	ret
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
 10a:	22 b3       	in	r18, 0x12	; 18
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_write+0x82>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_write+0x7e>
 11a:	80 95       	com	r24
 11c:	82 23       	and	r24, r18
 11e:	82 bb       	out	0x12, r24	; 18
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 120:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
 122:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;		break;
			}
			break;
				
			case HIGH:
			switch(u8_a_portNumber)
 124:	82 34       	cpi	r24, 0x42	; 66
 126:	a9 f0       	breq	.+42     	; 0x152 <DIO_write+0xbe>
 128:	18 f4       	brcc	.+6      	; 0x130 <DIO_write+0x9c>
 12a:	81 34       	cpi	r24, 0x41	; 65
 12c:	31 f0       	breq	.+12     	; 0x13a <DIO_write+0xa6>
 12e:	3b c0       	rjmp	.+118    	; 0x1a6 <DIO_write+0x112>
 130:	83 34       	cpi	r24, 0x43	; 67
 132:	d9 f0       	breq	.+54     	; 0x16a <DIO_write+0xd6>
 134:	84 34       	cpi	r24, 0x44	; 68
 136:	29 f1       	breq	.+74     	; 0x182 <DIO_write+0xee>
 138:	36 c0       	rjmp	.+108    	; 0x1a6 <DIO_write+0x112>
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
 13a:	2b b3       	in	r18, 0x1b	; 27
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_write+0xb2>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_write+0xae>
 14a:	82 2b       	or	r24, r18
 14c:	8b bb       	out	0x1b, r24	; 27
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 14e:	80 e0       	ldi	r24, 0x00	; 0
			break;
				
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
 150:	08 95       	ret
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
 152:	28 b3       	in	r18, 0x18	; 24
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_write+0xca>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_write+0xc6>
 162:	82 2b       	or	r24, r18
 164:	88 bb       	out	0x18, r24	; 24
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 166:	80 e0       	ldi	r24, 0x00	; 0
				
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
 168:	08 95       	ret
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
 16a:	25 b3       	in	r18, 0x15	; 21
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_write+0xe2>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_write+0xde>
 17a:	82 2b       	or	r24, r18
 17c:	85 bb       	out	0x15, r24	; 21
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 17e:	80 e0       	ldi	r24, 0x00	; 0
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
 180:	08 95       	ret
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
 182:	22 b3       	in	r18, 0x12	; 18
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_write+0xfa>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_write+0xf6>
 192:	82 2b       	or	r24, r18
 194:	82 bb       	out	0x12, r24	; 18
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 196:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
 198:	08 95       	ret
				break;
		}
	}
	else
	{
		error = WRONG_PIN_NUMBER;
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;		break;
			}
			break;
				
			default:
				error = WRONG_VALUE;
 19e:	83 e0       	ldi	r24, 0x03	; 3
 1a0:	08 95       	ret
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;		break;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	08 95       	ret
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;		break;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;

}
 1a8:	08 95       	ret

000001aa <__vector_1>:
	}
}


ISR(EXT_INT_0)
{
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	2f 93       	push	r18
 1b6:	3f 93       	push	r19
 1b8:	4f 93       	push	r20
 1ba:	5f 93       	push	r21
 1bc:	6f 93       	push	r22
 1be:	7f 93       	push	r23
 1c0:	8f 93       	push	r24
 1c2:	9f 93       	push	r25
 1c4:	af 93       	push	r26
 1c6:	bf 93       	push	r27
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
	if (EXTINT_0_callBack != nullPtr)
 1cc:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <EXTINT_0_callBack>
 1d0:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <EXTINT_0_callBack+0x1>
 1d4:	30 97       	sbiw	r30, 0x00	; 0
 1d6:	09 f0       	breq	.+2      	; 0x1da <__vector_1+0x30>
	{
		EXTINT_0_callBack();
 1d8:	09 95       	icall
	}
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <__vector_2>:

ISR(EXT_INT_1)
{
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	4f 93       	push	r20
 20c:	5f 93       	push	r21
 20e:	6f 93       	push	r22
 210:	7f 93       	push	r23
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
	if (EXTINT_1_callBack != nullPtr)
 21e:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <EXTINT_1_callBack>
 222:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <EXTINT_1_callBack+0x1>
 226:	30 97       	sbiw	r30, 0x00	; 0
 228:	09 f0       	breq	.+2      	; 0x22c <__vector_2+0x30>
	{
		EXTINT_1_callBack();
 22a:	09 95       	icall
	}
}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_3>:

ISR(EXT_INT_2)
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
	if (EXTINT_2_callBack != nullPtr)
 270:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 274:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 278:	30 97       	sbiw	r30, 0x00	; 0
 27a:	09 f0       	breq	.+2      	; 0x27e <__vector_3+0x30>
	{
		EXTINT_2_callBack();
 27c:	09 95       	icall
	}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_11>:
	
}

#if			TIMER_0_MODE		==		OV_TIMER
ISR(TIMER0_OVF)
{
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
	if (u8_g_normalToPwm == 0	)
 2c2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <u8_g_normalToPwm>
 2c6:	81 11       	cpse	r24, r1
 2c8:	35 c0       	rjmp	.+106    	; 0x334 <__vector_11+0x94>
	{
		
		static u32 OVFCounter = 0;
		OVFCounter  ++;
 2ca:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <OVFCounter.1713>
 2ce:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <OVFCounter.1713+0x1>
 2d2:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <OVFCounter.1713+0x2>
 2d6:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <OVFCounter.1713+0x3>
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	a1 1d       	adc	r26, r1
 2de:	b1 1d       	adc	r27, r1
 2e0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <OVFCounter.1713>
 2e4:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <OVFCounter.1713+0x1>
 2e8:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <OVFCounter.1713+0x2>
 2ec:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <OVFCounter.1713+0x3>
		if (OVFCounter  == u32_g_timer0NumberOfOVFs)
 2f0:	40 91 7d 00 	lds	r20, 0x007D	; 0x80007d <u32_g_timer0NumberOfOVFs>
 2f4:	50 91 7e 00 	lds	r21, 0x007E	; 0x80007e <u32_g_timer0NumberOfOVFs+0x1>
 2f8:	60 91 7f 00 	lds	r22, 0x007F	; 0x80007f <u32_g_timer0NumberOfOVFs+0x2>
 2fc:	70 91 80 00 	lds	r23, 0x0080	; 0x800080 <u32_g_timer0NumberOfOVFs+0x3>
 300:	84 17       	cp	r24, r20
 302:	95 07       	cpc	r25, r21
 304:	a6 07       	cpc	r26, r22
 306:	b7 07       	cpc	r27, r23
 308:	09 f0       	breq	.+2      	; 0x30c <__vector_11+0x6c>
 30a:	4a c0       	rjmp	.+148    	; 0x3a0 <__vector_11+0x100>
		{
			if(TIMER_0_callBack != nullPtr)
 30c:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <TIMER_0_callBack>
 310:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <TIMER_0_callBack+0x1>
 314:	30 97       	sbiw	r30, 0x00	; 0
 316:	09 f0       	breq	.+2      	; 0x31a <__vector_11+0x7a>
			{
				TIMER_0_callBack();
 318:	09 95       	icall
			}
			OVFCounter  =	0;
 31a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <OVFCounter.1713>
 31e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <OVFCounter.1713+0x1>
 322:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <OVFCounter.1713+0x2>
 326:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <OVFCounter.1713+0x3>
			TCNT0 = 256 - u8_g_timer0RemTicks;
 32a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <u8_g_timer0RemTicks>
 32e:	81 95       	neg	r24
 330:	82 bf       	out	0x32, r24	; 50
 332:	36 c0       	rjmp	.+108    	; 0x3a0 <__vector_11+0x100>
		}
	}
	else
	{
		static u8 u8_gs_generatorState = 0;
		if (u8_gs_generatorState)
 334:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <u8_gs_generatorState.1714>
 338:	88 23       	and	r24, r24
 33a:	c9 f0       	breq	.+50     	; 0x36e <__vector_11+0xce>
		{
			DIO_write(PORT_D,4,LOW);
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	64 e0       	ldi	r22, 0x04	; 4
 340:	84 e4       	ldi	r24, 0x44	; 68
 342:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_write>
			DIO_write(PORT_D,5,LOW);
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	65 e0       	ldi	r22, 0x05	; 5
 34a:	84 e4       	ldi	r24, 0x44	; 68
 34c:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_write>
			TCNT0 = 256 - u16_g_offTime;
 350:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <u16_g_offTime>
 354:	81 95       	neg	r24
 356:	82 bf       	out	0x32, r24	; 50
			if (u16_g_offTime < 256)
 358:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <u16_g_offTime>
 35c:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <u16_g_offTime+0x1>
 360:	8f 3f       	cpi	r24, 0xFF	; 255
 362:	91 05       	cpc	r25, r1
 364:	09 f0       	breq	.+2      	; 0x368 <__vector_11+0xc8>
 366:	e0 f4       	brcc	.+56     	; 0x3a0 <__vector_11+0x100>
			{
				u8_gs_generatorState = 0;
 368:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <u8_gs_generatorState.1714>
 36c:	19 c0       	rjmp	.+50     	; 0x3a0 <__vector_11+0x100>
			}	
		}
		else
		{
			DIO_write(PORT_D,4, HIGH);
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	64 e0       	ldi	r22, 0x04	; 4
 372:	84 e4       	ldi	r24, 0x44	; 68
 374:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_write>
			DIO_write(PORT_D,5, HIGH);
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	65 e0       	ldi	r22, 0x05	; 5
 37c:	84 e4       	ldi	r24, 0x44	; 68
 37e:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_write>
			TCNT0 = 256 - u16_g_onTime;
 382:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <u16_g_onTime>
 386:	81 95       	neg	r24
 388:	82 bf       	out	0x32, r24	; 50
			if (u16_g_onTime < 256)
 38a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <u16_g_onTime>
 38e:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <u16_g_onTime+0x1>
 392:	8f 3f       	cpi	r24, 0xFF	; 255
 394:	91 05       	cpc	r25, r1
 396:	09 f0       	breq	.+2      	; 0x39a <__vector_11+0xfa>
 398:	18 f4       	brcc	.+6      	; 0x3a0 <__vector_11+0x100>
			{
				u8_gs_generatorState = 1;
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <u8_gs_generatorState.1714>
			}
			
		}
		
	}
}
 3a0:	ff 91       	pop	r31
 3a2:	ef 91       	pop	r30
 3a4:	bf 91       	pop	r27
 3a6:	af 91       	pop	r26
 3a8:	9f 91       	pop	r25
 3aa:	8f 91       	pop	r24
 3ac:	7f 91       	pop	r23
 3ae:	6f 91       	pop	r22
 3b0:	5f 91       	pop	r21
 3b2:	4f 91       	pop	r20
 3b4:	3f 91       	pop	r19
 3b6:	2f 91       	pop	r18
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <__vector_5>:
	}
}
#endif

ISR(TIMER2_OVF)
{		
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	2f 93       	push	r18
 3ce:	3f 93       	push	r19
 3d0:	4f 93       	push	r20
 3d2:	5f 93       	push	r21
 3d4:	6f 93       	push	r22
 3d6:	7f 93       	push	r23
 3d8:	8f 93       	push	r24
 3da:	9f 93       	push	r25
 3dc:	af 93       	push	r26
 3de:	bf 93       	push	r27
 3e0:	ef 93       	push	r30
 3e2:	ff 93       	push	r31
		static u32 OVFCounter = 0;
		OVFCounter  ++;
 3e4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <OVFCounter.1720>
 3e8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <OVFCounter.1720+0x1>
 3ec:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <OVFCounter.1720+0x2>
 3f0:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <OVFCounter.1720+0x3>
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	a1 1d       	adc	r26, r1
 3f8:	b1 1d       	adc	r27, r1
 3fa:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <OVFCounter.1720>
 3fe:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <OVFCounter.1720+0x1>
 402:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <OVFCounter.1720+0x2>
 406:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <OVFCounter.1720+0x3>
		if (OVFCounter  == u32_g_timer2NumberOfOVFs)
 40a:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <u32_g_timer2NumberOfOVFs>
 40e:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <u32_g_timer2NumberOfOVFs+0x1>
 412:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <u32_g_timer2NumberOfOVFs+0x2>
 416:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <u32_g_timer2NumberOfOVFs+0x3>
 41a:	84 17       	cp	r24, r20
 41c:	95 07       	cpc	r25, r21
 41e:	a6 07       	cpc	r26, r22
 420:	b7 07       	cpc	r27, r23
 422:	99 f4       	brne	.+38     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		{
			if(TIMER_2_callBack != nullPtr)
 424:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <TIMER_2_callBack>
 428:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <TIMER_2_callBack+0x1>
 42c:	30 97       	sbiw	r30, 0x00	; 0
 42e:	09 f0       	breq	.+2      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			{
				TIMER_2_callBack();
 430:	09 95       	icall
			}
			OVFCounter  =	0;
 432:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <OVFCounter.1720>
 436:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <OVFCounter.1720+0x1>
 43a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <OVFCounter.1720+0x2>
 43e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <OVFCounter.1720+0x3>
			TCNT0 = 256 - u8_g_timer2RemTicks;
 442:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <u8_g_timer2RemTicks>
 446:	81 95       	neg	r24
 448:	82 bf       	out	0x32, r24	; 50
			
		}

 44a:	ff 91       	pop	r31
 44c:	ef 91       	pop	r30
 44e:	bf 91       	pop	r27
 450:	af 91       	pop	r26
 452:	9f 91       	pop	r25
 454:	8f 91       	pop	r24
 456:	7f 91       	pop	r23
 458:	6f 91       	pop	r22
 45a:	5f 91       	pop	r21
 45c:	4f 91       	pop	r20
 45e:	3f 91       	pop	r19
 460:	2f 91       	pop	r18
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <_exit>:
 46c:	f8 94       	cli

0000046e <__stop_program>:
 46e:	ff cf       	rjmp	.-2      	; 0x46e <__stop_program>
