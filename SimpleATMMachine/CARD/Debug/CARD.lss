
CARD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001008  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  00001008  0000109c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800142  00800142  0000117e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000117e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003537  00000000  00000000  0000150c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001002  00000000  00000000  00004a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ef2  00000000  00000000  00005a45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ac  00000000  00000000  00007938  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cdf  00000000  00000000  000080e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020a6  00000000  00000000  00008dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000ae69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 34       	cpi	r26, 0x42	; 66
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 e4       	ldi	r26, 0x42	; 66
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 36       	cpi	r26, 0x63	; 99
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <main>
      8a:	0c 94 02 08 	jmp	0x1004	; 0x1004 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
	for (u32 i = 0; i <= 0xFF ; i++)
	{
		EEPROM_writeByte_256((u16)i,0xFF);
		TIMER_delay(TIMER_2,20);
	}
}
      92:	82 e0       	ldi	r24, 0x02	; 2
      94:	0e 94 08 06 	call	0xc10	; 0xc10 <TIMER_init>
      98:	82 e0       	ldi	r24, 0x02	; 2
      9a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <TIMER_stopInterrupt>
      9e:	82 e0       	ldi	r24, 0x02	; 2
      a0:	0e 94 2e 06 	call	0xc5c	; 0xc5c <TIMER_start>
      a4:	0e 94 b3 03 	call	0x766	; 0x766 <LCD_PinsInit>
      a8:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_Init>
      ac:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <TRIGGER_init>
      b0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <EEPROM_init>
      b4:	44 e6       	ldi	r20, 0x64	; 100
      b6:	50 e0       	ldi	r21, 0x00	; 0
      b8:	60 e0       	ldi	r22, 0x00	; 0
      ba:	70 e0       	ldi	r23, 0x00	; 0
      bc:	82 e0       	ldi	r24, 0x02	; 2
      be:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
      c2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <UART_Init>
      c6:	44 e6       	ldi	r20, 0x64	; 100
      c8:	50 e0       	ldi	r21, 0x00	; 0
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	70 e0       	ldi	r23, 0x00	; 0
      ce:	82 e0       	ldi	r24, 0x02	; 2
      d0:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
      d4:	0e 94 d4 05 	call	0xba8	; 0xba8 <SPI_initMaster>
      d8:	44 e6       	ldi	r20, 0x64	; 100
      da:	50 e0       	ldi	r21, 0x00	; 0
      dc:	60 e0       	ldi	r22, 0x00	; 0
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	82 e0       	ldi	r24, 0x02	; 2
      e2:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
      e6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <SPI_startTransmission>
      ea:	07 c0       	rjmp	.+14     	; 0xfa <APP_init+0x68>
      ec:	4a e0       	ldi	r20, 0x0A	; 10
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	70 e0       	ldi	r23, 0x00	; 0
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
      fa:	8a ea       	ldi	r24, 0xAA	; 170
      fc:	0e 94 03 06 	call	0xc06	; 0xc06 <SPI_transmitByte>
     100:	85 35       	cpi	r24, 0x55	; 85
     102:	a1 f7       	brne	.-24     	; 0xec <APP_init+0x5a>
     104:	07 c0       	rjmp	.+14     	; 0x114 <APP_init+0x82>
     106:	4a e0       	ldi	r20, 0x0A	; 10
     108:	50 e0       	ldi	r21, 0x00	; 0
     10a:	60 e0       	ldi	r22, 0x00	; 0
     10c:	70 e0       	ldi	r23, 0x00	; 0
     10e:	82 e0       	ldi	r24, 0x02	; 2
     110:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
     114:	8a ea       	ldi	r24, 0xAA	; 170
     116:	0e 94 03 06 	call	0xc06	; 0xc06 <SPI_transmitByte>
     11a:	85 35       	cpi	r24, 0x55	; 85
     11c:	a1 f7       	brne	.-24     	; 0x106 <APP_init+0x74>
     11e:	44 e6       	ldi	r20, 0x64	; 100
     120:	50 e0       	ldi	r21, 0x00	; 0
     122:	60 e0       	ldi	r22, 0x00	; 0
     124:	70 e0       	ldi	r23, 0x00	; 0
     126:	82 e0       	ldi	r24, 0x02	; 2
     128:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
     12c:	08 95       	ret

0000012e <APP_checkEEPROM>:

u8 APP_checkEEPROM(void)
{
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	1f 92       	push	r1
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
	u8 dataRecieved = 0;
     13a:	19 82       	std	Y+1, r1	; 0x01
	for(u8 i = PAN_ADDRESS; i < PIN_ADDRESS + 0x10; i++)
     13c:	10 e1       	ldi	r17, 0x10	; 16
     13e:	12 c0       	rjmp	.+36     	; 0x164 <APP_checkEEPROM+0x36>
	{
		EEPROM_readByte_256(i, &dataRecieved);
     140:	be 01       	movw	r22, r28
     142:	6f 5f       	subi	r22, 0xFF	; 255
     144:	7f 4f       	sbci	r23, 0xFF	; 255
     146:	81 2f       	mov	r24, r17
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 9c 02 	call	0x538	; 0x538 <EEPROM_readByte_256>
		TIMER_delay(TIMER_2,10);
     14e:	4a e0       	ldi	r20, 0x0A	; 10
     150:	50 e0       	ldi	r21, 0x00	; 0
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
		if (dataRecieved != 255)
     15c:	89 81       	ldd	r24, Y+1	; 0x01
     15e:	8f 3f       	cpi	r24, 0xFF	; 255
     160:	19 f4       	brne	.+6      	; 0x168 <APP_checkEEPROM+0x3a>
}

u8 APP_checkEEPROM(void)
{
	u8 dataRecieved = 0;
	for(u8 i = PAN_ADDRESS; i < PIN_ADDRESS + 0x10; i++)
     162:	1f 5f       	subi	r17, 0xFF	; 255
     164:	10 34       	cpi	r17, 0x40	; 64
     166:	60 f3       	brcs	.-40     	; 0x140 <APP_checkEEPROM+0x12>
		{
			break;
		}
	}
	
	if(dataRecieved != 255)
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	8f 3f       	cpi	r24, 0xFF	; 255
     16c:	11 f0       	breq	.+4      	; 0x172 <APP_checkEEPROM+0x44>
	{
		return EEPROM_NOT_EMPTY;
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	01 c0       	rjmp	.+2      	; 0x174 <APP_checkEEPROM+0x46>
	}
	else
	{
		return EEPROM_EMPTY;
     172:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     174:	0f 90       	pop	r0
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	1f 91       	pop	r17
     17c:	08 95       	ret

0000017e <APP_superLoop>:
	
	TIMER_delay(TIMER_2, 100);
}

void APP_superLoop(void)
{
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	a1 97       	sbiw	r28, 0x21	; 33
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	f8 94       	cli
     18c:	de bf       	out	0x3e, r29	; 62
     18e:	0f be       	out	0x3f, r0	; 63
     190:	cd bf       	out	0x3d, r28	; 61
	/*Step 1 -> if eeprom is empty goto PROGRAMMING_MODE*/
	u8 checkEEPROM = EEPROM_EMPTY, buffer = 0, counter = 0, true = 0;
	
	u8 PAN [21]			= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
     192:	fe 01       	movw	r30, r28
     194:	31 96       	adiw	r30, 0x01	; 1
     196:	85 e1       	ldi	r24, 0x15	; 21
     198:	df 01       	movw	r26, r30
     19a:	1d 92       	st	X+, r1
     19c:	8a 95       	dec	r24
     19e:	e9 f7       	brne	.-6      	; 0x19a <APP_superLoop+0x1c>
	u8 PIN [6]			= {0,0,0,0,0,0};
     1a0:	86 e0       	ldi	r24, 0x06	; 6
     1a2:	75 96       	adiw	r30, 0x15	; 21
     1a4:	df 01       	movw	r26, r30
     1a6:	98 2f       	mov	r25, r24
     1a8:	1d 92       	st	X+, r1
     1aa:	9a 95       	dec	r25
     1ac:	e9 f7       	brne	.-6      	; 0x1a8 <APP_superLoop+0x2a>
	u8 PINCopy [6]		= {0,0,0,0,0,0};
     1ae:	36 96       	adiw	r30, 0x06	; 6
     1b0:	df 01       	movw	r26, r30
     1b2:	1d 92       	st	X+, r1
     1b4:	8a 95       	dec	r24
     1b6:	e9 f7       	brne	.-6      	; 0x1b2 <APP_superLoop+0x34>
	checkEEPROM = APP_checkEEPROM();
     1b8:	0e 94 97 00 	call	0x12e	; 0x12e <APP_checkEEPROM>
	
	if (checkEEPROM == EEPROM_NOT_EMPTY)
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	19 f4       	brne	.+6      	; 0x1c6 <APP_superLoop+0x48>
	{
		cardMode = USER_MODE;
     1c0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <cardMode>
     1c4:	03 c0       	rjmp	.+6      	; 0x1cc <APP_superLoop+0x4e>
	}
	else
	{
		cardMode = PROGRAMMING_MODE;
     1c6:	82 e0       	ldi	r24, 0x02	; 2
     1c8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <cardMode>
	}
	
	/*Step 2 -> if not choose between PROGRAMMING_MODE '2' & USER_MODE = '1'*/
	while (1)	
	{	
		switch(cardMode)
     1cc:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <cardMode>
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <APP_superLoop+0x58>
     1d4:	d9 c0       	rjmp	.+434    	; 0x388 <APP_superLoop+0x20a>
     1d6:	82 30       	cpi	r24, 0x02	; 2
     1d8:	c9 f7       	brne	.-14     	; 0x1cc <APP_superLoop+0x4e>
		{
			case PROGRAMMING_MODE:
			switch (programmingState)
     1da:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	e1 f1       	breq	.+120    	; 0x25a <APP_superLoop+0xdc>
     1e2:	20 f0       	brcs	.+8      	; 0x1ec <APP_superLoop+0x6e>
     1e4:	82 30       	cpi	r24, 0x02	; 2
     1e6:	09 f4       	brne	.+2      	; 0x1ea <APP_superLoop+0x6c>
     1e8:	43 c0       	rjmp	.+134    	; 0x270 <APP_superLoop+0xf2>
     1ea:	f0 cf       	rjmp	.-32     	; 0x1cc <APP_superLoop+0x4e>
			{
				/*Step 3 -> in PROGRAMMING_MODE step 1 -> Send on UART "Please Enter Card PAN"*/
				case PRO_INITIAL_STATE:
				UART_sendString("Please Enter Card PAN\r");
     1ec:	80 e6       	ldi	r24, 0x60	; 96
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 ce 07 	call	0xf9c	; 0xf9c <UART_sendString>
				
				
				/*Step 3 -> in PROGRAMMING_MODE step 2 -> wait for the user to enter the PAN till it enters enter through uart*/
				counter = 0;
     1f4:	00 e0       	ldi	r16, 0x00	; 0
				buffer = 0;
     1f6:	10 e0       	ldi	r17, 0x00	; 0
				while (buffer != '\r')
     1f8:	14 c0       	rjmp	.+40     	; 0x222 <APP_superLoop+0xa4>
				{
					
					buffer = UART_GetChar();
     1fa:	0e 94 ca 07 	call	0xf94	; 0xf94 <UART_GetChar>
     1fe:	18 2f       	mov	r17, r24
					while(buffer >= 48 && buffer <= 57)
     200:	0c c0       	rjmp	.+24     	; 0x21a <APP_superLoop+0x9c>
					{
						UART_SendChar(buffer);
     202:	81 2f       	mov	r24, r17
     204:	0e 94 c6 07 	call	0xf8c	; 0xf8c <UART_SendChar>
						PAN[counter] = buffer;
     208:	e1 e0       	ldi	r30, 0x01	; 1
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	ec 0f       	add	r30, r28
     20e:	fd 1f       	adc	r31, r29
     210:	e0 0f       	add	r30, r16
     212:	f1 1d       	adc	r31, r1
     214:	10 83       	st	Z, r17
						counter++;
     216:	0f 5f       	subi	r16, 0xFF	; 255
						buffer = 0;
     218:	10 e0       	ldi	r17, 0x00	; 0
				buffer = 0;
				while (buffer != '\r')
				{
					
					buffer = UART_GetChar();
					while(buffer >= 48 && buffer <= 57)
     21a:	80 ed       	ldi	r24, 0xD0	; 208
     21c:	81 0f       	add	r24, r17
     21e:	8a 30       	cpi	r24, 0x0A	; 10
     220:	80 f3       	brcs	.-32     	; 0x202 <APP_superLoop+0x84>
				
				
				/*Step 3 -> in PROGRAMMING_MODE step 2 -> wait for the user to enter the PAN till it enters enter through uart*/
				counter = 0;
				buffer = 0;
				while (buffer != '\r')
     222:	1d 30       	cpi	r17, 0x0D	; 13
     224:	51 f7       	brne	.-44     	; 0x1fa <APP_superLoop+0x7c>
						PAN[counter] = buffer;
						counter++;
						buffer = 0;
					}
				}
				UART_SendChar('\r');
     226:	8d e0       	ldi	r24, 0x0D	; 13
     228:	0e 94 c6 07 	call	0xf8c	; 0xf8c <UART_SendChar>
				TIMER_delay(TIMER_2, 10);
     22c:	4a e0       	ldi	r20, 0x0A	; 10
     22e:	50 e0       	ldi	r21, 0x00	; 0
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
				
				if(counter < 16 || counter > 19)
     23a:	00 51       	subi	r16, 0x10	; 16
     23c:	04 30       	cpi	r16, 0x04	; 4
     23e:	28 f0       	brcs	.+10     	; 0x24a <APP_superLoop+0xcc>
				{
					UART_sendString("PAN is not correct\r");
     240:	87 e7       	ldi	r24, 0x77	; 119
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 ce 07 	call	0xf9c	; 0xf9c <UART_sendString>
					break;
     248:	c1 cf       	rjmp	.-126    	; 0x1cc <APP_superLoop+0x4e>
				}
				else
				{
					UART_sendString("PAN is valid\r");
     24a:	8b e8       	ldi	r24, 0x8B	; 139
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <UART_sendString>
					programmingState = PRO_SAVING_PAN;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
					break;
     258:	b9 cf       	rjmp	.-142    	; 0x1cc <APP_superLoop+0x4e>
				}
				
				/*Step 3 -> in PROGRAMMING_MODE step 3 -> save PAN in the EEPROM from address 0x0010*/
				case PRO_SAVING_PAN:
				EEPROM_writeString_256(0x10,PAN);
     25a:	be 01       	movw	r22, r28
     25c:	6f 5f       	subi	r22, 0xFF	; 255
     25e:	7f 4f       	sbci	r23, 0xFF	; 255
     260:	80 e1       	ldi	r24, 0x10	; 16
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 d6 02 	call	0x5ac	; 0x5ac <EEPROM_writeString_256>
				//LCD_WriteString(PAN);
				programmingState = PRO_RECEIVING_PIN;
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
				break;
     26e:	ae cf       	rjmp	.-164    	; 0x1cc <APP_superLoop+0x4e>
				
				/*Step 3 -> in PROGRAMMING_MODE step 4 -> Send on UART "Please Enter New PIN"*/
				case PRO_RECEIVING_PIN:
				UART_sendString("Please Enter New PIN\rYou can only enter numbers and only 4 digits\r");
     270:	89 e9       	ldi	r24, 0x99	; 153
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 ce 07 	call	0xf9c	; 0xf9c <UART_sendString>
				
				/*Step 3 -> in PROGRAMMING_MODE step 5 -> wait for the user to enter the PIN till it enters enter through uart*/
				counter = 0;
     278:	00 e0       	ldi	r16, 0x00	; 0
				buffer = 0;
				while (counter < 4)
     27a:	1b c0       	rjmp	.+54     	; 0x2b2 <APP_superLoop+0x134>
				{	
					buffer = UART_GetChar();
     27c:	0e 94 ca 07 	call	0xf94	; 0xf94 <UART_GetChar>
     280:	18 2f       	mov	r17, r24
					while(buffer >= 48 && buffer <= 57)
     282:	13 c0       	rjmp	.+38     	; 0x2aa <APP_superLoop+0x12c>
					{
						UART_SendChar('*');
     284:	8a e2       	ldi	r24, 0x2A	; 42
     286:	0e 94 c6 07 	call	0xf8c	; 0xf8c <UART_SendChar>
						TIMER_delay(TIMER_2, 10);
     28a:	4a e0       	ldi	r20, 0x0A	; 10
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	82 e0       	ldi	r24, 0x02	; 2
     294:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
						/*Step 3 -> in PROGRAMMING_MODE step 6 -> save PIN in firstCopy*/
						PIN[counter] = buffer;
     298:	e6 e1       	ldi	r30, 0x16	; 22
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	ec 0f       	add	r30, r28
     29e:	fd 1f       	adc	r31, r29
     2a0:	e0 0f       	add	r30, r16
     2a2:	f1 1d       	adc	r31, r1
     2a4:	10 83       	st	Z, r17
						counter++;
     2a6:	0f 5f       	subi	r16, 0xFF	; 255
						buffer = 0;
     2a8:	10 e0       	ldi	r17, 0x00	; 0
				counter = 0;
				buffer = 0;
				while (counter < 4)
				{	
					buffer = UART_GetChar();
					while(buffer >= 48 && buffer <= 57)
     2aa:	80 ed       	ldi	r24, 0xD0	; 208
     2ac:	81 0f       	add	r24, r17
     2ae:	8a 30       	cpi	r24, 0x0A	; 10
     2b0:	48 f3       	brcs	.-46     	; 0x284 <APP_superLoop+0x106>
				UART_sendString("Please Enter New PIN\rYou can only enter numbers and only 4 digits\r");
				
				/*Step 3 -> in PROGRAMMING_MODE step 5 -> wait for the user to enter the PIN till it enters enter through uart*/
				counter = 0;
				buffer = 0;
				while (counter < 4)
     2b2:	04 30       	cpi	r16, 0x04	; 4
     2b4:	18 f3       	brcs	.-58     	; 0x27c <APP_superLoop+0xfe>
						PIN[counter] = buffer;
						counter++;
						buffer = 0;
					}
				}
				UART_SendChar('\r');
     2b6:	8d e0       	ldi	r24, 0x0D	; 13
     2b8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <UART_SendChar>
				TIMER_delay(TIMER_2, 10);
     2bc:	4a e0       	ldi	r20, 0x0A	; 10
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	82 e0       	ldi	r24, 0x02	; 2
     2c6:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
				
				/*Step 3 -> in PROGRAMMING_MODE step 7 -> Send on UART "Please Confirm New PIN"*/
				UART_sendString("Please Confirm New PIN\r");
     2ca:	8c ed       	ldi	r24, 0xDC	; 220
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 ce 07 	call	0xf9c	; 0xf9c <UART_sendString>
				
				/*Step 3 -> in PROGRAMMING_MODE step 8 -> wait for the user to enter the PIN till it enters enter through uart*/
				counter = 0;
     2d2:	00 e0       	ldi	r16, 0x00	; 0
				buffer = 0;
				while (counter < 4)
     2d4:	1b c0       	rjmp	.+54     	; 0x30c <APP_superLoop+0x18e>
				{
					buffer = UART_GetChar();
     2d6:	0e 94 ca 07 	call	0xf94	; 0xf94 <UART_GetChar>
     2da:	18 2f       	mov	r17, r24
					while(buffer >= 48 && buffer <= 57)
     2dc:	13 c0       	rjmp	.+38     	; 0x304 <APP_superLoop+0x186>
					{
						UART_SendChar('*');
     2de:	8a e2       	ldi	r24, 0x2A	; 42
     2e0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <UART_SendChar>
						TIMER_delay(TIMER_2, 10);
     2e4:	4a e0       	ldi	r20, 0x0A	; 10
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
						/*Step 3 -> in PROGRAMMING_MODE step 9 -> save PIN entered in secondCopy*/
						PINCopy[counter] = buffer;
     2f2:	ec e1       	ldi	r30, 0x1C	; 28
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	ec 0f       	add	r30, r28
     2f8:	fd 1f       	adc	r31, r29
     2fa:	e0 0f       	add	r30, r16
     2fc:	f1 1d       	adc	r31, r1
     2fe:	10 83       	st	Z, r17
						counter++;
     300:	0f 5f       	subi	r16, 0xFF	; 255
						buffer = 0;
     302:	10 e0       	ldi	r17, 0x00	; 0
				counter = 0;
				buffer = 0;
				while (counter < 4)
				{
					buffer = UART_GetChar();
					while(buffer >= 48 && buffer <= 57)
     304:	80 ed       	ldi	r24, 0xD0	; 208
     306:	81 0f       	add	r24, r17
     308:	8a 30       	cpi	r24, 0x0A	; 10
     30a:	48 f3       	brcs	.-46     	; 0x2de <APP_superLoop+0x160>
				UART_sendString("Please Confirm New PIN\r");
				
				/*Step 3 -> in PROGRAMMING_MODE step 8 -> wait for the user to enter the PIN till it enters enter through uart*/
				counter = 0;
				buffer = 0;
				while (counter < 4)
     30c:	04 30       	cpi	r16, 0x04	; 4
     30e:	18 f3       	brcs	.-58     	; 0x2d6 <APP_superLoop+0x158>
						PINCopy[counter] = buffer;
						counter++;
						buffer = 0;
					}
				}
				UART_SendChar('\r');
     310:	8d e0       	ldi	r24, 0x0D	; 13
     312:	0e 94 c6 07 	call	0xf8c	; 0xf8c <UART_SendChar>
				TIMER_delay(TIMER_2, 10);
     316:	4a e0       	ldi	r20, 0x0A	; 10
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
				
				/*Step 3 -> in PROGRAMMING_MODE step 10 -> compare firstCopy and secondCopy make sure that they are four characters and all numerics"*/
				true = 0;
     324:	40 e0       	ldi	r20, 0x00	; 0
				
				for(counter = 0; counter < 4; counter++)
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	14 c0       	rjmp	.+40     	; 0x352 <APP_superLoop+0x1d4>
				{
					if (PIN[counter] == PINCopy[counter])
     32a:	82 2f       	mov	r24, r18
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	e6 e1       	ldi	r30, 0x16	; 22
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	ec 0f       	add	r30, r28
     334:	fd 1f       	adc	r31, r29
     336:	e8 0f       	add	r30, r24
     338:	f9 1f       	adc	r31, r25
     33a:	30 81       	ld	r19, Z
     33c:	ec e1       	ldi	r30, 0x1C	; 28
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	ec 0f       	add	r30, r28
     342:	fd 1f       	adc	r31, r29
     344:	e8 0f       	add	r30, r24
     346:	f9 1f       	adc	r31, r25
     348:	80 81       	ld	r24, Z
     34a:	38 13       	cpse	r19, r24
     34c:	01 c0       	rjmp	.+2      	; 0x350 <APP_superLoop+0x1d2>
					{
						true++;
     34e:	4f 5f       	subi	r20, 0xFF	; 255
				TIMER_delay(TIMER_2, 10);
				
				/*Step 3 -> in PROGRAMMING_MODE step 10 -> compare firstCopy and secondCopy make sure that they are four characters and all numerics"*/
				true = 0;
				
				for(counter = 0; counter < 4; counter++)
     350:	2f 5f       	subi	r18, 0xFF	; 255
     352:	24 30       	cpi	r18, 0x04	; 4
     354:	50 f3       	brcs	.-44     	; 0x32a <APP_superLoop+0x1ac>
						true++;
					}
				}
				
				/*Step 3 -> in PROGRAMMING_MODE step 11 -> if there is a mistake print "Wrong PIN" and got to step 4*/
				if (true != 4)
     356:	44 30       	cpi	r20, 0x04	; 4
     358:	61 f0       	breq	.+24     	; 0x372 <APP_superLoop+0x1f4>
				{
					UART_sendString("Wrong PIN\r");
     35a:	84 ef       	ldi	r24, 0xF4	; 244
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <UART_sendString>
					TIMER_delay(TIMER_2, 10);
     362:	4a e0       	ldi	r20, 0x0A	; 10
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
     370:	2d cf       	rjmp	.-422    	; 0x1cc <APP_superLoop+0x4e>
				}
				
				/*Step 3 -> in PROGRAMMING_MODE step 12 -> if matching save PIN -secondCopy- in EEPROM in address 0x0030*/
				else
				{
					EEPROM_writeString_256(PIN_ADDRESS,PIN);
     372:	be 01       	movw	r22, r28
     374:	6a 5e       	subi	r22, 0xEA	; 234
     376:	7f 4f       	sbci	r23, 0xFF	; 255
     378:	80 e3       	ldi	r24, 0x30	; 48
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 d6 02 	call	0x5ac	; 0x5ac <EEPROM_writeString_256>
				
					/*Step 3 -> in PROGRAMMING_MODE step 13 -> go to USER_MODE*/
					cardMode = USER_MODE;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <cardMode>
     386:	22 cf       	rjmp	.-444    	; 0x1cc <APP_superLoop+0x4e>
			}
			break;
			
			/*Step 4 -> in USER_MODE step 1 -> print "Please press 1 for entering user mode and 2 for programming mode"*/
			case USER_MODE:
			UART_sendString("Please press 1 for entering user mode and 2 for programming mode\r");
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <UART_sendString>
			
			/*Step 4 -> in USER_MODE step 2 -> recieve operation from UART, neglect if it is not equal '1' or '2'*/
			buffer = 0;
			while (buffer != '1' || buffer != '2')
			{
				buffer = UART_GetChar();
     390:	0e 94 ca 07 	call	0xf94	; 0xf94 <UART_GetChar>
     394:	18 2f       	mov	r17, r24
				if (buffer == '1' || buffer == '2')
     396:	8f ec       	ldi	r24, 0xCF	; 207
     398:	81 0f       	add	r24, r17
     39a:	82 30       	cpi	r24, 0x02	; 2
     39c:	c8 f7       	brcc	.-14     	; 0x390 <APP_superLoop+0x212>
				{
					UART_SendChar(buffer);
     39e:	81 2f       	mov	r24, r17
     3a0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <UART_SendChar>
					TIMER_delay(TIMER_2, 10);
     3a4:	4a e0       	ldi	r20, 0x0A	; 10
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	82 e0       	ldi	r24, 0x02	; 2
     3ae:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
					break;
				}
				
			}
			UART_SendChar('\r');
     3b2:	8d e0       	ldi	r24, 0x0D	; 13
     3b4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <UART_SendChar>
			TIMER_delay(TIMER_2, 10);
     3b8:	4a e0       	ldi	r20, 0x0A	; 10
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
			
			
			/*Step 4 -> in USER_MODE step 3 -> If = 1, trigger ATM, send PAN and PIN then IDLE_STATE*/
			if (buffer == '1')
     3c6:	11 33       	cpi	r17, 0x31	; 49
     3c8:	09 f0       	breq	.+2      	; 0x3cc <APP_superLoop+0x24e>
     3ca:	7b c0       	rjmp	.+246    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
			{
				TRIGGER_triggerMCU();
     3cc:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <TRIGGER_triggerMCU>
				EEPROM_readString_256(PAN_ADDRESS, PAN);
     3d0:	be 01       	movw	r22, r28
     3d2:	6f 5f       	subi	r22, 0xFF	; 255
     3d4:	7f 4f       	sbci	r23, 0xFF	; 255
     3d6:	80 e1       	ldi	r24, 0x10	; 16
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <EEPROM_readString_256>
				TIMER_delay(TIMER_2, 10);
     3de:	4a e0       	ldi	r20, 0x0A	; 10
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
				
				EEPROM_readString_256(PIN_ADDRESS, PIN);
     3ec:	be 01       	movw	r22, r28
     3ee:	6a 5e       	subi	r22, 0xEA	; 234
     3f0:	7f 4f       	sbci	r23, 0xFF	; 255
     3f2:	80 e3       	ldi	r24, 0x30	; 48
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <EEPROM_readString_256>
				TIMER_delay(TIMER_2, 10);
     3fa:	4a e0       	ldi	r20, 0x0A	; 10
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	82 e0       	ldi	r24, 0x02	; 2
     404:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
				
				counter = 0;
     408:	10 e0       	ldi	r17, 0x00	; 0
				while(PAN[counter])
     40a:	0c c0       	rjmp	.+24     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
				{
					if(SPI_transmitByte(PAN[counter]) == 0xBB)
     40c:	0e 94 03 06 	call	0xc06	; 0xc06 <SPI_transmitByte>
     410:	8b 3b       	cpi	r24, 0xBB	; 187
     412:	09 f4       	brne	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
					{
						counter++;
     414:	1f 5f       	subi	r17, 0xFF	; 255
					}
					TIMER_delay(TIMER_2, 10);
     416:	4a e0       	ldi	r20, 0x0A	; 10
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	82 e0       	ldi	r24, 0x02	; 2
     420:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
				
				EEPROM_readString_256(PIN_ADDRESS, PIN);
				TIMER_delay(TIMER_2, 10);
				
				counter = 0;
				while(PAN[counter])
     424:	e1 e0       	ldi	r30, 0x01	; 1
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	ec 0f       	add	r30, r28
     42a:	fd 1f       	adc	r31, r29
     42c:	e1 0f       	add	r30, r17
     42e:	f1 1d       	adc	r31, r1
     430:	80 81       	ld	r24, Z
     432:	81 11       	cpse	r24, r1
     434:	eb cf       	rjmp	.-42     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     436:	07 c0       	rjmp	.+14     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
					}
					TIMER_delay(TIMER_2, 10);
					
				}
				while(SPI_transmitByte(0) == 0xBB)
				TIMER_delay(TIMER_2,10);
     438:	4a e0       	ldi	r20, 0x0A	; 10
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	82 e0       	ldi	r24, 0x02	; 2
     442:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
						counter++;
					}
					TIMER_delay(TIMER_2, 10);
					
				}
				while(SPI_transmitByte(0) == 0xBB)
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 03 06 	call	0xc06	; 0xc06 <SPI_transmitByte>
     44c:	8b 3b       	cpi	r24, 0xBB	; 187
     44e:	a1 f3       	breq	.-24     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     450:	10 e0       	ldi	r17, 0x00	; 0
     452:	13 c0       	rjmp	.+38     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
				TIMER_delay(TIMER_2,10);
				
				counter = 0;
				while(counter < 4)
				{
					if(SPI_transmitByte(PIN[counter]) == 0xCC)
     454:	e6 e1       	ldi	r30, 0x16	; 22
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	ec 0f       	add	r30, r28
     45a:	fd 1f       	adc	r31, r29
     45c:	e1 0f       	add	r30, r17
     45e:	f1 1d       	adc	r31, r1
     460:	80 81       	ld	r24, Z
     462:	0e 94 03 06 	call	0xc06	; 0xc06 <SPI_transmitByte>
     466:	8c 3c       	cpi	r24, 0xCC	; 204
     468:	09 f4       	brne	.+2      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
					{
						counter++;
     46a:	1f 5f       	subi	r17, 0xFF	; 255
					}
					TIMER_delay(TIMER_2, 10);
     46c:	4a e0       	ldi	r20, 0x0A	; 10
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
				}
				while(SPI_transmitByte(0) == 0xBB)
				TIMER_delay(TIMER_2,10);
				
				counter = 0;
				while(counter < 4)
     47a:	14 30       	cpi	r17, 0x04	; 4
     47c:	58 f3       	brcs	.-42     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     47e:	07 c0       	rjmp	.+14     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
						counter++;
					}
					TIMER_delay(TIMER_2, 10);
				}
				while(SPI_transmitByte(0) == 0xCC)
				TIMER_delay(TIMER_2,10);
     480:	4a e0       	ldi	r20, 0x0A	; 10
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	82 e0       	ldi	r24, 0x02	; 2
     48a:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
					{
						counter++;
					}
					TIMER_delay(TIMER_2, 10);
				}
				while(SPI_transmitByte(0) == 0xCC)
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	0e 94 03 06 	call	0xc06	; 0xc06 <SPI_transmitByte>
     494:	8c 3c       	cpi	r24, 0xCC	; 204
     496:	a1 f3       	breq	.-24     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
				TIMER_delay(TIMER_2,10);
				
				TIMER_delay(TIMER_2,5000);
     498:	48 e8       	ldi	r20, 0x88	; 136
     49a:	53 e1       	ldi	r21, 0x13	; 19
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
				while(SPI_transmitByte(0xDD) != 0xDD)
     4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
				TIMER_delay(TIMER_2,100);
     4a8:	44 e6       	ldi	r20, 0x64	; 100
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
				}
				while(SPI_transmitByte(0) == 0xCC)
				TIMER_delay(TIMER_2,10);
				
				TIMER_delay(TIMER_2,5000);
				while(SPI_transmitByte(0xDD) != 0xDD)
     4b6:	8d ed       	ldi	r24, 0xDD	; 221
     4b8:	0e 94 03 06 	call	0xc06	; 0xc06 <SPI_transmitByte>
     4bc:	8d 3d       	cpi	r24, 0xDD	; 221
     4be:	a1 f7       	brne	.-24     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4c0:	85 ce       	rjmp	.-758    	; 0x1cc <APP_superLoop+0x4e>
				TIMER_delay(TIMER_2,100);
				
			}
			/*Step 4 -> in USER_MODE step 4 -> If = 2, go to PROGRAMMING_MODE INITIAL_STATE*/
			else if(buffer == '2')
     4c2:	12 33       	cpi	r17, 0x32	; 50
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4c6:	82 ce       	rjmp	.-764    	; 0x1cc <APP_superLoop+0x4e>
			{
				cardMode = PROGRAMMING_MODE;
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <cardMode>
				programmingState = PRO_INITIAL_STATE;
     4ce:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
     4d2:	7c ce       	rjmp	.-776    	; 0x1cc <APP_superLoop+0x4e>

000004d4 <EEPROM_init>:
			} 
			while(u8_Pdata[i++] != '\0');
		
				
			return 0;
}
     4d4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <I2C_init>
     4d8:	08 95       	ret

000004da <EEPROM_writeByte_256>:

/*-----------------------256-------------------------------*/
u8 EEPROM_writeByte_256(u16 u16_addr, u8 u8data)
{
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	d8 2f       	mov	r29, r24
     4e2:	c9 2f       	mov	r28, r25
     4e4:	16 2f       	mov	r17, r22
    /* Send the Start Bit */
    if (I2C_start()==EVENT_OK)
     4e6:	0e 94 4d 05 	call	0xa9a	; 0xa9a <I2C_start>
     4ea:	81 11       	cpse	r24, r1
     4ec:	20 c0       	rjmp	.+64     	; 0x52e <EEPROM_writeByte_256+0x54>
    {
        /* Send the device address, we need to get A8 A9 A10 address bits from the
         * memory location address and R/W=0 (write) */
        if (I2C_address_select(0xA0,write)==SLA_W_ACK_SENT)
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	80 ea       	ldi	r24, 0xA0	; 160
     4f2:	0e 94 6d 05 	call	0xada	; 0xada <I2C_address_select>
     4f6:	83 30       	cpi	r24, 0x03	; 3
     4f8:	d1 f4       	brne	.+52     	; 0x52e <EEPROM_writeByte_256+0x54>
        {
            /* Send the required memory location address */
            if (I2C_data_rw((u8)((u16_addr >> 8) & 0xFF),write,ACK)==DATA_WRITE_ACK_SENT)
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	60 e0       	ldi	r22, 0x00	; 0
     4fe:	8c 2f       	mov	r24, r28
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 98 05 	call	0xb30	; 0xb30 <I2C_data_rw>
     506:	88 30       	cpi	r24, 0x08	; 8
     508:	91 f4       	brne	.+36     	; 0x52e <EEPROM_writeByte_256+0x54>
            {
                if (I2C_data_rw((u8)(u16_addr),write,ACK)==DATA_WRITE_ACK_SENT)
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	8d 2f       	mov	r24, r29
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 98 05 	call	0xb30	; 0xb30 <I2C_data_rw>
     516:	88 30       	cpi	r24, 0x08	; 8
     518:	51 f4       	brne	.+20     	; 0x52e <EEPROM_writeByte_256+0x54>
                {

                    /* write byte to eeprom */
                    if (I2C_data_rw(u8data,write,ACK)==DATA_WRITE_ACK_SENT)
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	81 2f       	mov	r24, r17
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 98 05 	call	0xb30	; 0xb30 <I2C_data_rw>
     526:	88 30       	cpi	r24, 0x08	; 8
     528:	11 f4       	brne	.+4      	; 0x52e <EEPROM_writeByte_256+0x54>
                    {
                        /* Send the Stop Bit */
                        I2C_stop();
     52a:	0e 94 cb 05 	call	0xb96	; 0xb96 <I2C_stop>
            }
        }
    }
	
	return 0;
}
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	08 95       	ret

00000538 <EEPROM_readByte_256>:
u8 EEPROM_readByte_256(u16 u16_addr, u8 *u8data)
{
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	d8 2f       	mov	r29, r24
     542:	c9 2f       	mov	r28, r25
     544:	8b 01       	movw	r16, r22
    /* Send the Start Bit */
    if (I2C_start()==EVENT_OK)
     546:	0e 94 4d 05 	call	0xa9a	; 0xa9a <I2C_start>
     54a:	81 11       	cpse	r24, r1
     54c:	29 c0       	rjmp	.+82     	; 0x5a0 <EEPROM_readByte_256+0x68>
    {
        /* Send the device address, we need to get A8 A9 A10 address bits from the
         * memory location address and R/W=0 (write) */
        if (I2C_address_select(0xA0,write)==SLA_W_ACK_SENT)
     54e:	60 e0       	ldi	r22, 0x00	; 0
     550:	80 ea       	ldi	r24, 0xA0	; 160
     552:	0e 94 6d 05 	call	0xada	; 0xada <I2C_address_select>
     556:	83 30       	cpi	r24, 0x03	; 3
     558:	19 f5       	brne	.+70     	; 0x5a0 <EEPROM_readByte_256+0x68>
        {
            /* Send the required memory location address */
            if (I2C_data_rw((u8)((u16_addr >> 8) & 0xFF),write,ACK)==DATA_WRITE_ACK_SENT)
     55a:	40 e0       	ldi	r20, 0x00	; 0
     55c:	60 e0       	ldi	r22, 0x00	; 0
     55e:	8c 2f       	mov	r24, r28
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 98 05 	call	0xb30	; 0xb30 <I2C_data_rw>
     566:	88 30       	cpi	r24, 0x08	; 8
     568:	d9 f4       	brne	.+54     	; 0x5a0 <EEPROM_readByte_256+0x68>
            {
                if (I2C_data_rw((u8)(u16_addr),write,ACK)==DATA_WRITE_ACK_SENT)
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	8d 2f       	mov	r24, r29
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	0e 94 98 05 	call	0xb30	; 0xb30 <I2C_data_rw>
     576:	88 30       	cpi	r24, 0x08	; 8
     578:	99 f4       	brne	.+38     	; 0x5a0 <EEPROM_readByte_256+0x68>
                {
                    /* Send the Repeated Start Bit */
                    if (I2C_repeated_start()==EVENT_OK)
     57a:	0e 94 5d 05 	call	0xaba	; 0xaba <I2C_repeated_start>
     57e:	81 11       	cpse	r24, r1
     580:	0f c0       	rjmp	.+30     	; 0x5a0 <EEPROM_readByte_256+0x68>
                    {
                        /* Send the device address, we need to get A8 A9 A10 address bits from the
                         * memory location address and R/W=1 (Read) */

                        if (I2C_address_select(0xA0,read)==SLA_R_ACK_SENT)
     582:	61 e0       	ldi	r22, 0x01	; 1
     584:	80 ea       	ldi	r24, 0xA0	; 160
     586:	0e 94 6d 05 	call	0xada	; 0xada <I2C_address_select>
     58a:	85 30       	cpi	r24, 0x05	; 5
     58c:	49 f4       	brne	.+18     	; 0x5a0 <EEPROM_readByte_256+0x68>
                        {
                            /* Read Byte from Memory without send ACK */

                            if (I2C_data_rw(u8data,read,NACK)==DATA_READ_NACK_SENT)
     58e:	41 e0       	ldi	r20, 0x01	; 1
     590:	61 e0       	ldi	r22, 0x01	; 1
     592:	c8 01       	movw	r24, r16
     594:	0e 94 98 05 	call	0xb30	; 0xb30 <I2C_data_rw>
     598:	8c 30       	cpi	r24, 0x0C	; 12
     59a:	11 f4       	brne	.+4      	; 0x5a0 <EEPROM_readByte_256+0x68>
                            {
                                /* Send the Stop Bit */
                                I2C_stop();
     59c:	0e 94 cb 05 	call	0xb96	; 0xb96 <I2C_stop>
                }
            }
        }
    }
	return 0;
}
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	08 95       	ret

000005ac <EEPROM_writeString_256>:
u8 EEPROM_writeString_256 (u16 u16_Saddr, u8 *u8_Pdata)
{ 
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	7b 01       	movw	r14, r22
	
	u8 i;
	u16 ee_address=u16_Saddr;
	for (i=0;u8_Pdata[i];i++)
     5b8:	c0 e0       	ldi	r28, 0x00	; 0
     5ba:	0e c0       	rjmp	.+28     	; 0x5d8 <EEPROM_writeString_256+0x2c>
	{
		EEPROM_writeByte_256(ee_address++,u8_Pdata[i]);
     5bc:	8c 01       	movw	r16, r24
     5be:	0f 5f       	subi	r16, 0xFF	; 255
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255
     5c2:	0e 94 6d 02 	call	0x4da	; 0x4da <EEPROM_writeByte_256>
		TIMER_delay(TIMER_2,20);
     5c6:	44 e1       	ldi	r20, 0x14	; 20
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
u8 EEPROM_writeString_256 (u16 u16_Saddr, u8 *u8_Pdata)
{ 
	
	u8 i;
	u16 ee_address=u16_Saddr;
	for (i=0;u8_Pdata[i];i++)
     5d4:	cf 5f       	subi	r28, 0xFF	; 255
	{
		EEPROM_writeByte_256(ee_address++,u8_Pdata[i]);
     5d6:	c8 01       	movw	r24, r16
u8 EEPROM_writeString_256 (u16 u16_Saddr, u8 *u8_Pdata)
{ 
	
	u8 i;
	u16 ee_address=u16_Saddr;
	for (i=0;u8_Pdata[i];i++)
     5d8:	f7 01       	movw	r30, r14
     5da:	ec 0f       	add	r30, r28
     5dc:	f1 1d       	adc	r31, r1
     5de:	60 81       	ld	r22, Z
     5e0:	61 11       	cpse	r22, r1
     5e2:	ec cf       	rjmp	.-40     	; 0x5bc <EEPROM_writeString_256+0x10>
	{
		EEPROM_writeByte_256(ee_address++,u8_Pdata[i]);
		TIMER_delay(TIMER_2,20);
	}
	
	EEPROM_writeByte_256(ee_address,'\0');			
     5e4:	0e 94 6d 02 	call	0x4da	; 0x4da <EEPROM_writeByte_256>
	return 0;
				
}
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	08 95       	ret

000005f6 <EEPROM_readString_256>:
u8 EEPROM_readString_256 (u16 u16_Saddr, u8 *u8_Pdata)
{
     5f6:	cf 92       	push	r12
     5f8:	df 92       	push	r13
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	6b 01       	movw	r12, r22
	u8 i = 0;
     606:	c0 e0       	ldi	r28, 0x00	; 0
	do
	{
		EEPROM_readByte_256(u16_Saddr++,&u8_Pdata[i]);
     608:	86 01       	movw	r16, r12
     60a:	0c 0f       	add	r16, r28
     60c:	11 1d       	adc	r17, r1
     60e:	7c 01       	movw	r14, r24
     610:	2f ef       	ldi	r18, 0xFF	; 255
     612:	e2 1a       	sub	r14, r18
     614:	f2 0a       	sbc	r15, r18
     616:	b8 01       	movw	r22, r16
     618:	0e 94 9c 02 	call	0x538	; 0x538 <EEPROM_readByte_256>
		TIMER_delay(TIMER_2,30);
     61c:	4e e1       	ldi	r20, 0x1E	; 30
     61e:	50 e0       	ldi	r21, 0x00	; 0
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
	} 
	while(u8_Pdata[i++] != '\0');
     62a:	cf 5f       	subi	r28, 0xFF	; 255
     62c:	f8 01       	movw	r30, r16
     62e:	20 81       	ld	r18, Z
u8 EEPROM_readString_256 (u16 u16_Saddr, u8 *u8_Pdata)
{
	u8 i = 0;
	do
	{
		EEPROM_readByte_256(u16_Saddr++,&u8_Pdata[i]);
     630:	c7 01       	movw	r24, r14
		TIMER_delay(TIMER_2,30);
	} 
	while(u8_Pdata[i++] != '\0');
     632:	21 11       	cpse	r18, r1
     634:	e9 cf       	rjmp	.-46     	; 0x608 <EEPROM_readString_256+0x12>
	
	return 0;
}
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	df 90       	pop	r13
     644:	cf 90       	pop	r12
     646:	08 95       	ret

00000648 <LCD_WriteIns>:
	for(u8 i=0;i<8;i++)
	{
		LCD_WriteData(u8_a_pattern[i]);
	}
	LCD_WriteIns(0x80);
}
     648:	cf 93       	push	r28
     64a:	c8 2f       	mov	r28, r24
     64c:	40 e0       	ldi	r20, 0x00	; 0
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	81 e4       	ldi	r24, 0x41	; 65
     652:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     656:	4c 2f       	mov	r20, r28
     658:	44 1f       	adc	r20, r20
     65a:	44 27       	eor	r20, r20
     65c:	44 1f       	adc	r20, r20
     65e:	67 e0       	ldi	r22, 0x07	; 7
     660:	81 e4       	ldi	r24, 0x41	; 65
     662:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     666:	c6 fb       	bst	r28, 6
     668:	44 27       	eor	r20, r20
     66a:	40 f9       	bld	r20, 0
     66c:	66 e0       	ldi	r22, 0x06	; 6
     66e:	81 e4       	ldi	r24, 0x41	; 65
     670:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     674:	c5 fb       	bst	r28, 5
     676:	44 27       	eor	r20, r20
     678:	40 f9       	bld	r20, 0
     67a:	65 e0       	ldi	r22, 0x05	; 5
     67c:	81 e4       	ldi	r24, 0x41	; 65
     67e:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     682:	c4 fb       	bst	r28, 4
     684:	44 27       	eor	r20, r20
     686:	40 f9       	bld	r20, 0
     688:	64 e0       	ldi	r22, 0x04	; 4
     68a:	81 e4       	ldi	r24, 0x41	; 65
     68c:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     690:	41 e0       	ldi	r20, 0x01	; 1
     692:	63 e0       	ldi	r22, 0x03	; 3
     694:	81 e4       	ldi	r24, 0x41	; 65
     696:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     69a:	41 e0       	ldi	r20, 0x01	; 1
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	63 e0       	ldi	r22, 0x03	; 3
     6ac:	81 e4       	ldi	r24, 0x41	; 65
     6ae:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     6b2:	41 e0       	ldi	r20, 0x01	; 1
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
     6c0:	c3 fb       	bst	r28, 3
     6c2:	44 27       	eor	r20, r20
     6c4:	40 f9       	bld	r20, 0
     6c6:	67 e0       	ldi	r22, 0x07	; 7
     6c8:	81 e4       	ldi	r24, 0x41	; 65
     6ca:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     6ce:	c2 fb       	bst	r28, 2
     6d0:	44 27       	eor	r20, r20
     6d2:	40 f9       	bld	r20, 0
     6d4:	66 e0       	ldi	r22, 0x06	; 6
     6d6:	81 e4       	ldi	r24, 0x41	; 65
     6d8:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     6dc:	c1 fb       	bst	r28, 1
     6de:	44 27       	eor	r20, r20
     6e0:	40 f9       	bld	r20, 0
     6e2:	65 e0       	ldi	r22, 0x05	; 5
     6e4:	81 e4       	ldi	r24, 0x41	; 65
     6e6:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     6ea:	4c 2f       	mov	r20, r28
     6ec:	41 70       	andi	r20, 0x01	; 1
     6ee:	64 e0       	ldi	r22, 0x04	; 4
     6f0:	81 e4       	ldi	r24, 0x41	; 65
     6f2:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     6f6:	41 e0       	ldi	r20, 0x01	; 1
     6f8:	63 e0       	ldi	r22, 0x03	; 3
     6fa:	81 e4       	ldi	r24, 0x41	; 65
     6fc:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     700:	41 e0       	ldi	r20, 0x01	; 1
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
     70e:	40 e0       	ldi	r20, 0x00	; 0
     710:	63 e0       	ldi	r22, 0x03	; 3
     712:	81 e4       	ldi	r24, 0x41	; 65
     714:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     718:	41 e0       	ldi	r20, 0x01	; 1
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <LCD_Init>:
     72a:	42 e3       	ldi	r20, 0x32	; 50
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	82 e0       	ldi	r24, 0x02	; 2
     734:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	0e 94 24 03 	call	0x648	; 0x648 <LCD_WriteIns>
     73e:	88 e2       	ldi	r24, 0x28	; 40
     740:	0e 94 24 03 	call	0x648	; 0x648 <LCD_WriteIns>
     744:	8c e0       	ldi	r24, 0x0C	; 12
     746:	0e 94 24 03 	call	0x648	; 0x648 <LCD_WriteIns>
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	0e 94 24 03 	call	0x648	; 0x648 <LCD_WriteIns>
     750:	41 e0       	ldi	r20, 0x01	; 1
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
     75e:	86 e0       	ldi	r24, 0x06	; 6
     760:	0e 94 24 03 	call	0x648	; 0x648 <LCD_WriteIns>
     764:	08 95       	ret

00000766 <LCD_PinsInit>:
* \Parameters (out): None
* \Return value:   : None
*******************************************************************************/
 void LCD_PinsInit ()
 {
	 DIO_init(LCD_PORT,0,OUTPUT);
     766:	41 e0       	ldi	r20, 0x01	; 1
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	81 e4       	ldi	r24, 0x41	; 65
     76c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <DIO_init>
	 DIO_init(LCD_PORT,1,OUTPUT);
     770:	41 e0       	ldi	r20, 0x01	; 1
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	81 e4       	ldi	r24, 0x41	; 65
     776:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <DIO_init>
	 DIO_init(LCD_PORT,2,OUTPUT);
     77a:	41 e0       	ldi	r20, 0x01	; 1
     77c:	62 e0       	ldi	r22, 0x02	; 2
     77e:	81 e4       	ldi	r24, 0x41	; 65
     780:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <DIO_init>
	 DIO_init(LCD_PORT,3,OUTPUT);
     784:	41 e0       	ldi	r20, 0x01	; 1
     786:	63 e0       	ldi	r22, 0x03	; 3
     788:	81 e4       	ldi	r24, 0x41	; 65
     78a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <DIO_init>
	 DIO_init(LCD_PORT,4,OUTPUT);
     78e:	41 e0       	ldi	r20, 0x01	; 1
     790:	64 e0       	ldi	r22, 0x04	; 4
     792:	81 e4       	ldi	r24, 0x41	; 65
     794:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <DIO_init>
	 DIO_init(LCD_PORT,5,OUTPUT);
     798:	41 e0       	ldi	r20, 0x01	; 1
     79a:	65 e0       	ldi	r22, 0x05	; 5
     79c:	81 e4       	ldi	r24, 0x41	; 65
     79e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <DIO_init>
	 DIO_init(LCD_PORT,6,OUTPUT);
     7a2:	41 e0       	ldi	r20, 0x01	; 1
     7a4:	66 e0       	ldi	r22, 0x06	; 6
     7a6:	81 e4       	ldi	r24, 0x41	; 65
     7a8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <DIO_init>
	 DIO_init(LCD_PORT,7,OUTPUT);
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	67 e0       	ldi	r22, 0x07	; 7
     7b0:	81 e4       	ldi	r24, 0x41	; 65
     7b2:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <DIO_init>
     7b6:	08 95       	ret

000007b8 <TRIGGER_init>:

#include "trigger.h"

void TRIGGER_init(void)
{
	DIO_init(TRIGGER_PORT, TRIGGER_PIN, OUTPUT);
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	82 e4       	ldi	r24, 0x42	; 66
     7be:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <DIO_init>
     7c2:	08 95       	ret

000007c4 <TRIGGER_triggerMCU>:
}

void TRIGGER_triggerMCU(void)
{
	DIO_write(TRIGGER_PORT, TRIGGER_PIN, HIGH);
     7c4:	41 e0       	ldi	r20, 0x01	; 1
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	82 e4       	ldi	r24, 0x42	; 66
     7ca:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
	TIMER_delay(TIMER_2, 200);
     7ce:	48 ec       	ldi	r20, 0xC8	; 200
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
	DIO_write(TRIGGER_PORT, TRIGGER_PIN, LOW);
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	82 e4       	ldi	r24, 0x42	; 66
     7e2:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     7e6:	08 95       	ret

000007e8 <main>:
int main(void)
{
	
 /* Replace with your application code */
	
 	APP_init();
     7e8:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
 	//APP_deleteAll();
 	APP_superLoop();
     7ec:	0e 94 bf 00 	call	0x17e	; 0x17e <APP_superLoop>
     7f0:	ff cf       	rjmp	.-2      	; 0x7f0 <main+0x8>

000007f2 <DIO_init>:
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
	if (u8_a_pinNumber < 8)
     7f2:	68 30       	cpi	r22, 0x08	; 8
     7f4:	08 f0       	brcs	.+2      	; 0x7f8 <DIO_init+0x6>
     7f6:	80 c0       	rjmp	.+256    	; 0x8f8 <__stack+0x99>
	{
		
		switch(u8_a_direction)
     7f8:	44 23       	and	r20, r20
     7fa:	21 f0       	breq	.+8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7fc:	41 30       	cpi	r20, 0x01	; 1
     7fe:	09 f4       	brne	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     800:	40 c0       	rjmp	.+128    	; 0x882 <__stack+0x23>
     802:	7c c0       	rjmp	.+248    	; 0x8fc <__stack+0x9d>
		{
			case INPUT:
			switch(u8_a_portNumber)
     804:	82 34       	cpi	r24, 0x42	; 66
     806:	b1 f0       	breq	.+44     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     808:	18 f4       	brcc	.+6      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80a:	81 34       	cpi	r24, 0x41	; 65
     80c:	31 f0       	breq	.+12     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     80e:	78 c0       	rjmp	.+240    	; 0x900 <__stack+0xa1>
     810:	83 34       	cpi	r24, 0x43	; 67
     812:	e9 f0       	breq	.+58     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     814:	84 34       	cpi	r24, 0x44	; 68
     816:	41 f1       	breq	.+80     	; 0x868 <__stack+0x9>
     818:	73 c0       	rjmp	.+230    	; 0x900 <__stack+0xa1>
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
     81a:	2a b3       	in	r18, 0x1a	; 26
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	02 c0       	rjmp	.+4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	6a 95       	dec	r22
     828:	e2 f7       	brpl	.-8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     82a:	80 95       	com	r24
     82c:	82 23       	and	r24, r18
     82e:	8a bb       	out	0x1a, r24	; 26
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     830:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_direction)
		{
			case INPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
     832:	08 95       	ret
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
     834:	27 b3       	in	r18, 0x17	; 23
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	02 c0       	rjmp	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	6a 95       	dec	r22
     842:	e2 f7       	brpl	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     844:	80 95       	com	r24
     846:	82 23       	and	r24, r18
     848:	87 bb       	out	0x17, r24	; 23
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     84a:	80 e0       	ldi	r24, 0x00	; 0
		{
			case INPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
     84c:	08 95       	ret
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
     84e:	24 b3       	in	r18, 0x14	; 20
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	02 c0       	rjmp	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	6a 95       	dec	r22
     85c:	e2 f7       	brpl	.-8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     85e:	80 95       	com	r24
     860:	82 23       	and	r24, r18
     862:	84 bb       	out	0x14, r24	; 20
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     864:	80 e0       	ldi	r24, 0x00	; 0
			case INPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
     866:	08 95       	ret
				case PORT_D:	DDRD &= ~ (1<<u8_a_pinNumber);	break;
     868:	21 b3       	in	r18, 0x11	; 17
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	02 c0       	rjmp	.+4      	; 0x874 <__stack+0x15>
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	6a 95       	dec	r22
     876:	e2 f7       	brpl	.-8      	; 0x870 <__stack+0x11>
     878:	80 95       	com	r24
     87a:	82 23       	and	r24, r18
     87c:	81 bb       	out	0x11, r24	; 17
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     87e:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_D:	DDRD &= ~ (1<<u8_a_pinNumber);	break;
     880:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;	break;
			}
			break;
			
			case OUTPUT:
			switch(u8_a_portNumber)
     882:	82 34       	cpi	r24, 0x42	; 66
     884:	a9 f0       	breq	.+42     	; 0x8b0 <__stack+0x51>
     886:	18 f4       	brcc	.+6      	; 0x88e <__stack+0x2f>
     888:	81 34       	cpi	r24, 0x41	; 65
     88a:	31 f0       	breq	.+12     	; 0x898 <__stack+0x39>
     88c:	3b c0       	rjmp	.+118    	; 0x904 <__stack+0xa5>
     88e:	83 34       	cpi	r24, 0x43	; 67
     890:	d9 f0       	breq	.+54     	; 0x8c8 <__stack+0x69>
     892:	84 34       	cpi	r24, 0x44	; 68
     894:	29 f1       	breq	.+74     	; 0x8e0 <__stack+0x81>
     896:	36 c0       	rjmp	.+108    	; 0x904 <__stack+0xa5>
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
     898:	2a b3       	in	r18, 0x1a	; 26
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	6a 95       	dec	r22
     8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <__stack+0x41>
     8a8:	82 2b       	or	r24, r18
     8aa:	8a bb       	out	0x1a, r24	; 26
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case OUTPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
     8ae:	08 95       	ret
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
     8b0:	27 b3       	in	r18, 0x17	; 23
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__stack+0x5d>
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	6a 95       	dec	r22
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <__stack+0x59>
     8c0:	82 2b       	or	r24, r18
     8c2:	87 bb       	out	0x17, r24	; 23
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     8c4:	80 e0       	ldi	r24, 0x00	; 0
			
			case OUTPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
     8c6:	08 95       	ret
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
     8c8:	24 b3       	in	r18, 0x14	; 20
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	6a 95       	dec	r22
     8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
     8d8:	82 2b       	or	r24, r18
     8da:	84 bb       	out	0x14, r24	; 20
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
			case OUTPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
     8de:	08 95       	ret
				case PORT_D:	DDRD |= (1<<u8_a_pinNumber);		break;
     8e0:	21 b3       	in	r18, 0x11	; 17
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <__stack+0x8d>
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	6a 95       	dec	r22
     8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <__stack+0x89>
     8f0:	82 2b       	or	r24, r18
     8f2:	81 bb       	out	0x11, r24	; 17
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     8f4:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	DDRD |= (1<<u8_a_pinNumber);		break;
     8f6:	08 95       	ret
		}
		
	}
	else
	{
		error = WRONG_PIN_NUMBER;
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;	break;
			}
			break;
			
			default:
			error = WRONG_DIRECTION;
     8fc:	84 e0       	ldi	r24, 0x04	; 4
     8fe:	08 95       	ret
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_D:	DDRD &= ~ (1<<u8_a_pinNumber);	break;
				default:		error = WRONG_PORT_NUMBER;	break;
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 95       	ret
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	DDRD |= (1<<u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;	break;
     904:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;
}
     906:	08 95       	ret

00000908 <DIO_write>:
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
	if (u8_a_pinNumber < 8)
     908:	68 30       	cpi	r22, 0x08	; 8
     90a:	08 f0       	brcs	.+2      	; 0x90e <DIO_write+0x6>
     90c:	80 c0       	rjmp	.+256    	; 0xa0e <DIO_write+0x106>
	{
		switch(u8_a_value)
     90e:	44 23       	and	r20, r20
     910:	21 f0       	breq	.+8      	; 0x91a <DIO_write+0x12>
     912:	41 30       	cpi	r20, 0x01	; 1
     914:	09 f4       	brne	.+2      	; 0x918 <DIO_write+0x10>
     916:	40 c0       	rjmp	.+128    	; 0x998 <DIO_write+0x90>
     918:	7c c0       	rjmp	.+248    	; 0xa12 <DIO_write+0x10a>
		{
			case LOW:
			switch(u8_a_portNumber)
     91a:	82 34       	cpi	r24, 0x42	; 66
     91c:	b1 f0       	breq	.+44     	; 0x94a <DIO_write+0x42>
     91e:	18 f4       	brcc	.+6      	; 0x926 <DIO_write+0x1e>
     920:	81 34       	cpi	r24, 0x41	; 65
     922:	31 f0       	breq	.+12     	; 0x930 <DIO_write+0x28>
     924:	78 c0       	rjmp	.+240    	; 0xa16 <DIO_write+0x10e>
     926:	83 34       	cpi	r24, 0x43	; 67
     928:	e9 f0       	breq	.+58     	; 0x964 <DIO_write+0x5c>
     92a:	84 34       	cpi	r24, 0x44	; 68
     92c:	41 f1       	breq	.+80     	; 0x97e <DIO_write+0x76>
     92e:	73 c0       	rjmp	.+230    	; 0xa16 <DIO_write+0x10e>
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
     930:	2b b3       	in	r18, 0x1b	; 27
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	02 c0       	rjmp	.+4      	; 0x93c <DIO_write+0x34>
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	6a 95       	dec	r22
     93e:	e2 f7       	brpl	.-8      	; 0x938 <DIO_write+0x30>
     940:	80 95       	com	r24
     942:	82 23       	and	r24, r18
     944:	8b bb       	out	0x1b, r24	; 27
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     946:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_value)
		{
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
     948:	08 95       	ret
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
     94a:	28 b3       	in	r18, 0x18	; 24
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	02 c0       	rjmp	.+4      	; 0x956 <DIO_write+0x4e>
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	6a 95       	dec	r22
     958:	e2 f7       	brpl	.-8      	; 0x952 <DIO_write+0x4a>
     95a:	80 95       	com	r24
     95c:	82 23       	and	r24, r18
     95e:	88 bb       	out	0x18, r24	; 24
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     960:	80 e0       	ldi	r24, 0x00	; 0
		{
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
     962:	08 95       	ret
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
     964:	25 b3       	in	r18, 0x15	; 21
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	02 c0       	rjmp	.+4      	; 0x970 <DIO_write+0x68>
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	6a 95       	dec	r22
     972:	e2 f7       	brpl	.-8      	; 0x96c <DIO_write+0x64>
     974:	80 95       	com	r24
     976:	82 23       	and	r24, r18
     978:	85 bb       	out	0x15, r24	; 21
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     97a:	80 e0       	ldi	r24, 0x00	; 0
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
     97c:	08 95       	ret
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
     97e:	22 b3       	in	r18, 0x12	; 18
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	02 c0       	rjmp	.+4      	; 0x98a <DIO_write+0x82>
     986:	88 0f       	add	r24, r24
     988:	99 1f       	adc	r25, r25
     98a:	6a 95       	dec	r22
     98c:	e2 f7       	brpl	.-8      	; 0x986 <DIO_write+0x7e>
     98e:	80 95       	com	r24
     990:	82 23       	and	r24, r18
     992:	82 bb       	out	0x12, r24	; 18
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     994:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
     996:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;		break;
			}
			break;
				
			case HIGH:
			switch(u8_a_portNumber)
     998:	82 34       	cpi	r24, 0x42	; 66
     99a:	a9 f0       	breq	.+42     	; 0x9c6 <DIO_write+0xbe>
     99c:	18 f4       	brcc	.+6      	; 0x9a4 <DIO_write+0x9c>
     99e:	81 34       	cpi	r24, 0x41	; 65
     9a0:	31 f0       	breq	.+12     	; 0x9ae <DIO_write+0xa6>
     9a2:	3b c0       	rjmp	.+118    	; 0xa1a <DIO_write+0x112>
     9a4:	83 34       	cpi	r24, 0x43	; 67
     9a6:	d9 f0       	breq	.+54     	; 0x9de <DIO_write+0xd6>
     9a8:	84 34       	cpi	r24, 0x44	; 68
     9aa:	29 f1       	breq	.+74     	; 0x9f6 <DIO_write+0xee>
     9ac:	36 c0       	rjmp	.+108    	; 0xa1a <DIO_write+0x112>
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
     9ae:	2b b3       	in	r18, 0x1b	; 27
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <DIO_write+0xb2>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	6a 95       	dec	r22
     9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <DIO_write+0xae>
     9be:	82 2b       	or	r24, r18
     9c0:	8b bb       	out	0x1b, r24	; 27
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     9c2:	80 e0       	ldi	r24, 0x00	; 0
			break;
				
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
     9c4:	08 95       	ret
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
     9c6:	28 b3       	in	r18, 0x18	; 24
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <DIO_write+0xca>
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	6a 95       	dec	r22
     9d4:	e2 f7       	brpl	.-8      	; 0x9ce <DIO_write+0xc6>
     9d6:	82 2b       	or	r24, r18
     9d8:	88 bb       	out	0x18, r24	; 24
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     9da:	80 e0       	ldi	r24, 0x00	; 0
				
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
     9dc:	08 95       	ret
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
     9de:	25 b3       	in	r18, 0x15	; 21
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <DIO_write+0xe2>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	6a 95       	dec	r22
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <DIO_write+0xde>
     9ee:	82 2b       	or	r24, r18
     9f0:	85 bb       	out	0x15, r24	; 21
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     9f2:	80 e0       	ldi	r24, 0x00	; 0
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
     9f4:	08 95       	ret
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
     9f6:	22 b3       	in	r18, 0x12	; 18
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <DIO_write+0xfa>
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	6a 95       	dec	r22
     a04:	e2 f7       	brpl	.-8      	; 0x9fe <DIO_write+0xf6>
     a06:	82 2b       	or	r24, r18
     a08:	82 bb       	out	0x12, r24	; 18
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
     a0c:	08 95       	ret
				break;
		}
	}
	else
	{
		error = WRONG_PIN_NUMBER;
     a0e:	82 e0       	ldi	r24, 0x02	; 2
     a10:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;		break;
			}
			break;
				
			default:
				error = WRONG_VALUE;
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	08 95       	ret
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;		break;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	08 95       	ret
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;		break;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;

}
     a1c:	08 95       	ret

00000a1e <I2C_getStatus>:

u8 I2C_getStatus(void)
{
	u8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
     a1e:	81 b1       	in	r24, 0x01	; 1
     a20:	92 b1       	in	r25, 0x02	; 2
	return status;
}
     a22:	88 7f       	andi	r24, 0xF8	; 248
     a24:	08 95       	ret

00000a26 <I2C_addressWrite>:
 void I2C_addressWrite(u8 I2C_address) {
	 TWDR = I2C_address+0;
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	94 b9       	out	0x04, r25	; 4
     a2a:	83 b9       	out	0x03, r24	; 3
     a2c:	08 95       	ret

00000a2e <I2C_addressRead>:
 }
void I2C_addressRead(u8 I2C_address) {
	 TWDR = I2C_address+1;
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	94 b9       	out	0x04, r25	; 4
     a34:	83 b9       	out	0x03, r24	; 3
     a36:	08 95       	ret

00000a38 <I2C_WriteData>:
 }
 void I2C_WriteData(u8 data) {
	    /* Put data On TWI data Register */
    TWDR = data;
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	94 b9       	out	0x04, r25	; 4
     a3c:	83 b9       	out	0x03, r24	; 3
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     a3e:	84 e8       	ldi	r24, 0x84	; 132
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	97 bf       	out	0x37, r25	; 55
     a44:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(!GET_BIT(TWCR,TWINT));
     a46:	86 b7       	in	r24, 0x36	; 54
     a48:	97 b7       	in	r25, 0x37	; 55
     a4a:	87 ff       	sbrs	r24, 7
     a4c:	fc cf       	rjmp	.-8      	; 0xa46 <I2C_WriteData+0xe>
 } 
     a4e:	08 95       	ret

00000a50 <I2C_readWithACK>:
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     a50:	84 ec       	ldi	r24, 0xC4	; 196
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	97 bf       	out	0x37, r25	; 55
     a56:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(!GET_BIT(TWCR,TWINT));
     a58:	86 b7       	in	r24, 0x36	; 54
     a5a:	97 b7       	in	r25, 0x37	; 55
     a5c:	87 ff       	sbrs	r24, 7
     a5e:	fc cf       	rjmp	.-8      	; 0xa58 <I2C_readWithACK+0x8>
    /* Read Data */
    return TWDR;
     a60:	83 b1       	in	r24, 0x03	; 3
     a62:	94 b1       	in	r25, 0x04	; 4
}
     a64:	08 95       	ret

00000a66 <I2C_readWithNACK>:
{
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     a66:	84 e8       	ldi	r24, 0x84	; 132
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	97 bf       	out	0x37, r25	; 55
     a6c:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(!GET_BIT(TWCR,TWINT));
     a6e:	86 b7       	in	r24, 0x36	; 54
     a70:	97 b7       	in	r25, 0x37	; 55
     a72:	87 ff       	sbrs	r24, 7
     a74:	fc cf       	rjmp	.-8      	; 0xa6e <I2C_readWithNACK+0x8>
    /* Read Data */
    return TWDR;
     a76:	83 b1       	in	r24, 0x03	; 3
     a78:	94 b1       	in	r25, 0x04	; 4
}
     a7a:	08 95       	ret

00000a7c <I2C_init>:
 /*---------------------------------------------------------------*/
void I2C_init(void)
{   TWBR = I2C_CFG_BITRATE;
     a7c:	8c e0       	ldi	r24, 0x0C	; 12
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	91 b9       	out	0x01, r25	; 1
     a82:	80 b9       	out	0x00, r24	; 0
	TWSR = 0x00;
     a84:	12 b8       	out	0x02, r1	; 2
     a86:	11 b8       	out	0x01, r1	; 1
   /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
   //TWBR=BITRATE(TWSR);   //  TWBR = 0x02;
   
     /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	93 b9       	out	0x03, r25	; 3
     a8e:	82 b9       	out	0x02, r24	; 2
	
    TWCR = (1<<TWEN); /* enable TWI */ 
     a90:	84 e0       	ldi	r24, 0x04	; 4
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	97 bf       	out	0x37, r25	; 55
     a96:	86 bf       	out	0x36, r24	; 54
     a98:	08 95       	ret

00000a9a <I2C_start>:
} 
en_I2CError_t I2C_start(void)
{  	

    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     a9a:	84 ea       	ldi	r24, 0xA4	; 164
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	97 bf       	out	0x37, r25	; 55
     aa0:	86 bf       	out	0x36, r24	; 54
	 while (!(TWCR & (1<<TWINT)));	
     aa2:	86 b7       	in	r24, 0x36	; 54
     aa4:	97 b7       	in	r25, 0x37	; 55
     aa6:	87 ff       	sbrs	r24, 7
     aa8:	fc cf       	rjmp	.-8      	; 0xaa2 <I2C_start+0x8>
	if (I2C_getStatus()!=START_STATE)
     aaa:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_getStatus>
     aae:	88 30       	cpi	r24, 0x08	; 8
     ab0:	11 f0       	breq	.+4      	; 0xab6 <I2C_start+0x1c>
	{  
		return START_NOT_SENT;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	08 95       	ret
	} 
	else
	{ 	
		return EVENT_OK;
     ab6:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
     ab8:	08 95       	ret

00000aba <I2C_repeated_start>:
en_I2CError_t I2C_repeated_start(void)
{ 
   
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     aba:	84 ea       	ldi	r24, 0xA4	; 164
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	97 bf       	out	0x37, r25	; 55
     ac0:	86 bf       	out	0x36, r24	; 54
 	 while (!(TWCR & (1<<TWINT)));	
     ac2:	86 b7       	in	r24, 0x36	; 54
     ac4:	97 b7       	in	r25, 0x37	; 55
     ac6:	87 ff       	sbrs	r24, 7
     ac8:	fc cf       	rjmp	.-8      	; 0xac2 <I2C_repeated_start+0x8>

	if (I2C_getStatus()!=REP_START_STATE)
     aca:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_getStatus>
     ace:	80 31       	cpi	r24, 0x10	; 16
     ad0:	11 f0       	breq	.+4      	; 0xad6 <I2C_repeated_start+0x1c>
	{
		return REPEATED_START_NOT_SENT;
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	08 95       	ret
	} 
	else
	{
		return EVENT_OK;
     ad6:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ad8:	08 95       	ret

00000ada <I2C_address_select>:
en_I2CError_t I2C_address_select(u8 adress,u8 rw)
{  
	if (rw==write)
     ada:	61 11       	cpse	r22, r1
     adc:	03 c0       	rjmp	.+6      	; 0xae4 <I2C_address_select+0xa>
	{
		//TWDR = adress+0;
		I2C_addressWrite(adress);
     ade:	0e 94 13 05 	call	0xa26	; 0xa26 <I2C_addressWrite>
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <I2C_address_select+0x12>
	}
	else if (rw ==read )
     ae4:	61 30       	cpi	r22, 0x01	; 1
     ae6:	11 f4       	brne	.+4      	; 0xaec <I2C_address_select+0x12>
	{
		//TWDR = adress+1;
		I2C_addressRead(adress);
     ae8:	0e 94 17 05 	call	0xa2e	; 0xa2e <I2C_addressRead>
	else
	{
		
	}
	
	       TWCR = (1 << TWINT) | (1 << TWEN);
     aec:	84 e8       	ldi	r24, 0x84	; 132
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	97 bf       	out	0x37, r25	; 55
     af2:	86 bf       	out	0x36, r24	; 54
	
			   while (!(TWCR&(1<<TWINT)));
     af4:	86 b7       	in	r24, 0x36	; 54
     af6:	97 b7       	in	r25, 0x37	; 55
     af8:	87 ff       	sbrs	r24, 7
     afa:	fc cf       	rjmp	.-8      	; 0xaf4 <I2C_address_select+0x1a>
	if (I2C_getStatus()==SLA_W_ACK_STATE)
     afc:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_getStatus>
     b00:	88 31       	cpi	r24, 0x18	; 24
     b02:	71 f0       	breq	.+28     	; 0xb20 <I2C_address_select+0x46>
	{   
		 
		return SLA_W_ACK_SENT;
		
	}
	else if(I2C_getStatus()==SLA_W_NACK_STATE)
     b04:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_getStatus>
     b08:	80 32       	cpi	r24, 0x20	; 32
     b0a:	61 f0       	breq	.+24     	; 0xb24 <I2C_address_select+0x4a>
	{  
		
		return SLA_W_NACK_SENT;
		
	}
	if (I2C_getStatus()==SLA_R_ACK_STATE)
     b0c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_getStatus>
     b10:	80 34       	cpi	r24, 0x40	; 64
     b12:	51 f0       	breq	.+20     	; 0xb28 <I2C_address_select+0x4e>
	{    
		
		return SLA_R_ACK_SENT;
		
	}
	else if(I2C_getStatus()==SLA_R_NACK_STATE)
     b14:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_getStatus>
     b18:	88 34       	cpi	r24, 0x48	; 72
     b1a:	41 f4       	brne	.+16     	; 0xb2c <I2C_address_select+0x52>
	{
		return SLA_R_NACK_SENT;
     b1c:	86 e0       	ldi	r24, 0x06	; 6
     b1e:	08 95       	ret
	
			   while (!(TWCR&(1<<TWINT)));
	if (I2C_getStatus()==SLA_W_ACK_STATE)
	{   
		 
		return SLA_W_ACK_SENT;
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	08 95       	ret
		
	}
	else if(I2C_getStatus()==SLA_W_NACK_STATE)
	{  
		
		return SLA_W_NACK_SENT;
     b24:	84 e0       	ldi	r24, 0x04	; 4
     b26:	08 95       	ret
		
	}
	if (I2C_getStatus()==SLA_R_ACK_STATE)
	{    
		
		return SLA_R_ACK_SENT;
     b28:	85 e0       	ldi	r24, 0x05	; 5
     b2a:	08 95       	ret
		
	}
	else
	{   
		
		return SLA_RW_FAILED;	 
     b2c:	87 e0       	ldi	r24, 0x07	; 7
	}
	
}
     b2e:	08 95       	ret

00000b30 <I2C_data_rw>:
en_I2CError_t I2C_data_rw(u8 *data,u8 rw,u8 ack)
 {  
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	ec 01       	movw	r28, r24
	
	 if (rw==write)
     b36:	61 11       	cpse	r22, r1
     b38:	0c c0       	rjmp	.+24     	; 0xb52 <I2C_data_rw+0x22>
	 {
		I2C_WriteData(data);
     b3a:	0e 94 1c 05 	call	0xa38	; 0xa38 <I2C_WriteData>
		
		 if (I2C_getStatus()==DATA_WRITE_ACK_STATE)
     b3e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_getStatus>
     b42:	88 32       	cpi	r24, 0x28	; 40
     b44:	f1 f0       	breq	.+60     	; 0xb82 <I2C_data_rw+0x52>
		 {
			 return DATA_WRITE_ACK_SENT;
		 }
		 else if(I2C_getStatus()==DATA_WRITE_NACK_STATE)
     b46:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_getStatus>
     b4a:	80 33       	cpi	r24, 0x30	; 48
     b4c:	e1 f4       	brne	.+56     	; 0xb86 <I2C_data_rw+0x56>
		 {
			 return DATA_WRITE_NACK_SENT;
     b4e:	89 e0       	ldi	r24, 0x09	; 9
     b50:	1f c0       	rjmp	.+62     	; 0xb90 <I2C_data_rw+0x60>
			 return DATA_WRITE_FAILED;
		 }
		 
	 } 
	 
	 else if (rw==read)
     b52:	61 30       	cpi	r22, 0x01	; 1
     b54:	a9 f4       	brne	.+42     	; 0xb80 <I2C_data_rw+0x50>
	 {
		 if (ack==ACK)
     b56:	41 11       	cpse	r20, r1
     b58:	04 c0       	rjmp	.+8      	; 0xb62 <I2C_data_rw+0x32>
		 {
			*data=I2C_readWithACK();
     b5a:	0e 94 28 05 	call	0xa50	; 0xa50 <I2C_readWithACK>
     b5e:	88 83       	st	Y, r24
     b60:	05 c0       	rjmp	.+10     	; 0xb6c <I2C_data_rw+0x3c>
		 }
		 else if (ack==NACK)
     b62:	41 30       	cpi	r20, 0x01	; 1
     b64:	19 f4       	brne	.+6      	; 0xb6c <I2C_data_rw+0x3c>
		 { 
			*data=I2C_readWithNACK();
     b66:	0e 94 33 05 	call	0xa66	; 0xa66 <I2C_readWithNACK>
     b6a:	88 83       	st	Y, r24
			
		 }
		 
			    
		 if (I2C_getStatus()==DATA_READ_ACK_STATE)
     b6c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_getStatus>
     b70:	80 35       	cpi	r24, 0x50	; 80
     b72:	59 f0       	breq	.+22     	; 0xb8a <I2C_data_rw+0x5a>
		 {
			 return DATA_READ_ACK_SENT;
			 
		 }
		 else if(I2C_getStatus()==DATA_READ_NACK_STATE)
     b74:	0e 94 0f 05 	call	0xa1e	; 0xa1e <I2C_getStatus>
     b78:	88 35       	cpi	r24, 0x58	; 88
     b7a:	49 f4       	brne	.+18     	; 0xb8e <I2C_data_rw+0x5e>
		 {
			 return DATA_READ_NACK_SENT;
     b7c:	8c e0       	ldi	r24, 0x0C	; 12
     b7e:	08 c0       	rjmp	.+16     	; 0xb90 <I2C_data_rw+0x60>
		 }
		 
		 
	 }
	 
 } 
     b80:	07 c0       	rjmp	.+14     	; 0xb90 <I2C_data_rw+0x60>
	 {
		I2C_WriteData(data);
		
		 if (I2C_getStatus()==DATA_WRITE_ACK_STATE)
		 {
			 return DATA_WRITE_ACK_SENT;
     b82:	88 e0       	ldi	r24, 0x08	; 8
     b84:	05 c0       	rjmp	.+10     	; 0xb90 <I2C_data_rw+0x60>
		 {
			 return DATA_WRITE_NACK_SENT;
		 }
		 else
		 {
			 return DATA_WRITE_FAILED;
     b86:	8a e0       	ldi	r24, 0x0A	; 10
     b88:	03 c0       	rjmp	.+6      	; 0xb90 <I2C_data_rw+0x60>
		 }
		 
			    
		 if (I2C_getStatus()==DATA_READ_ACK_STATE)
		 {
			 return DATA_READ_ACK_SENT;
     b8a:	8b e0       	ldi	r24, 0x0B	; 11
     b8c:	01 c0       	rjmp	.+2      	; 0xb90 <I2C_data_rw+0x60>
			 return DATA_READ_NACK_SENT;
			 
		 }
		 else
		 {
			 return DATA_READ_FAILED;
     b8e:	8d e0       	ldi	r24, 0x0D	; 13
		 }
		 
		 
	 }
	 
 } 
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <I2C_stop>:
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     b96:	84 e9       	ldi	r24, 0x94	; 148
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	97 bf       	out	0x37, r25	; 55
     b9c:	86 bf       	out	0x36, r24	; 54
	  while (TWCR&(1<<TWSTO));
     b9e:	86 b7       	in	r24, 0x36	; 54
     ba0:	97 b7       	in	r25, 0x37	; 55
     ba2:	84 fd       	sbrc	r24, 4
     ba4:	fc cf       	rjmp	.-8      	; 0xb9e <I2C_stop+0x8>
}
     ba6:	08 95       	ret

00000ba8 <SPI_initMaster>:
	 DIO_init(PORT_B,4,INPUT);
	 DIO_init(PORT_B,5,INPUT);
	 DIO_init(PORT_B,7,INPUT);
	 DIO_init(PORT_B,6,OUTPUT);

	 SET_BIT(SPCR,SPE);
     ba8:	41 e0       	ldi	r20, 0x01	; 1
     baa:	64 e0       	ldi	r22, 0x04	; 4
     bac:	82 e4       	ldi	r24, 0x42	; 66
     bae:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <DIO_init>
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	65 e0       	ldi	r22, 0x05	; 5
     bb6:	82 e4       	ldi	r24, 0x42	; 66
     bb8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <DIO_init>
     bbc:	41 e0       	ldi	r20, 0x01	; 1
     bbe:	67 e0       	ldi	r22, 0x07	; 7
     bc0:	82 e4       	ldi	r24, 0x42	; 66
     bc2:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <DIO_init>
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	66 e0       	ldi	r22, 0x06	; 6
     bca:	82 e4       	ldi	r24, 0x42	; 66
     bcc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <DIO_init>
     bd0:	41 e0       	ldi	r20, 0x01	; 1
     bd2:	64 e0       	ldi	r22, 0x04	; 4
     bd4:	82 e4       	ldi	r24, 0x42	; 66
     bd6:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     bda:	8d b1       	in	r24, 0x0d	; 13
     bdc:	80 64       	ori	r24, 0x40	; 64
     bde:	8d b9       	out	0x0d, r24	; 13
     be0:	8d b1       	in	r24, 0x0d	; 13
     be2:	80 61       	ori	r24, 0x10	; 16
     be4:	8d b9       	out	0x0d, r24	; 13
     be6:	8e b1       	in	r24, 0x0e	; 14
     be8:	8e 7f       	andi	r24, 0xFE	; 254
     bea:	8e b9       	out	0x0e, r24	; 14
     bec:	8d b1       	in	r24, 0x0d	; 13
     bee:	81 60       	ori	r24, 0x01	; 1
     bf0:	8d b9       	out	0x0d, r24	; 13
     bf2:	8d b1       	in	r24, 0x0d	; 13
     bf4:	82 60       	ori	r24, 0x02	; 2
     bf6:	8d b9       	out	0x0d, r24	; 13
     bf8:	08 95       	ret

00000bfa <SPI_startTransmission>:
}


void SPI_startTransmission (void)
{
	DIO_write(PORT_B,4,LOW);
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	64 e0       	ldi	r22, 0x04	; 4
     bfe:	82 e4       	ldi	r24, 0x42	; 66
     c00:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
     c04:	08 95       	ret

00000c06 <SPI_transmitByte>:
{
	 /*Master*/
	 
	u8 flushBuffer;
	 
	 SPDR=data;
     c06:	8f b9       	out	0x0f, r24	; 15
	 
	 while(GET_BIT(SPSR,SPIF)==0);
     c08:	77 9b       	sbis	0x0e, 7	; 14
     c0a:	fe cf       	rjmp	.-4      	; 0xc08 <SPI_transmitByte+0x2>
	 
	 flushBuffer = SPDR;
     c0c:	8f b1       	in	r24, 0x0f	; 15
	 
	 return flushBuffer;
}
     c0e:	08 95       	ret

00000c10 <TIMER_init>:
		{
			TIMER_1_callBack = funPtr;
		}
		else if (u8_a_timerUsed == TIMER_2)
		{
			TIMER_2_callBack = funPtr;
     c10:	81 11       	cpse	r24, r1
     c12:	0e c0       	rjmp	.+28     	; 0xc30 <TIMER_init+0x20>
     c14:	83 b7       	in	r24, 0x33	; 51
     c16:	87 7f       	andi	r24, 0xF7	; 247
     c18:	83 bf       	out	0x33, r24	; 51
     c1a:	83 b7       	in	r24, 0x33	; 51
     c1c:	8f 7b       	andi	r24, 0xBF	; 191
     c1e:	83 bf       	out	0x33, r24	; 51
     c20:	89 b7       	in	r24, 0x39	; 57
     c22:	81 60       	ori	r24, 0x01	; 1
     c24:	89 bf       	out	0x39, r24	; 57
     c26:	8f b7       	in	r24, 0x3f	; 63
     c28:	80 68       	ori	r24, 0x80	; 128
     c2a:	8f bf       	out	0x3f, r24	; 63
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	08 95       	ret
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	81 f0       	breq	.+32     	; 0xc54 <TIMER_init+0x44>
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	81 f4       	brne	.+32     	; 0xc58 <TIMER_init+0x48>
     c38:	85 b5       	in	r24, 0x25	; 37
     c3a:	87 7f       	andi	r24, 0xF7	; 247
     c3c:	85 bd       	out	0x25, r24	; 37
     c3e:	85 b5       	in	r24, 0x25	; 37
     c40:	8f 7b       	andi	r24, 0xBF	; 191
     c42:	85 bd       	out	0x25, r24	; 37
     c44:	89 b7       	in	r24, 0x39	; 57
     c46:	80 64       	ori	r24, 0x40	; 64
     c48:	89 bf       	out	0x39, r24	; 57
     c4a:	8f b7       	in	r24, 0x3f	; 63
     c4c:	80 68       	ori	r24, 0x80	; 128
     c4e:	8f bf       	out	0x3f, r24	; 63
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	08 95       	ret
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	08 95       	ret
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	08 95       	ret

00000c5c <TIMER_start>:
     c5c:	81 11       	cpse	r24, r1
     c5e:	0b c0       	rjmp	.+22     	; 0xc76 <TIMER_start+0x1a>
     c60:	83 b7       	in	r24, 0x33	; 51
     c62:	84 60       	ori	r24, 0x04	; 4
     c64:	83 bf       	out	0x33, r24	; 51
     c66:	83 b7       	in	r24, 0x33	; 51
     c68:	8d 7f       	andi	r24, 0xFD	; 253
     c6a:	83 bf       	out	0x33, r24	; 51
     c6c:	83 b7       	in	r24, 0x33	; 51
     c6e:	8e 7f       	andi	r24, 0xFE	; 254
     c70:	83 bf       	out	0x33, r24	; 51
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	08 95       	ret
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	69 f0       	breq	.+26     	; 0xc94 <TIMER_start+0x38>
     c7a:	82 30       	cpi	r24, 0x02	; 2
     c7c:	69 f4       	brne	.+26     	; 0xc98 <TIMER_start+0x3c>
     c7e:	85 b5       	in	r24, 0x25	; 37
     c80:	84 60       	ori	r24, 0x04	; 4
     c82:	85 bd       	out	0x25, r24	; 37
     c84:	85 b5       	in	r24, 0x25	; 37
     c86:	82 60       	ori	r24, 0x02	; 2
     c88:	85 bd       	out	0x25, r24	; 37
     c8a:	85 b5       	in	r24, 0x25	; 37
     c8c:	8e 7f       	andi	r24, 0xFE	; 254
     c8e:	85 bd       	out	0x25, r24	; 37
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	08 95       	ret
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	08 95       	ret
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	08 95       	ret

00000c9c <TIMER_stopInterrupt>:
 */
en_timerError_t	TIMER_stopInterrupt(u8 u8_a_timerUsed)
{
	en_timerError_t en_a_error;
	
	if (u8_a_timerUsed == TIMER_0)
     c9c:	81 11       	cpse	r24, r1
     c9e:	07 c0       	rjmp	.+14     	; 0xcae <TIMER_stopInterrupt+0x12>
	{
		CLR_BIT(TIMSK,TOIE0);
     ca0:	89 b7       	in	r24, 0x39	; 57
     ca2:	8e 7f       	andi	r24, 0xFE	; 254
     ca4:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK,OCIE0);
     ca6:	89 b7       	in	r24, 0x39	; 57
     ca8:	8d 7f       	andi	r24, 0xFD	; 253
     caa:	89 bf       	out	0x39, r24	; 57
     cac:	0a c0       	rjmp	.+20     	; 0xcc2 <TIMER_stopInterrupt+0x26>
	}
	else if (u8_a_timerUsed == TIMER_1)
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	41 f0       	breq	.+16     	; 0xcc2 <TIMER_stopInterrupt+0x26>
	{
		
	}
	else if (u8_a_timerUsed == TIMER_2)
     cb2:	82 30       	cpi	r24, 0x02	; 2
     cb4:	31 f4       	brne	.+12     	; 0xcc2 <TIMER_stopInterrupt+0x26>
	{
		CLR_BIT(TIMSK,TOIE2);
     cb6:	89 b7       	in	r24, 0x39	; 57
     cb8:	8f 7b       	andi	r24, 0xBF	; 191
     cba:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK,OCIE2);
     cbc:	89 b7       	in	r24, 0x39	; 57
     cbe:	8f 77       	andi	r24, 0x7F	; 127
     cc0:	89 bf       	out	0x39, r24	; 57
	else
	{
		en_a_error = WRONG_TIMER_USED;
	}
	return en_a_error;
}
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	08 95       	ret

00000cc6 <TIMER_enableInterrupt>:

en_timerError_t	TIMER_enableInterrupt(u8 u8_a_timerUsed)
{
	en_timerError_t en_a_error;
	
	if (u8_a_timerUsed == TIMER_0)
     cc6:	81 11       	cpse	r24, r1
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <TIMER_enableInterrupt+0xc>
	{
		#if		TIMER_0_MODE		==		OV_TIMER
		SET_BIT(TIMSK,TOIE0);
     cca:	89 b7       	in	r24, 0x39	; 57
     ccc:	81 60       	ori	r24, 0x01	; 1
     cce:	89 bf       	out	0x39, r24	; 57
     cd0:	07 c0       	rjmp	.+14     	; 0xce0 <TIMER_enableInterrupt+0x1a>
		#elif	TIMER_0_MODE		==	CTC_TIMER
		SET_BIT(TIMSK,OCIE0);
		#endif
	}
	else if (u8_a_timerUsed == TIMER_1)
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	29 f0       	breq	.+10     	; 0xce0 <TIMER_enableInterrupt+0x1a>
	{
		
	}
	else if (u8_a_timerUsed == TIMER_2)
     cd6:	82 30       	cpi	r24, 0x02	; 2
     cd8:	19 f4       	brne	.+6      	; 0xce0 <TIMER_enableInterrupt+0x1a>
	{
		#if		TIMER_2_MODE		==		OV_TIMER
		SET_BIT(TIMSK,TOIE2);
     cda:	89 b7       	in	r24, 0x39	; 57
     cdc:	80 64       	ori	r24, 0x40	; 64
     cde:	89 bf       	out	0x39, r24	; 57
	else
	{
		en_a_error = WRONG_TIMER_USED;
	}
	return en_a_error;
}
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	08 95       	ret

00000ce4 <TIMER_delay>:
 *Delays the program for the specified time using the specified timer.
 *u8_a_timerUsed The timer to use for the delay (TIMER_0, TIMER_1, or TIMER_2).
 *u32_a_timeInMS The time to delay the program in milliseconds. en_timerError_t Returns TIMER_OK if the operation was successful, or WRONG_TIMER_USED if an invalid timer is specified.
 */
en_timerError_t TIMER_delay(u8 u8_a_timerUsed, u32 u32_a_timeInMS)
{
     ce4:	cf 92       	push	r12
     ce6:	df 92       	push	r13
     ce8:	ef 92       	push	r14
     cea:	ff 92       	push	r15
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
	en_timerError_t en_a_error;
	
	if (u8_a_timerUsed == TIMER_0)
     cf0:	88 23       	and	r24, r24
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <TIMER_delay+0x12>
     cf4:	45 c0       	rjmp	.+138    	; 0xd80 <TIMER_delay+0x9c>
	{

	}
	else if (u8_a_timerUsed == TIMER_1)
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	09 f4       	brne	.+2      	; 0xcfc <TIMER_delay+0x18>
     cfa:	42 c0       	rjmp	.+132    	; 0xd80 <TIMER_delay+0x9c>
	{
		
	}
	else if (u8_a_timerUsed == TIMER_2)
     cfc:	82 30       	cpi	r24, 0x02	; 2
     cfe:	09 f0       	breq	.+2      	; 0xd02 <TIMER_delay+0x1e>
     d00:	3f c0       	rjmp	.+126    	; 0xd80 <TIMER_delay+0x9c>
     d02:	6a 01       	movw	r12, r20
     d04:	7b 01       	movw	r14, r22
	{
		TIMER_stopInterrupt(TIMER_2);
     d06:	0e 94 4e 06 	call	0xc9c	; 0xc9c <TIMER_stopInterrupt>
		u32 numberOfOverflows = 0;
		u8 numberOfRemTicks	= 0;
		
		
		tickTime = TIMER_2_PRESCALER / XTAL_FREQ;
		numberOfTicks = ((u32_a_timeInMS*1000)/tickTime);
     d0a:	a8 ee       	ldi	r26, 0xE8	; 232
     d0c:	b3 e0       	ldi	r27, 0x03	; 3
     d0e:	a7 01       	movw	r20, r14
     d10:	96 01       	movw	r18, r12
     d12:	0e 94 f7 07 	call	0xfee	; 0xfee <__muluhisi3>
     d16:	6b 01       	movw	r12, r22
     d18:	7c 01       	movw	r14, r24
     d1a:	68 94       	set
     d1c:	13 f8       	bld	r1, 3
     d1e:	f6 94       	lsr	r15
     d20:	e7 94       	ror	r14
     d22:	d7 94       	ror	r13
     d24:	c7 94       	ror	r12
     d26:	16 94       	lsr	r1
     d28:	d1 f7       	brne	.-12     	; 0xd1e <TIMER_delay+0x3a>
		numberOfOverflows = numberOfTicks / 256;
     d2a:	8b 01       	movw	r16, r22
     d2c:	9c 01       	movw	r18, r24
     d2e:	0f 2e       	mov	r0, r31
     d30:	fc e0       	ldi	r31, 0x0C	; 12
     d32:	36 95       	lsr	r19
     d34:	27 95       	ror	r18
     d36:	17 95       	ror	r17
     d38:	07 95       	ror	r16
     d3a:	fa 95       	dec	r31
     d3c:	d1 f7       	brne	.-12     	; 0xd32 <TIMER_delay+0x4e>
     d3e:	f0 2d       	mov	r31, r0
		numberOfRemTicks	= numberOfTicks % 256;
		
		if (numberOfRemTicks)
     d40:	cc 20       	and	r12, r12
     d42:	51 f0       	breq	.+20     	; 0xd58 <TIMER_delay+0x74>
		{
			numberOfOverflows++;
     d44:	0f 5f       	subi	r16, 0xFF	; 255
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	2f 4f       	sbci	r18, 0xFF	; 255
     d4a:	3f 4f       	sbci	r19, 0xFF	; 255
			TCNT2 = 256 - numberOfRemTicks;
     d4c:	c1 94       	neg	r12
     d4e:	c4 bc       	out	0x24, r12	; 36
 *Delays the program for the specified time using the specified timer.
 *u8_a_timerUsed The timer to use for the delay (TIMER_0, TIMER_1, or TIMER_2).
 *u32_a_timeInMS The time to delay the program in milliseconds. en_timerError_t Returns TIMER_OK if the operation was successful, or WRONG_TIMER_USED if an invalid timer is specified.
 */
en_timerError_t TIMER_delay(u8 u8_a_timerUsed, u32 u32_a_timeInMS)
{
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	ba 01       	movw	r22, r20
     d56:	0c c0       	rjmp	.+24     	; 0xd70 <TIMER_delay+0x8c>
			numberOfOverflows++;
			TCNT2 = 256 - numberOfRemTicks;
		}
		else
		{
			TCNT2 = 0;
     d58:	14 bc       	out	0x24, r1	; 36
     d5a:	fa cf       	rjmp	.-12     	; 0xd50 <TIMER_delay+0x6c>
		}
		while(overflowCounter < numberOfOverflows)		
		{
			while((GET_BIT(TIFR, TOV2)) == 0);
     d5c:	08 b6       	in	r0, 0x38	; 56
     d5e:	06 fe       	sbrs	r0, 6
     d60:	fd cf       	rjmp	.-6      	; 0xd5c <TIMER_delay+0x78>
			SET_BIT(TIFR, TOV2);
     d62:	88 b7       	in	r24, 0x38	; 56
     d64:	80 64       	ori	r24, 0x40	; 64
     d66:	88 bf       	out	0x38, r24	; 56
			overflowCounter++;
     d68:	4f 5f       	subi	r20, 0xFF	; 255
     d6a:	5f 4f       	sbci	r21, 0xFF	; 255
     d6c:	6f 4f       	sbci	r22, 0xFF	; 255
     d6e:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		else
		{
			TCNT2 = 0;
		}
		while(overflowCounter < numberOfOverflows)		
     d70:	40 17       	cp	r20, r16
     d72:	51 07       	cpc	r21, r17
     d74:	62 07       	cpc	r22, r18
     d76:	73 07       	cpc	r23, r19
     d78:	88 f3       	brcs	.-30     	; 0xd5c <TIMER_delay+0x78>
			while((GET_BIT(TIFR, TOV2)) == 0);
			SET_BIT(TIFR, TOV2);
			overflowCounter++;
		}
		
		TIMER_enableInterrupt(TIMER_2);
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <TIMER_enableInterrupt>
	{
		en_a_error = WRONG_TIMER_USED;
	}
	return en_a_error;
	
}
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	df 90       	pop	r13
     d8c:	cf 90       	pop	r12
     d8e:	08 95       	ret

00000d90 <__vector_11>:

#if			TIMER_0_MODE		==		OV_TIMER
ISR(TIMER0_OVF)
{
     d90:	1f 92       	push	r1
     d92:	0f 92       	push	r0
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	0f 92       	push	r0
     d98:	11 24       	eor	r1, r1
     d9a:	2f 93       	push	r18
     d9c:	3f 93       	push	r19
     d9e:	4f 93       	push	r20
     da0:	5f 93       	push	r21
     da2:	6f 93       	push	r22
     da4:	7f 93       	push	r23
     da6:	8f 93       	push	r24
     da8:	9f 93       	push	r25
     daa:	af 93       	push	r26
     dac:	bf 93       	push	r27
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
	if (u8_g_normalToPwm == 0	)
     db2:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u8_g_normalToPwm>
     db6:	81 11       	cpse	r24, r1
     db8:	35 c0       	rjmp	.+106    	; 0xe24 <__vector_11+0x94>
	{
		
		static u32 OVFCounter = 0;
		OVFCounter  ++;
     dba:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <OVFCounter.1713>
     dbe:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <OVFCounter.1713+0x1>
     dc2:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <OVFCounter.1713+0x2>
     dc6:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <OVFCounter.1713+0x3>
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	a1 1d       	adc	r26, r1
     dce:	b1 1d       	adc	r27, r1
     dd0:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <OVFCounter.1713>
     dd4:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <OVFCounter.1713+0x1>
     dd8:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <OVFCounter.1713+0x2>
     ddc:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <OVFCounter.1713+0x3>
		if (OVFCounter  == u32_g_timer0NumberOfOVFs)
     de0:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <u32_g_timer0NumberOfOVFs>
     de4:	50 91 5c 01 	lds	r21, 0x015C	; 0x80015c <u32_g_timer0NumberOfOVFs+0x1>
     de8:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <u32_g_timer0NumberOfOVFs+0x2>
     dec:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <u32_g_timer0NumberOfOVFs+0x3>
     df0:	84 17       	cp	r24, r20
     df2:	95 07       	cpc	r25, r21
     df4:	a6 07       	cpc	r26, r22
     df6:	b7 07       	cpc	r27, r23
     df8:	09 f0       	breq	.+2      	; 0xdfc <__vector_11+0x6c>
     dfa:	4a c0       	rjmp	.+148    	; 0xe90 <__vector_11+0x100>
		{
			if(TIMER_0_callBack != nullPtr)
     dfc:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <TIMER_0_callBack>
     e00:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <TIMER_0_callBack+0x1>
     e04:	30 97       	sbiw	r30, 0x00	; 0
     e06:	09 f0       	breq	.+2      	; 0xe0a <__vector_11+0x7a>
			{
				TIMER_0_callBack();
     e08:	09 95       	icall
			}
			OVFCounter  =	0;
     e0a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <OVFCounter.1713>
     e0e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <OVFCounter.1713+0x1>
     e12:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <OVFCounter.1713+0x2>
     e16:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <OVFCounter.1713+0x3>
			TCNT0 = 256 - u8_g_timer0RemTicks;
     e1a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <u8_g_timer0RemTicks>
     e1e:	81 95       	neg	r24
     e20:	82 bf       	out	0x32, r24	; 50
     e22:	36 c0       	rjmp	.+108    	; 0xe90 <__vector_11+0x100>
		}
	}
	else
	{
		static u8 u8_gs_generatorState = 0;
		if (u8_gs_generatorState)
     e24:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8_gs_generatorState.1714>
     e28:	88 23       	and	r24, r24
     e2a:	c9 f0       	breq	.+50     	; 0xe5e <__vector_11+0xce>
		{
			DIO_write(PORT_D,4,LOW);
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	64 e0       	ldi	r22, 0x04	; 4
     e30:	84 e4       	ldi	r24, 0x44	; 68
     e32:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
			DIO_write(PORT_D,5,LOW);
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	65 e0       	ldi	r22, 0x05	; 5
     e3a:	84 e4       	ldi	r24, 0x44	; 68
     e3c:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
			TCNT0 = 256 - u16_g_offTime;
     e40:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <u16_g_offTime>
     e44:	81 95       	neg	r24
     e46:	82 bf       	out	0x32, r24	; 50
			if (u16_g_offTime < 256)
     e48:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <u16_g_offTime>
     e4c:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <u16_g_offTime+0x1>
     e50:	8f 3f       	cpi	r24, 0xFF	; 255
     e52:	91 05       	cpc	r25, r1
     e54:	09 f0       	breq	.+2      	; 0xe58 <__vector_11+0xc8>
     e56:	e0 f4       	brcc	.+56     	; 0xe90 <__vector_11+0x100>
			{
				u8_gs_generatorState = 0;
     e58:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <u8_gs_generatorState.1714>
     e5c:	19 c0       	rjmp	.+50     	; 0xe90 <__vector_11+0x100>
			}	
		}
		else
		{
			DIO_write(PORT_D,4, HIGH);
     e5e:	41 e0       	ldi	r20, 0x01	; 1
     e60:	64 e0       	ldi	r22, 0x04	; 4
     e62:	84 e4       	ldi	r24, 0x44	; 68
     e64:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
			DIO_write(PORT_D,5, HIGH);
     e68:	41 e0       	ldi	r20, 0x01	; 1
     e6a:	65 e0       	ldi	r22, 0x05	; 5
     e6c:	84 e4       	ldi	r24, 0x44	; 68
     e6e:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
			TCNT0 = 256 - u16_g_onTime;
     e72:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <u16_g_onTime>
     e76:	81 95       	neg	r24
     e78:	82 bf       	out	0x32, r24	; 50
			if (u16_g_onTime < 256)
     e7a:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <u16_g_onTime>
     e7e:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <u16_g_onTime+0x1>
     e82:	8f 3f       	cpi	r24, 0xFF	; 255
     e84:	91 05       	cpc	r25, r1
     e86:	09 f0       	breq	.+2      	; 0xe8a <__vector_11+0xfa>
     e88:	18 f4       	brcc	.+6      	; 0xe90 <__vector_11+0x100>
			{
				u8_gs_generatorState = 1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8_gs_generatorState.1714>
			}
			
		}
		
	}
}
     e90:	ff 91       	pop	r31
     e92:	ef 91       	pop	r30
     e94:	bf 91       	pop	r27
     e96:	af 91       	pop	r26
     e98:	9f 91       	pop	r25
     e9a:	8f 91       	pop	r24
     e9c:	7f 91       	pop	r23
     e9e:	6f 91       	pop	r22
     ea0:	5f 91       	pop	r21
     ea2:	4f 91       	pop	r20
     ea4:	3f 91       	pop	r19
     ea6:	2f 91       	pop	r18
     ea8:	0f 90       	pop	r0
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	0f 90       	pop	r0
     eae:	1f 90       	pop	r1
     eb0:	18 95       	reti

00000eb2 <__vector_5>:
	}
}
#endif

ISR(TIMER2_OVF)
{		
     eb2:	1f 92       	push	r1
     eb4:	0f 92       	push	r0
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	0f 92       	push	r0
     eba:	11 24       	eor	r1, r1
     ebc:	2f 93       	push	r18
     ebe:	3f 93       	push	r19
     ec0:	4f 93       	push	r20
     ec2:	5f 93       	push	r21
     ec4:	6f 93       	push	r22
     ec6:	7f 93       	push	r23
     ec8:	8f 93       	push	r24
     eca:	9f 93       	push	r25
     ecc:	af 93       	push	r26
     ece:	bf 93       	push	r27
     ed0:	ef 93       	push	r30
     ed2:	ff 93       	push	r31
		static u32 OVFCounter = 0;
		OVFCounter  ++;
     ed4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <OVFCounter.1720>
     ed8:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <OVFCounter.1720+0x1>
     edc:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <OVFCounter.1720+0x2>
     ee0:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <OVFCounter.1720+0x3>
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	a1 1d       	adc	r26, r1
     ee8:	b1 1d       	adc	r27, r1
     eea:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <OVFCounter.1720>
     eee:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <OVFCounter.1720+0x1>
     ef2:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <OVFCounter.1720+0x2>
     ef6:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <OVFCounter.1720+0x3>
		if (OVFCounter  == u32_g_timer2NumberOfOVFs)
     efa:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <u32_g_timer2NumberOfOVFs>
     efe:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <u32_g_timer2NumberOfOVFs+0x1>
     f02:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <u32_g_timer2NumberOfOVFs+0x2>
     f06:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <u32_g_timer2NumberOfOVFs+0x3>
     f0a:	84 17       	cp	r24, r20
     f0c:	95 07       	cpc	r25, r21
     f0e:	a6 07       	cpc	r26, r22
     f10:	b7 07       	cpc	r27, r23
     f12:	99 f4       	brne	.+38     	; 0xf3a <__vector_5+0x88>
		{
			if(TIMER_2_callBack != nullPtr)
     f14:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <TIMER_2_callBack>
     f18:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <TIMER_2_callBack+0x1>
     f1c:	30 97       	sbiw	r30, 0x00	; 0
     f1e:	09 f0       	breq	.+2      	; 0xf22 <__vector_5+0x70>
			{
				TIMER_2_callBack();
     f20:	09 95       	icall
			}
			OVFCounter  =	0;
     f22:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <OVFCounter.1720>
     f26:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <OVFCounter.1720+0x1>
     f2a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <OVFCounter.1720+0x2>
     f2e:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <OVFCounter.1720+0x3>
			TCNT0 = 256 - u8_g_timer2RemTicks;
     f32:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_g_timer2RemTicks>
     f36:	81 95       	neg	r24
     f38:	82 bf       	out	0x32, r24	; 50
			
		}

     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	bf 91       	pop	r27
     f40:	af 91       	pop	r26
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	7f 91       	pop	r23
     f48:	6f 91       	pop	r22
     f4a:	5f 91       	pop	r21
     f4c:	4f 91       	pop	r20
     f4e:	3f 91       	pop	r19
     f50:	2f 91       	pop	r18
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <UART_Init>:
#include "uart.h"

void UART_Init(void)
{
	
	DIO_write(PORT_D, 0, INPUT);
     f5c:	40 e0       	ldi	r20, 0x00	; 0
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	84 e4       	ldi	r24, 0x44	; 68
     f62:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
	DIO_write(PORT_D, 1, OUTPUT);
     f66:	41 e0       	ldi	r20, 0x01	; 1
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	84 e4       	ldi	r24, 0x44	; 68
     f6c:	0e 94 84 04 	call	0x908	; 0x908 <DIO_write>
	
	
	
	u8 UCSRCValue = 0;
	SET_BIT(UCSRCValue,7);
	CLR_BIT(UCSRB,2);
     f70:	8a b1       	in	r24, 0x0a	; 10
     f72:	8b 7f       	andi	r24, 0xFB	; 251
     f74:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRCValue,2);
	CLR_BIT(UCSRCValue,4);
	CLR_BIT(UCSRCValue,5);
	CLR_BIT(UCSRCValue,3);    // to select stop bit as -> 1
	
	UBRRL = 103;
     f76:	87 e6       	ldi	r24, 0x67	; 103
     f78:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = UCSRCValue;
     f7a:	86 e8       	ldi	r24, 0x86	; 134
     f7c:	80 bd       	out	0x20, r24	; 32
	//SET_BIT(UCSRC,UCSZ1);
	//SET_BIT(UCSRC,URSEL);
	
	// Enable RX and TX
	//UCSRB = 0x18;
	SET_BIT(UCSRB,RXEN);
     f7e:	8a b1       	in	r24, 0x0a	; 10
     f80:	80 61       	ori	r24, 0x10	; 16
     f82:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB,TXEN);
     f84:	8a b1       	in	r24, 0x0a	; 10
     f86:	88 60       	ori	r24, 0x08	; 8
     f88:	8a b9       	out	0x0a, r24	; 10
     f8a:	08 95       	ret

00000f8c <UART_SendChar>:
}

void UART_SendChar(u8 data)
{
	// Wait until transmission Register Empty
	UDR = data;
     f8c:	8c b9       	out	0x0c, r24	; 12
	while(GET_BIT(UCSRA,6) == 0x00);
     f8e:	5e 9b       	sbis	0x0b, 6	; 11
     f90:	fe cf       	rjmp	.-4      	; 0xf8e <UART_SendChar+0x2>
	
}
     f92:	08 95       	ret

00000f94 <UART_GetChar>:
u8 UART_GetChar(void)
{
	u8 Result;
	// Wait until Reception Complete

	while(	GET_BIT(UCSRA,7) == 0x00);
     f94:	5f 9b       	sbis	0x0b, 7	; 11
     f96:	fe cf       	rjmp	.-4      	; 0xf94 <UART_GetChar>
	Result = UDR;
     f98:	8c b1       	in	r24, 0x0c	; 12

	/* Clear Flag */
	//SET_BIT(UCSRA,RXC);
	return Result;

}
     f9a:	08 95       	ret

00000f9c <UART_sendString>:


void UART_sendString(u8 *str)
{
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	8c 01       	movw	r16, r24
	u8 i=0;
     fa4:	c0 e0       	ldi	r28, 0x00	; 0


	while(str[i]!='\0')
     fa6:	0a c0       	rjmp	.+20     	; 0xfbc <UART_sendString+0x20>
	{
		UART_SendChar(str[i]);
     fa8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <UART_SendChar>
		TIMER_delay(TIMER_2, 10);
     fac:	4a e0       	ldi	r20, 0x0A	; 10
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	0e 94 72 06 	call	0xce4	; 0xce4 <TIMER_delay>
		i++;
     fba:	cf 5f       	subi	r28, 0xFF	; 255
void UART_sendString(u8 *str)
{
	u8 i=0;


	while(str[i]!='\0')
     fbc:	f8 01       	movw	r30, r16
     fbe:	ec 0f       	add	r30, r28
     fc0:	f1 1d       	adc	r31, r1
     fc2:	80 81       	ld	r24, Z
     fc4:	81 11       	cpse	r24, r1
     fc6:	f0 cf       	rjmp	.-32     	; 0xfa8 <UART_sendString+0xc>

	}



}
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	08 95       	ret

00000fd0 <__umulhisi3>:
     fd0:	a2 9f       	mul	r26, r18
     fd2:	b0 01       	movw	r22, r0
     fd4:	b3 9f       	mul	r27, r19
     fd6:	c0 01       	movw	r24, r0
     fd8:	a3 9f       	mul	r26, r19
     fda:	70 0d       	add	r23, r0
     fdc:	81 1d       	adc	r24, r1
     fde:	11 24       	eor	r1, r1
     fe0:	91 1d       	adc	r25, r1
     fe2:	b2 9f       	mul	r27, r18
     fe4:	70 0d       	add	r23, r0
     fe6:	81 1d       	adc	r24, r1
     fe8:	11 24       	eor	r1, r1
     fea:	91 1d       	adc	r25, r1
     fec:	08 95       	ret

00000fee <__muluhisi3>:
     fee:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <__umulhisi3>
     ff2:	a5 9f       	mul	r26, r21
     ff4:	90 0d       	add	r25, r0
     ff6:	b4 9f       	mul	r27, r20
     ff8:	90 0d       	add	r25, r0
     ffa:	a4 9f       	mul	r26, r20
     ffc:	80 0d       	add	r24, r0
     ffe:	91 1d       	adc	r25, r1
    1000:	11 24       	eor	r1, r1
    1002:	08 95       	ret

00001004 <_exit>:
    1004:	f8 94       	cli

00001006 <__stop_program>:
    1006:	ff cf       	rjmp	.-2      	; 0x1006 <__stop_program>
