
CARD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000004fc  00000590  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800068  00800068  00000598  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001137  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f6  00000000  00000000  00001853  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a96  00000000  00000000  00002149  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00002be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071b  00000000  00000000  00002e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e19  00000000  00000000  0000359f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000043b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	
	// Close TCP connection
	ESP8266_Close();
	
*/
SPI_initMaster();
  92:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <SPI_initMaster>
SPI_sendByte("m");
  96:	80 e6       	ldi	r24, 0x60	; 96
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 85 01 	call	0x30a	; 0x30a <SPI_sendByte>
SPI_sendString("momen");
  9e:	82 e6       	ldi	r24, 0x62	; 98
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 89 01 	call	0x312	; 0x312 <SPI_sendString>
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <main+0x14>

000000a8 <DIO_init>:
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
	if (u8_a_pinNumber < 8)
  a8:	68 30       	cpi	r22, 0x08	; 8
  aa:	08 f0       	brcs	.+2      	; 0xae <DIO_init+0x6>
  ac:	80 c0       	rjmp	.+256    	; 0x1ae <DIO_init+0x106>
	{
		
		switch(u8_a_direction)
  ae:	44 23       	and	r20, r20
  b0:	21 f0       	breq	.+8      	; 0xba <DIO_init+0x12>
  b2:	41 30       	cpi	r20, 0x01	; 1
  b4:	09 f4       	brne	.+2      	; 0xb8 <DIO_init+0x10>
  b6:	40 c0       	rjmp	.+128    	; 0x138 <DIO_init+0x90>
  b8:	7c c0       	rjmp	.+248    	; 0x1b2 <DIO_init+0x10a>
		{
			case INPUT:
			switch(u8_a_portNumber)
  ba:	82 34       	cpi	r24, 0x42	; 66
  bc:	b1 f0       	breq	.+44     	; 0xea <DIO_init+0x42>
  be:	18 f4       	brcc	.+6      	; 0xc6 <DIO_init+0x1e>
  c0:	81 34       	cpi	r24, 0x41	; 65
  c2:	31 f0       	breq	.+12     	; 0xd0 <DIO_init+0x28>
  c4:	78 c0       	rjmp	.+240    	; 0x1b6 <DIO_init+0x10e>
  c6:	83 34       	cpi	r24, 0x43	; 67
  c8:	e9 f0       	breq	.+58     	; 0x104 <DIO_init+0x5c>
  ca:	84 34       	cpi	r24, 0x44	; 68
  cc:	41 f1       	breq	.+80     	; 0x11e <DIO_init+0x76>
  ce:	73 c0       	rjmp	.+230    	; 0x1b6 <DIO_init+0x10e>
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_init+0x34>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_init+0x30>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	8a bb       	out	0x1a, r24	; 26
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
  e6:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_direction)
		{
			case INPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
  e8:	08 95       	ret
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
  ea:	27 b3       	in	r18, 0x17	; 23
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_init+0x4e>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	6a 95       	dec	r22
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_init+0x4a>
  fa:	80 95       	com	r24
  fc:	82 23       	and	r24, r18
  fe:	87 bb       	out	0x17, r24	; 23
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
 100:	80 e0       	ldi	r24, 0x00	; 0
		{
			case INPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
 102:	08 95       	ret
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
 104:	24 b3       	in	r18, 0x14	; 20
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_init+0x68>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_init+0x64>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	84 bb       	out	0x14, r24	; 20
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
 11a:	80 e0       	ldi	r24, 0x00	; 0
			case INPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
 11c:	08 95       	ret
				case PORT_D:	DDRD &= ~ (1<<u8_a_pinNumber);	break;
 11e:	21 b3       	in	r18, 0x11	; 17
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_init+0x82>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_init+0x7e>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	81 bb       	out	0x11, r24	; 17
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
 134:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_D:	DDRD &= ~ (1<<u8_a_pinNumber);	break;
 136:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;	break;
			}
			break;
			
			case OUTPUT:
			switch(u8_a_portNumber)
 138:	82 34       	cpi	r24, 0x42	; 66
 13a:	a9 f0       	breq	.+42     	; 0x166 <DIO_init+0xbe>
 13c:	18 f4       	brcc	.+6      	; 0x144 <DIO_init+0x9c>
 13e:	81 34       	cpi	r24, 0x41	; 65
 140:	31 f0       	breq	.+12     	; 0x14e <DIO_init+0xa6>
 142:	3b c0       	rjmp	.+118    	; 0x1ba <DIO_init+0x112>
 144:	83 34       	cpi	r24, 0x43	; 67
 146:	d9 f0       	breq	.+54     	; 0x17e <DIO_init+0xd6>
 148:	84 34       	cpi	r24, 0x44	; 68
 14a:	29 f1       	breq	.+74     	; 0x196 <DIO_init+0xee>
 14c:	36 c0       	rjmp	.+108    	; 0x1ba <DIO_init+0x112>
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
 14e:	2a b3       	in	r18, 0x1a	; 26
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_init+0xb2>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_init+0xae>
 15e:	82 2b       	or	r24, r18
 160:	8a bb       	out	0x1a, r24	; 26
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
 162:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case OUTPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
 164:	08 95       	ret
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
 166:	27 b3       	in	r18, 0x17	; 23
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_init+0xca>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_init+0xc6>
 176:	82 2b       	or	r24, r18
 178:	87 bb       	out	0x17, r24	; 23
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
 17a:	80 e0       	ldi	r24, 0x00	; 0
			
			case OUTPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
 17c:	08 95       	ret
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
 17e:	24 b3       	in	r18, 0x14	; 20
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_init+0xe2>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_init+0xde>
 18e:	82 2b       	or	r24, r18
 190:	84 bb       	out	0x14, r24	; 20
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
 192:	80 e0       	ldi	r24, 0x00	; 0
			case OUTPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
 194:	08 95       	ret
				case PORT_D:	DDRD |= (1<<u8_a_pinNumber);		break;
 196:	21 b3       	in	r18, 0x11	; 17
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_init+0xfa>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_init+0xf6>
 1a6:	82 2b       	or	r24, r18
 1a8:	81 bb       	out	0x11, r24	; 17
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
 1aa:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	DDRD |= (1<<u8_a_pinNumber);		break;
 1ac:	08 95       	ret
		}
		
	}
	else
	{
		error = WRONG_PIN_NUMBER;
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;	break;
			}
			break;
			
			default:
			error = WRONG_DIRECTION;
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	08 95       	ret
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_D:	DDRD &= ~ (1<<u8_a_pinNumber);	break;
				default:		error = WRONG_PORT_NUMBER;	break;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	08 95       	ret
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	DDRD |= (1<<u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;	break;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;
}
 1bc:	08 95       	ret

000001be <DIO_write>:
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
	if (u8_a_pinNumber < 8)
 1be:	68 30       	cpi	r22, 0x08	; 8
 1c0:	08 f0       	brcs	.+2      	; 0x1c4 <DIO_write+0x6>
 1c2:	80 c0       	rjmp	.+256    	; 0x2c4 <DIO_write+0x106>
	{
		switch(u8_a_value)
 1c4:	44 23       	and	r20, r20
 1c6:	21 f0       	breq	.+8      	; 0x1d0 <DIO_write+0x12>
 1c8:	41 30       	cpi	r20, 0x01	; 1
 1ca:	09 f4       	brne	.+2      	; 0x1ce <DIO_write+0x10>
 1cc:	40 c0       	rjmp	.+128    	; 0x24e <DIO_write+0x90>
 1ce:	7c c0       	rjmp	.+248    	; 0x2c8 <DIO_write+0x10a>
		{
			case LOW:
			switch(u8_a_portNumber)
 1d0:	82 34       	cpi	r24, 0x42	; 66
 1d2:	b1 f0       	breq	.+44     	; 0x200 <DIO_write+0x42>
 1d4:	18 f4       	brcc	.+6      	; 0x1dc <DIO_write+0x1e>
 1d6:	81 34       	cpi	r24, 0x41	; 65
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <DIO_write+0x28>
 1da:	78 c0       	rjmp	.+240    	; 0x2cc <DIO_write+0x10e>
 1dc:	83 34       	cpi	r24, 0x43	; 67
 1de:	e9 f0       	breq	.+58     	; 0x21a <DIO_write+0x5c>
 1e0:	84 34       	cpi	r24, 0x44	; 68
 1e2:	41 f1       	breq	.+80     	; 0x234 <DIO_write+0x76>
 1e4:	73 c0       	rjmp	.+230    	; 0x2cc <DIO_write+0x10e>
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
 1e6:	2b b3       	in	r18, 0x1b	; 27
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_write+0x34>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_write+0x30>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	8b bb       	out	0x1b, r24	; 27
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_value)
		{
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
 1fe:	08 95       	ret
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
 200:	28 b3       	in	r18, 0x18	; 24
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_write+0x4e>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_write+0x4a>
 210:	80 95       	com	r24
 212:	82 23       	and	r24, r18
 214:	88 bb       	out	0x18, r24	; 24
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 216:	80 e0       	ldi	r24, 0x00	; 0
		{
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
 218:	08 95       	ret
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
 21a:	25 b3       	in	r18, 0x15	; 21
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_write+0x68>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_write+0x64>
 22a:	80 95       	com	r24
 22c:	82 23       	and	r24, r18
 22e:	85 bb       	out	0x15, r24	; 21
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 230:	80 e0       	ldi	r24, 0x00	; 0
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
 232:	08 95       	ret
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
 234:	22 b3       	in	r18, 0x12	; 18
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_write+0x82>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_write+0x7e>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	82 bb       	out	0x12, r24	; 18
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 24a:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
 24c:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;		break;
			}
			break;
				
			case HIGH:
			switch(u8_a_portNumber)
 24e:	82 34       	cpi	r24, 0x42	; 66
 250:	a9 f0       	breq	.+42     	; 0x27c <DIO_write+0xbe>
 252:	18 f4       	brcc	.+6      	; 0x25a <DIO_write+0x9c>
 254:	81 34       	cpi	r24, 0x41	; 65
 256:	31 f0       	breq	.+12     	; 0x264 <DIO_write+0xa6>
 258:	3b c0       	rjmp	.+118    	; 0x2d0 <DIO_write+0x112>
 25a:	83 34       	cpi	r24, 0x43	; 67
 25c:	d9 f0       	breq	.+54     	; 0x294 <DIO_write+0xd6>
 25e:	84 34       	cpi	r24, 0x44	; 68
 260:	29 f1       	breq	.+74     	; 0x2ac <DIO_write+0xee>
 262:	36 c0       	rjmp	.+108    	; 0x2d0 <DIO_write+0x112>
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
 264:	2b b3       	in	r18, 0x1b	; 27
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_write+0xb2>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_write+0xae>
 274:	82 2b       	or	r24, r18
 276:	8b bb       	out	0x1b, r24	; 27
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 278:	80 e0       	ldi	r24, 0x00	; 0
			break;
				
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
 27a:	08 95       	ret
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
 27c:	28 b3       	in	r18, 0x18	; 24
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_write+0xca>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_write+0xc6>
 28c:	82 2b       	or	r24, r18
 28e:	88 bb       	out	0x18, r24	; 24
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 290:	80 e0       	ldi	r24, 0x00	; 0
				
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
 292:	08 95       	ret
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
 294:	25 b3       	in	r18, 0x15	; 21
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_write+0xe2>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_write+0xde>
 2a4:	82 2b       	or	r24, r18
 2a6:	85 bb       	out	0x15, r24	; 21
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 2a8:	80 e0       	ldi	r24, 0x00	; 0
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
 2aa:	08 95       	ret
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
 2ac:	22 b3       	in	r18, 0x12	; 18
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_write+0xfa>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_write+0xf6>
 2bc:	82 2b       	or	r24, r18
 2be:	82 bb       	out	0x12, r24	; 18
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 2c0:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
 2c2:	08 95       	ret
				break;
		}
	}
	else
	{
		error = WRONG_PIN_NUMBER;
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;		break;
			}
			break;
				
			default:
				error = WRONG_VALUE;
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	08 95       	ret
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;		break;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	08 95       	ret
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;		break;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;

}
 2d2:	08 95       	ret

000002d4 <SPI_initMaster>:


 while(GET_BIT(SPSR,SPIF)==0) ;

 return SPDR;
 }
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	64 e0       	ldi	r22, 0x04	; 4
 2d8:	82 e4       	ldi	r24, 0x42	; 66
 2da:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_init>
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	65 e0       	ldi	r22, 0x05	; 5
 2e2:	82 e4       	ldi	r24, 0x42	; 66
 2e4:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_init>
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	67 e0       	ldi	r22, 0x07	; 7
 2ec:	82 e4       	ldi	r24, 0x42	; 66
 2ee:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_init>
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	66 e0       	ldi	r22, 0x06	; 6
 2f6:	82 e4       	ldi	r24, 0x42	; 66
 2f8:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_init>
 2fc:	8d b1       	in	r24, 0x0d	; 13
 2fe:	80 64       	ori	r24, 0x40	; 64
 300:	8d b9       	out	0x0d, r24	; 13
 302:	8d b1       	in	r24, 0x0d	; 13
 304:	80 61       	ori	r24, 0x10	; 16
 306:	8d b9       	out	0x0d, r24	; 13
 308:	08 95       	ret

0000030a <SPI_sendByte>:
 30a:	8f b9       	out	0x0f, r24	; 15
 30c:	77 9b       	sbis	0x0e, 7	; 14
 30e:	fe cf       	rjmp	.-4      	; 0x30c <SPI_sendByte+0x2>
 310:	08 95       	ret

00000312 <SPI_sendString>:
 void SPI_sendString(u8*string)
 {
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	ec 01       	movw	r28, r24
 while(*string!='\0')
 318:	03 c0       	rjmp	.+6      	; 0x320 <SPI_sendString+0xe>
 {
 SPI_sendByte(*string);
 31a:	0e 94 85 01 	call	0x30a	; 0x30a <SPI_sendByte>
 string++;
 31e:	21 96       	adiw	r28, 0x01	; 1

 return SPDR;
 }
 void SPI_sendString(u8*string)
 {
 while(*string!='\0')
 320:	88 81       	ld	r24, Y
 322:	81 11       	cpse	r24, r1
 324:	fa cf       	rjmp	.-12     	; 0x31a <SPI_sendString+0x8>
 {
 SPI_sendByte(*string);
 string++;

 }
 }
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <__vector_11>:
	
}

#if			TIMER_0_MODE		==		OV_TIMER
ISR(TIMER0_OVF)
{
 32c:	1f 92       	push	r1
 32e:	0f 92       	push	r0
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	0f 92       	push	r0
 334:	11 24       	eor	r1, r1
 336:	2f 93       	push	r18
 338:	3f 93       	push	r19
 33a:	4f 93       	push	r20
 33c:	5f 93       	push	r21
 33e:	6f 93       	push	r22
 340:	7f 93       	push	r23
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	af 93       	push	r26
 348:	bf 93       	push	r27
 34a:	ef 93       	push	r30
 34c:	ff 93       	push	r31
	if (u8_g_normalToPwm == 0	)
 34e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <u8_g_normalToPwm>
 352:	81 11       	cpse	r24, r1
 354:	35 c0       	rjmp	.+106    	; 0x3c0 <__vector_11+0x94>
	{
		
		static u32 OVFCounter = 0;
		OVFCounter  ++;
 356:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <OVFCounter.1713>
 35a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <OVFCounter.1713+0x1>
 35e:	a0 91 6f 00 	lds	r26, 0x006F	; 0x80006f <OVFCounter.1713+0x2>
 362:	b0 91 70 00 	lds	r27, 0x0070	; 0x800070 <OVFCounter.1713+0x3>
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	a1 1d       	adc	r26, r1
 36a:	b1 1d       	adc	r27, r1
 36c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <OVFCounter.1713>
 370:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <OVFCounter.1713+0x1>
 374:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <OVFCounter.1713+0x2>
 378:	b0 93 70 00 	sts	0x0070, r27	; 0x800070 <OVFCounter.1713+0x3>
		if (OVFCounter  == u32_g_timer0NumberOfOVFs)
 37c:	40 91 7f 00 	lds	r20, 0x007F	; 0x80007f <u32_g_timer0NumberOfOVFs>
 380:	50 91 80 00 	lds	r21, 0x0080	; 0x800080 <u32_g_timer0NumberOfOVFs+0x1>
 384:	60 91 81 00 	lds	r22, 0x0081	; 0x800081 <u32_g_timer0NumberOfOVFs+0x2>
 388:	70 91 82 00 	lds	r23, 0x0082	; 0x800082 <u32_g_timer0NumberOfOVFs+0x3>
 38c:	84 17       	cp	r24, r20
 38e:	95 07       	cpc	r25, r21
 390:	a6 07       	cpc	r26, r22
 392:	b7 07       	cpc	r27, r23
 394:	09 f0       	breq	.+2      	; 0x398 <__vector_11+0x6c>
 396:	4a c0       	rjmp	.+148    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		{
			if(TIMER_0_callBack != nullPtr)
 398:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <TIMER_0_callBack>
 39c:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <TIMER_0_callBack+0x1>
 3a0:	30 97       	sbiw	r30, 0x00	; 0
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <__vector_11+0x7a>
			{
				TIMER_0_callBack();
 3a4:	09 95       	icall
			}
			OVFCounter  =	0;
 3a6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <OVFCounter.1713>
 3aa:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <OVFCounter.1713+0x1>
 3ae:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <OVFCounter.1713+0x2>
 3b2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <OVFCounter.1713+0x3>
			TCNT0 = 256 - u8_g_timer0RemTicks;
 3b6:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <u8_g_timer0RemTicks>
 3ba:	81 95       	neg	r24
 3bc:	82 bf       	out	0x32, r24	; 50
 3be:	36 c0       	rjmp	.+108    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		}
	}
	else
	{
		static u8 u8_gs_generatorState = 0;
		if (u8_gs_generatorState)
 3c0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <u8_gs_generatorState.1714>
 3c4:	88 23       	and	r24, r24
 3c6:	c9 f0       	breq	.+50     	; 0x3fa <__vector_11+0xce>
		{
			DIO_write(PORT_D,4,LOW);
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	64 e0       	ldi	r22, 0x04	; 4
 3cc:	84 e4       	ldi	r24, 0x44	; 68
 3ce:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_write>
			DIO_write(PORT_D,5,LOW);
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	65 e0       	ldi	r22, 0x05	; 5
 3d6:	84 e4       	ldi	r24, 0x44	; 68
 3d8:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_write>
			TCNT0 = 256 - u16_g_offTime;
 3dc:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <u16_g_offTime>
 3e0:	81 95       	neg	r24
 3e2:	82 bf       	out	0x32, r24	; 50
			if (u16_g_offTime < 256)
 3e4:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <u16_g_offTime>
 3e8:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <u16_g_offTime+0x1>
 3ec:	8f 3f       	cpi	r24, 0xFF	; 255
 3ee:	91 05       	cpc	r25, r1
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <__vector_11+0xc8>
 3f2:	e0 f4       	brcc	.+56     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			{
				u8_gs_generatorState = 0;
 3f4:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <u8_gs_generatorState.1714>
 3f8:	19 c0       	rjmp	.+50     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			}	
		}
		else
		{
			DIO_write(PORT_D,4, HIGH);
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	64 e0       	ldi	r22, 0x04	; 4
 3fe:	84 e4       	ldi	r24, 0x44	; 68
 400:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_write>
			DIO_write(PORT_D,5, HIGH);
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	65 e0       	ldi	r22, 0x05	; 5
 408:	84 e4       	ldi	r24, 0x44	; 68
 40a:	0e 94 df 00 	call	0x1be	; 0x1be <DIO_write>
			TCNT0 = 256 - u16_g_onTime;
 40e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <u16_g_onTime>
 412:	81 95       	neg	r24
 414:	82 bf       	out	0x32, r24	; 50
			if (u16_g_onTime < 256)
 416:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <u16_g_onTime>
 41a:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <u16_g_onTime+0x1>
 41e:	8f 3f       	cpi	r24, 0xFF	; 255
 420:	91 05       	cpc	r25, r1
 422:	09 f0       	breq	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 424:	18 f4       	brcc	.+6      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			{
				u8_gs_generatorState = 1;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <u8_gs_generatorState.1714>
			}
			
		}
		
	}
}
 42c:	ff 91       	pop	r31
 42e:	ef 91       	pop	r30
 430:	bf 91       	pop	r27
 432:	af 91       	pop	r26
 434:	9f 91       	pop	r25
 436:	8f 91       	pop	r24
 438:	7f 91       	pop	r23
 43a:	6f 91       	pop	r22
 43c:	5f 91       	pop	r21
 43e:	4f 91       	pop	r20
 440:	3f 91       	pop	r19
 442:	2f 91       	pop	r18
 444:	0f 90       	pop	r0
 446:	0f be       	out	0x3f, r0	; 63
 448:	0f 90       	pop	r0
 44a:	1f 90       	pop	r1
 44c:	18 95       	reti

0000044e <__vector_5>:
	}
}
#endif

ISR(TIMER2_OVF)
{		
 44e:	1f 92       	push	r1
 450:	0f 92       	push	r0
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	0f 92       	push	r0
 456:	11 24       	eor	r1, r1
 458:	2f 93       	push	r18
 45a:	3f 93       	push	r19
 45c:	4f 93       	push	r20
 45e:	5f 93       	push	r21
 460:	6f 93       	push	r22
 462:	7f 93       	push	r23
 464:	8f 93       	push	r24
 466:	9f 93       	push	r25
 468:	af 93       	push	r26
 46a:	bf 93       	push	r27
 46c:	ef 93       	push	r30
 46e:	ff 93       	push	r31
		static u32 OVFCounter = 0;
		OVFCounter  ++;
 470:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 474:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 478:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <__data_end+0x2>
 47c:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <__data_end+0x3>
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	a1 1d       	adc	r26, r1
 484:	b1 1d       	adc	r27, r1
 486:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 48a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 48e:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <__data_end+0x2>
 492:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <__data_end+0x3>
		if (OVFCounter  == u32_g_timer2NumberOfOVFs)
 496:	40 91 7a 00 	lds	r20, 0x007A	; 0x80007a <u32_g_timer2NumberOfOVFs>
 49a:	50 91 7b 00 	lds	r21, 0x007B	; 0x80007b <u32_g_timer2NumberOfOVFs+0x1>
 49e:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <u32_g_timer2NumberOfOVFs+0x2>
 4a2:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <u32_g_timer2NumberOfOVFs+0x3>
 4a6:	84 17       	cp	r24, r20
 4a8:	95 07       	cpc	r25, r21
 4aa:	a6 07       	cpc	r26, r22
 4ac:	b7 07       	cpc	r27, r23
 4ae:	99 f4       	brne	.+38     	; 0x4d6 <__vector_5+0x88>
		{
			if(TIMER_2_callBack != nullPtr)
 4b0:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <TIMER_2_callBack>
 4b4:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <TIMER_2_callBack+0x1>
 4b8:	30 97       	sbiw	r30, 0x00	; 0
 4ba:	09 f0       	breq	.+2      	; 0x4be <__vector_5+0x70>
			{
				TIMER_2_callBack();
 4bc:	09 95       	icall
			}
			OVFCounter  =	0;
 4be:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 4c2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 4c6:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
 4ca:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
			TCNT0 = 256 - u8_g_timer2RemTicks;
 4ce:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <u8_g_timer2RemTicks>
 4d2:	81 95       	neg	r24
 4d4:	82 bf       	out	0x32, r24	; 50
			
		}

 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <_exit>:
 4f8:	f8 94       	cli

000004fa <__stop_program>:
 4fa:	ff cf       	rjmp	.-2      	; 0x4fa <__stop_program>
