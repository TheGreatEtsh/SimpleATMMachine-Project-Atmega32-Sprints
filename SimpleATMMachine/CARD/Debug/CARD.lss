
CARD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000102a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e2  00800060  0000102a  000010be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800142  00800142  000011a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035a5  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001002  00000000  00000000  00004ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ef2  00000000  00000000  00005ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ac  00000000  00000000  000079c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d3f  00000000  00000000  00008174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020a6  00000000  00000000  00008eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000af59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e2       	ldi	r30, 0x2A	; 42
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 34       	cpi	r26, 0x42	; 66
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 e4       	ldi	r26, 0x42	; 66
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 36       	cpi	r26, 0x63	; 99
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0e 04 	call	0x81c	; 0x81c <main>
      8a:	0c 94 13 08 	jmp	0x1026	; 0x1026 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
	for (u32 i = 0; i <= 0xFF ; i++)
	{
		EEPROM_writeByte_256((u16)i,0xFF);
		TIMER_delay(TIMER_2,20);
	}
}
      92:	82 e0       	ldi	r24, 0x02	; 2
      94:	0e 94 19 06 	call	0xc32	; 0xc32 <TIMER_init>
      98:	82 e0       	ldi	r24, 0x02	; 2
      9a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <TIMER_stopInterrupt>
      9e:	82 e0       	ldi	r24, 0x02	; 2
      a0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <TIMER_start>
      a4:	0e 94 cd 03 	call	0x79a	; 0x79a <LCD_PinsInit>
      a8:	0e 94 af 03 	call	0x75e	; 0x75e <LCD_Init>
      ac:	0e 94 f6 03 	call	0x7ec	; 0x7ec <TRIGGER_init>
      b0:	0e 94 84 02 	call	0x508	; 0x508 <EEPROM_init>
      b4:	44 e6       	ldi	r20, 0x64	; 100
      b6:	50 e0       	ldi	r21, 0x00	; 0
      b8:	60 e0       	ldi	r22, 0x00	; 0
      ba:	70 e0       	ldi	r23, 0x00	; 0
      bc:	82 e0       	ldi	r24, 0x02	; 2
      be:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
      c2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <UART_Init>
      c6:	44 e6       	ldi	r20, 0x64	; 100
      c8:	50 e0       	ldi	r21, 0x00	; 0
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	70 e0       	ldi	r23, 0x00	; 0
      ce:	82 e0       	ldi	r24, 0x02	; 2
      d0:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
      d4:	0e 94 ee 05 	call	0xbdc	; 0xbdc <SPI_initMaster>
      d8:	44 e6       	ldi	r20, 0x64	; 100
      da:	50 e0       	ldi	r21, 0x00	; 0
      dc:	60 e0       	ldi	r22, 0x00	; 0
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	82 e0       	ldi	r24, 0x02	; 2
      e2:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
      e6:	0e 94 0e 06 	call	0xc1c	; 0xc1c <SPI_startTransmission>
      ea:	07 c0       	rjmp	.+14     	; 0xfa <APP_init+0x68>
      ec:	4a e0       	ldi	r20, 0x0A	; 10
      ee:	50 e0       	ldi	r21, 0x00	; 0
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	70 e0       	ldi	r23, 0x00	; 0
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
      fa:	8a ea       	ldi	r24, 0xAA	; 170
      fc:	0e 94 14 06 	call	0xc28	; 0xc28 <SPI_transmitByte>
     100:	85 35       	cpi	r24, 0x55	; 85
     102:	a1 f7       	brne	.-24     	; 0xec <APP_init+0x5a>
     104:	07 c0       	rjmp	.+14     	; 0x114 <APP_init+0x82>
     106:	4a e0       	ldi	r20, 0x0A	; 10
     108:	50 e0       	ldi	r21, 0x00	; 0
     10a:	60 e0       	ldi	r22, 0x00	; 0
     10c:	70 e0       	ldi	r23, 0x00	; 0
     10e:	82 e0       	ldi	r24, 0x02	; 2
     110:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
     114:	8a ea       	ldi	r24, 0xAA	; 170
     116:	0e 94 14 06 	call	0xc28	; 0xc28 <SPI_transmitByte>
     11a:	85 35       	cpi	r24, 0x55	; 85
     11c:	a1 f7       	brne	.-24     	; 0x106 <APP_init+0x74>
     11e:	44 e6       	ldi	r20, 0x64	; 100
     120:	50 e0       	ldi	r21, 0x00	; 0
     122:	60 e0       	ldi	r22, 0x00	; 0
     124:	70 e0       	ldi	r23, 0x00	; 0
     126:	82 e0       	ldi	r24, 0x02	; 2
     128:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
     12c:	08 95       	ret

0000012e <APP_checkEEPROM>:

u8 APP_checkEEPROM(void)
{
     12e:	1f 93       	push	r17
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	1f 92       	push	r1
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
	u8 dataRecieved = 0;
     13a:	19 82       	std	Y+1, r1	; 0x01
	for(u8 i = PAN_ADDRESS; i < PIN_ADDRESS + 0x10; i++)
     13c:	10 e1       	ldi	r17, 0x10	; 16
     13e:	12 c0       	rjmp	.+36     	; 0x164 <APP_checkEEPROM+0x36>
	{
		EEPROM_readByte_256(i, &dataRecieved);
     140:	be 01       	movw	r22, r28
     142:	6f 5f       	subi	r22, 0xFF	; 255
     144:	7f 4f       	sbci	r23, 0xFF	; 255
     146:	81 2f       	mov	r24, r17
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 b6 02 	call	0x56c	; 0x56c <EEPROM_readByte_256>
		TIMER_delay(TIMER_2,10);
     14e:	4a e0       	ldi	r20, 0x0A	; 10
     150:	50 e0       	ldi	r21, 0x00	; 0
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	70 e0       	ldi	r23, 0x00	; 0
     156:	82 e0       	ldi	r24, 0x02	; 2
     158:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
		if (dataRecieved != 255)
     15c:	89 81       	ldd	r24, Y+1	; 0x01
     15e:	8f 3f       	cpi	r24, 0xFF	; 255
     160:	19 f4       	brne	.+6      	; 0x168 <APP_checkEEPROM+0x3a>
}

u8 APP_checkEEPROM(void)
{
	u8 dataRecieved = 0;
	for(u8 i = PAN_ADDRESS; i < PIN_ADDRESS + 0x10; i++)
     162:	1f 5f       	subi	r17, 0xFF	; 255
     164:	10 34       	cpi	r17, 0x40	; 64
     166:	60 f3       	brcs	.-40     	; 0x140 <APP_checkEEPROM+0x12>
		{
			break;
		}
	}
	
	if(dataRecieved != 255)
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	8f 3f       	cpi	r24, 0xFF	; 255
     16c:	11 f0       	breq	.+4      	; 0x172 <APP_checkEEPROM+0x44>
	{
		return EEPROM_NOT_EMPTY;
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	01 c0       	rjmp	.+2      	; 0x174 <APP_checkEEPROM+0x46>
	}
	else
	{
		return EEPROM_EMPTY;
     172:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     174:	0f 90       	pop	r0
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	1f 91       	pop	r17
     17c:	08 95       	ret

0000017e <APP_superLoop>:
	
	TIMER_delay(TIMER_2, 100);
}

void APP_superLoop(void)
{
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	a1 97       	sbiw	r28, 0x21	; 33
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	f8 94       	cli
     18c:	de bf       	out	0x3e, r29	; 62
     18e:	0f be       	out	0x3f, r0	; 63
     190:	cd bf       	out	0x3d, r28	; 61
	/*Step 1 -> if eeprom is empty goto PROGRAMMING_MODE*/
	u8 checkEEPROM = EEPROM_EMPTY, buffer = 0, counter = 0, true = 0;
	
	u8 PAN [21]			= {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
     192:	fe 01       	movw	r30, r28
     194:	31 96       	adiw	r30, 0x01	; 1
     196:	85 e1       	ldi	r24, 0x15	; 21
     198:	df 01       	movw	r26, r30
     19a:	1d 92       	st	X+, r1
     19c:	8a 95       	dec	r24
     19e:	e9 f7       	brne	.-6      	; 0x19a <APP_superLoop+0x1c>
	u8 PIN [6]			= {0,0,0,0,0,0};
     1a0:	86 e0       	ldi	r24, 0x06	; 6
     1a2:	75 96       	adiw	r30, 0x15	; 21
     1a4:	df 01       	movw	r26, r30
     1a6:	98 2f       	mov	r25, r24
     1a8:	1d 92       	st	X+, r1
     1aa:	9a 95       	dec	r25
     1ac:	e9 f7       	brne	.-6      	; 0x1a8 <APP_superLoop+0x2a>
	u8 PINCopy [6]		= {0,0,0,0,0,0};
     1ae:	36 96       	adiw	r30, 0x06	; 6
     1b0:	df 01       	movw	r26, r30
     1b2:	1d 92       	st	X+, r1
     1b4:	8a 95       	dec	r24
     1b6:	e9 f7       	brne	.-6      	; 0x1b2 <APP_superLoop+0x34>
	checkEEPROM = APP_checkEEPROM();
     1b8:	0e 94 97 00 	call	0x12e	; 0x12e <APP_checkEEPROM>
	
	if (checkEEPROM == EEPROM_NOT_EMPTY)
     1bc:	81 30       	cpi	r24, 0x01	; 1
     1be:	19 f4       	brne	.+6      	; 0x1c6 <APP_superLoop+0x48>
	{
		cardMode = USER_MODE;
     1c0:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <cardMode>
     1c4:	03 c0       	rjmp	.+6      	; 0x1cc <APP_superLoop+0x4e>
	}
	else
	{
		cardMode = PROGRAMMING_MODE;
     1c6:	82 e0       	ldi	r24, 0x02	; 2
     1c8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <cardMode>
	}
	
	/*Step 2 -> if not choose between PROGRAMMING_MODE '2' & USER_MODE = '1'*/
	while (1)	
	{	
		switch(cardMode)
     1cc:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <cardMode>
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	09 f4       	brne	.+2      	; 0x1d6 <APP_superLoop+0x58>
     1d4:	d9 c0       	rjmp	.+434    	; 0x388 <APP_superLoop+0x20a>
     1d6:	82 30       	cpi	r24, 0x02	; 2
     1d8:	c9 f7       	brne	.-14     	; 0x1cc <APP_superLoop+0x4e>
		{
			case PROGRAMMING_MODE:
			switch (programmingState)
     1da:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	e1 f1       	breq	.+120    	; 0x25a <APP_superLoop+0xdc>
     1e2:	20 f0       	brcs	.+8      	; 0x1ec <APP_superLoop+0x6e>
     1e4:	82 30       	cpi	r24, 0x02	; 2
     1e6:	09 f4       	brne	.+2      	; 0x1ea <APP_superLoop+0x6c>
     1e8:	43 c0       	rjmp	.+134    	; 0x270 <APP_superLoop+0xf2>
     1ea:	f0 cf       	rjmp	.-32     	; 0x1cc <APP_superLoop+0x4e>
			{
				/*Step 3 -> in PROGRAMMING_MODE step 1 -> Send on UART "Please Enter Card PAN"*/
				case PRO_INITIAL_STATE:
				UART_sendString("Please Enter Card PAN\r");
     1ec:	80 e6       	ldi	r24, 0x60	; 96
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 df 07 	call	0xfbe	; 0xfbe <UART_sendString>
				
				
				/*Step 3 -> in PROGRAMMING_MODE step 2 -> wait for the user to enter the PAN till it enters enter through uart*/
				counter = 0;
     1f4:	00 e0       	ldi	r16, 0x00	; 0
				buffer = 0;
     1f6:	10 e0       	ldi	r17, 0x00	; 0
				while (buffer != '\r')
     1f8:	14 c0       	rjmp	.+40     	; 0x222 <APP_superLoop+0xa4>
				{
					
					buffer = UART_GetChar();
     1fa:	0e 94 db 07 	call	0xfb6	; 0xfb6 <UART_GetChar>
     1fe:	18 2f       	mov	r17, r24
					while(buffer >= 48 && buffer <= 57)
     200:	0c c0       	rjmp	.+24     	; 0x21a <APP_superLoop+0x9c>
					{
						UART_SendChar(buffer);
     202:	81 2f       	mov	r24, r17
     204:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_SendChar>
						PAN[counter] = buffer;
     208:	e1 e0       	ldi	r30, 0x01	; 1
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	ec 0f       	add	r30, r28
     20e:	fd 1f       	adc	r31, r29
     210:	e0 0f       	add	r30, r16
     212:	f1 1d       	adc	r31, r1
     214:	10 83       	st	Z, r17
						counter++;
     216:	0f 5f       	subi	r16, 0xFF	; 255
						buffer = 0;
     218:	10 e0       	ldi	r17, 0x00	; 0
				buffer = 0;
				while (buffer != '\r')
				{
					
					buffer = UART_GetChar();
					while(buffer >= 48 && buffer <= 57)
     21a:	80 ed       	ldi	r24, 0xD0	; 208
     21c:	81 0f       	add	r24, r17
     21e:	8a 30       	cpi	r24, 0x0A	; 10
     220:	80 f3       	brcs	.-32     	; 0x202 <APP_superLoop+0x84>
				
				
				/*Step 3 -> in PROGRAMMING_MODE step 2 -> wait for the user to enter the PAN till it enters enter through uart*/
				counter = 0;
				buffer = 0;
				while (buffer != '\r')
     222:	1d 30       	cpi	r17, 0x0D	; 13
     224:	51 f7       	brne	.-44     	; 0x1fa <APP_superLoop+0x7c>
						PAN[counter] = buffer;
						counter++;
						buffer = 0;
					}
				}
				UART_SendChar('\r');
     226:	8d e0       	ldi	r24, 0x0D	; 13
     228:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_SendChar>
				TIMER_delay(TIMER_2, 10);
     22c:	4a e0       	ldi	r20, 0x0A	; 10
     22e:	50 e0       	ldi	r21, 0x00	; 0
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	70 e0       	ldi	r23, 0x00	; 0
     234:	82 e0       	ldi	r24, 0x02	; 2
     236:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
				
				if(counter < 16 || counter > 19)
     23a:	00 51       	subi	r16, 0x10	; 16
     23c:	04 30       	cpi	r16, 0x04	; 4
     23e:	28 f0       	brcs	.+10     	; 0x24a <APP_superLoop+0xcc>
				{
					UART_sendString("PAN is not correct\r");
     240:	87 e7       	ldi	r24, 0x77	; 119
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 df 07 	call	0xfbe	; 0xfbe <UART_sendString>
					break;
     248:	c1 cf       	rjmp	.-126    	; 0x1cc <APP_superLoop+0x4e>
				}
				else
				{
					UART_sendString("PAN is valid\r");
     24a:	8b e8       	ldi	r24, 0x8B	; 139
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 df 07 	call	0xfbe	; 0xfbe <UART_sendString>
					programmingState = PRO_SAVING_PAN;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
					break;
     258:	b9 cf       	rjmp	.-142    	; 0x1cc <APP_superLoop+0x4e>
				}
				
				/*Step 3 -> in PROGRAMMING_MODE step 3 -> save PAN in the EEPROM from address 0x0010*/
				case PRO_SAVING_PAN:
				EEPROM_writeString_256(0x10,PAN);
     25a:	be 01       	movw	r22, r28
     25c:	6f 5f       	subi	r22, 0xFF	; 255
     25e:	7f 4f       	sbci	r23, 0xFF	; 255
     260:	80 e1       	ldi	r24, 0x10	; 16
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <EEPROM_writeString_256>
				//LCD_WriteString(PAN);
				programmingState = PRO_RECEIVING_PIN;
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
				break;
     26e:	ae cf       	rjmp	.-164    	; 0x1cc <APP_superLoop+0x4e>
				
				/*Step 3 -> in PROGRAMMING_MODE step 4 -> Send on UART "Please Enter New PIN"*/
				case PRO_RECEIVING_PIN:
				UART_sendString("Please Enter New PIN\rYou can only enter numbers and only 4 digits\r");
     270:	89 e9       	ldi	r24, 0x99	; 153
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 df 07 	call	0xfbe	; 0xfbe <UART_sendString>
				
				/*Step 3 -> in PROGRAMMING_MODE step 5 -> wait for the user to enter the PIN till it enters enter through uart*/
				counter = 0;
     278:	00 e0       	ldi	r16, 0x00	; 0
				buffer = 0;
				while (counter < 4)
     27a:	1b c0       	rjmp	.+54     	; 0x2b2 <APP_superLoop+0x134>
				{	
					buffer = UART_GetChar();
     27c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <UART_GetChar>
     280:	18 2f       	mov	r17, r24
					while(buffer >= 48 && buffer <= 57)
     282:	13 c0       	rjmp	.+38     	; 0x2aa <APP_superLoop+0x12c>
					{
						UART_SendChar('*');
     284:	8a e2       	ldi	r24, 0x2A	; 42
     286:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_SendChar>
						TIMER_delay(TIMER_2, 10);
     28a:	4a e0       	ldi	r20, 0x0A	; 10
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	82 e0       	ldi	r24, 0x02	; 2
     294:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
						/*Step 3 -> in PROGRAMMING_MODE step 6 -> save PIN in firstCopy*/
						PIN[counter] = buffer;
     298:	e6 e1       	ldi	r30, 0x16	; 22
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	ec 0f       	add	r30, r28
     29e:	fd 1f       	adc	r31, r29
     2a0:	e0 0f       	add	r30, r16
     2a2:	f1 1d       	adc	r31, r1
     2a4:	10 83       	st	Z, r17
						counter++;
     2a6:	0f 5f       	subi	r16, 0xFF	; 255
						buffer = 0;
     2a8:	10 e0       	ldi	r17, 0x00	; 0
				counter = 0;
				buffer = 0;
				while (counter < 4)
				{	
					buffer = UART_GetChar();
					while(buffer >= 48 && buffer <= 57)
     2aa:	80 ed       	ldi	r24, 0xD0	; 208
     2ac:	81 0f       	add	r24, r17
     2ae:	8a 30       	cpi	r24, 0x0A	; 10
     2b0:	48 f3       	brcs	.-46     	; 0x284 <APP_superLoop+0x106>
				UART_sendString("Please Enter New PIN\rYou can only enter numbers and only 4 digits\r");
				
				/*Step 3 -> in PROGRAMMING_MODE step 5 -> wait for the user to enter the PIN till it enters enter through uart*/
				counter = 0;
				buffer = 0;
				while (counter < 4)
     2b2:	04 30       	cpi	r16, 0x04	; 4
     2b4:	18 f3       	brcs	.-58     	; 0x27c <APP_superLoop+0xfe>
						PIN[counter] = buffer;
						counter++;
						buffer = 0;
					}
				}
				UART_SendChar('\r');
     2b6:	8d e0       	ldi	r24, 0x0D	; 13
     2b8:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_SendChar>
				TIMER_delay(TIMER_2, 10);
     2bc:	4a e0       	ldi	r20, 0x0A	; 10
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	82 e0       	ldi	r24, 0x02	; 2
     2c6:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
				
				/*Step 3 -> in PROGRAMMING_MODE step 7 -> Send on UART "Please Confirm New PIN"*/
				UART_sendString("Please Confirm New PIN\r");
     2ca:	8c ed       	ldi	r24, 0xDC	; 220
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 df 07 	call	0xfbe	; 0xfbe <UART_sendString>
				
				/*Step 3 -> in PROGRAMMING_MODE step 8 -> wait for the user to enter the PIN till it enters enter through uart*/
				counter = 0;
     2d2:	00 e0       	ldi	r16, 0x00	; 0
				buffer = 0;
				while (counter < 4)
     2d4:	1b c0       	rjmp	.+54     	; 0x30c <APP_superLoop+0x18e>
				{
					buffer = UART_GetChar();
     2d6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <UART_GetChar>
     2da:	18 2f       	mov	r17, r24
					while(buffer >= 48 && buffer <= 57)
     2dc:	13 c0       	rjmp	.+38     	; 0x304 <APP_superLoop+0x186>
					{
						UART_SendChar('*');
     2de:	8a e2       	ldi	r24, 0x2A	; 42
     2e0:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_SendChar>
						TIMER_delay(TIMER_2, 10);
     2e4:	4a e0       	ldi	r20, 0x0A	; 10
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
						/*Step 3 -> in PROGRAMMING_MODE step 9 -> save PIN entered in secondCopy*/
						PINCopy[counter] = buffer;
     2f2:	ec e1       	ldi	r30, 0x1C	; 28
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	ec 0f       	add	r30, r28
     2f8:	fd 1f       	adc	r31, r29
     2fa:	e0 0f       	add	r30, r16
     2fc:	f1 1d       	adc	r31, r1
     2fe:	10 83       	st	Z, r17
						counter++;
     300:	0f 5f       	subi	r16, 0xFF	; 255
						buffer = 0;
     302:	10 e0       	ldi	r17, 0x00	; 0
				counter = 0;
				buffer = 0;
				while (counter < 4)
				{
					buffer = UART_GetChar();
					while(buffer >= 48 && buffer <= 57)
     304:	80 ed       	ldi	r24, 0xD0	; 208
     306:	81 0f       	add	r24, r17
     308:	8a 30       	cpi	r24, 0x0A	; 10
     30a:	48 f3       	brcs	.-46     	; 0x2de <APP_superLoop+0x160>
				UART_sendString("Please Confirm New PIN\r");
				
				/*Step 3 -> in PROGRAMMING_MODE step 8 -> wait for the user to enter the PIN till it enters enter through uart*/
				counter = 0;
				buffer = 0;
				while (counter < 4)
     30c:	04 30       	cpi	r16, 0x04	; 4
     30e:	18 f3       	brcs	.-58     	; 0x2d6 <APP_superLoop+0x158>
						PINCopy[counter] = buffer;
						counter++;
						buffer = 0;
					}
				}
				UART_SendChar('\r');
     310:	8d e0       	ldi	r24, 0x0D	; 13
     312:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_SendChar>
				TIMER_delay(TIMER_2, 10);
     316:	4a e0       	ldi	r20, 0x0A	; 10
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
				
				/*Step 3 -> in PROGRAMMING_MODE step 10 -> compare firstCopy and secondCopy make sure that they are four characters and all numerics"*/
				true = 0;
     324:	40 e0       	ldi	r20, 0x00	; 0
				
				for(counter = 0; counter < 4; counter++)
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	14 c0       	rjmp	.+40     	; 0x352 <APP_superLoop+0x1d4>
				{
					if (PIN[counter] == PINCopy[counter])
     32a:	82 2f       	mov	r24, r18
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	e6 e1       	ldi	r30, 0x16	; 22
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	ec 0f       	add	r30, r28
     334:	fd 1f       	adc	r31, r29
     336:	e8 0f       	add	r30, r24
     338:	f9 1f       	adc	r31, r25
     33a:	30 81       	ld	r19, Z
     33c:	ec e1       	ldi	r30, 0x1C	; 28
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	ec 0f       	add	r30, r28
     342:	fd 1f       	adc	r31, r29
     344:	e8 0f       	add	r30, r24
     346:	f9 1f       	adc	r31, r25
     348:	80 81       	ld	r24, Z
     34a:	38 13       	cpse	r19, r24
     34c:	01 c0       	rjmp	.+2      	; 0x350 <APP_superLoop+0x1d2>
					{
						true++;
     34e:	4f 5f       	subi	r20, 0xFF	; 255
				TIMER_delay(TIMER_2, 10);
				
				/*Step 3 -> in PROGRAMMING_MODE step 10 -> compare firstCopy and secondCopy make sure that they are four characters and all numerics"*/
				true = 0;
				
				for(counter = 0; counter < 4; counter++)
     350:	2f 5f       	subi	r18, 0xFF	; 255
     352:	24 30       	cpi	r18, 0x04	; 4
     354:	50 f3       	brcs	.-44     	; 0x32a <APP_superLoop+0x1ac>
						true++;
					}
				}
				
				/*Step 3 -> in PROGRAMMING_MODE step 11 -> if there is a mistake print "Wrong PIN" and got to step 4*/
				if (true != 4)
     356:	44 30       	cpi	r20, 0x04	; 4
     358:	61 f0       	breq	.+24     	; 0x372 <APP_superLoop+0x1f4>
				{
					UART_sendString("Wrong PIN\r");
     35a:	84 ef       	ldi	r24, 0xF4	; 244
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 df 07 	call	0xfbe	; 0xfbe <UART_sendString>
					TIMER_delay(TIMER_2, 10);
     362:	4a e0       	ldi	r20, 0x0A	; 10
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
     370:	2d cf       	rjmp	.-422    	; 0x1cc <APP_superLoop+0x4e>
				}
				
				/*Step 3 -> in PROGRAMMING_MODE step 12 -> if matching save PIN -secondCopy- in EEPROM in address 0x0030*/
				else
				{
					EEPROM_writeString_256(PIN_ADDRESS,PIN);
     372:	be 01       	movw	r22, r28
     374:	6a 5e       	subi	r22, 0xEA	; 234
     376:	7f 4f       	sbci	r23, 0xFF	; 255
     378:	80 e3       	ldi	r24, 0x30	; 48
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <EEPROM_writeString_256>
				
					/*Step 3 -> in PROGRAMMING_MODE step 13 -> go to USER_MODE*/
					cardMode = USER_MODE;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <cardMode>
     386:	22 cf       	rjmp	.-444    	; 0x1cc <APP_superLoop+0x4e>
			}
			break;
			
			/*Step 4 -> in USER_MODE step 1 -> print "Please press 1 for entering user mode and 2 for programming mode"*/
			case USER_MODE:
			UART_sendString("Please press 1 for entering user mode and 2 for programming mode\r");
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 df 07 	call	0xfbe	; 0xfbe <UART_sendString>
			
			/*Step 4 -> in USER_MODE step 2 -> recieve operation from UART, neglect if it is not equal '1' or '2'*/
			buffer = 0;
			while (buffer != '1' || buffer != '2')
			{
				buffer = UART_GetChar();
     390:	0e 94 db 07 	call	0xfb6	; 0xfb6 <UART_GetChar>
     394:	18 2f       	mov	r17, r24
				if (buffer == '1' || buffer == '2')
     396:	8f ec       	ldi	r24, 0xCF	; 207
     398:	81 0f       	add	r24, r17
     39a:	82 30       	cpi	r24, 0x02	; 2
     39c:	c8 f7       	brcc	.-14     	; 0x390 <APP_superLoop+0x212>
				{
					UART_SendChar(buffer);
     39e:	81 2f       	mov	r24, r17
     3a0:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_SendChar>
					TIMER_delay(TIMER_2, 10);
     3a4:	4a e0       	ldi	r20, 0x0A	; 10
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	82 e0       	ldi	r24, 0x02	; 2
     3ae:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
					break;
				}
				
			}
			UART_SendChar('\r');
     3b2:	8d e0       	ldi	r24, 0x0D	; 13
     3b4:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_SendChar>
			TIMER_delay(TIMER_2, 10);
     3b8:	4a e0       	ldi	r20, 0x0A	; 10
     3ba:	50 e0       	ldi	r21, 0x00	; 0
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
			
			
			/*Step 4 -> in USER_MODE step 3 -> If = 1, trigger ATM, send PAN and PIN then IDLE_STATE*/
			if (buffer == '1')
     3c6:	11 33       	cpi	r17, 0x31	; 49
     3c8:	09 f0       	breq	.+2      	; 0x3cc <APP_superLoop+0x24e>
     3ca:	95 c0       	rjmp	.+298    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			{
				TRIGGER_triggerMCU();
     3cc:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <TRIGGER_triggerMCU>
				EEPROM_readString_256(PAN_ADDRESS, PAN);
     3d0:	be 01       	movw	r22, r28
     3d2:	6f 5f       	subi	r22, 0xFF	; 255
     3d4:	7f 4f       	sbci	r23, 0xFF	; 255
     3d6:	80 e1       	ldi	r24, 0x10	; 16
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 15 03 	call	0x62a	; 0x62a <EEPROM_readString_256>
				TIMER_delay(TIMER_2, 10);
     3de:	4a e0       	ldi	r20, 0x0A	; 10
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
				
				EEPROM_readString_256(PIN_ADDRESS, PIN);
     3ec:	be 01       	movw	r22, r28
     3ee:	6a 5e       	subi	r22, 0xEA	; 234
     3f0:	7f 4f       	sbci	r23, 0xFF	; 255
     3f2:	80 e3       	ldi	r24, 0x30	; 48
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 15 03 	call	0x62a	; 0x62a <EEPROM_readString_256>
				TIMER_delay(TIMER_2, 10);
     3fa:	4a e0       	ldi	r20, 0x0A	; 10
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	82 e0       	ldi	r24, 0x02	; 2
     404:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
				
				counter = 0;
				
				while (SPI_transmitByte(0xDD) == 0xDD)
     408:	07 c0       	rjmp	.+14     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
				TIMER_delay(TIMER_2,10);
     40a:	4a e0       	ldi	r20, 0x0A	; 10
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	60 e0       	ldi	r22, 0x00	; 0
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
				EEPROM_readString_256(PIN_ADDRESS, PIN);
				TIMER_delay(TIMER_2, 10);
				
				counter = 0;
				
				while (SPI_transmitByte(0xDD) == 0xDD)
     418:	8d ed       	ldi	r24, 0xDD	; 221
     41a:	0e 94 14 06 	call	0xc28	; 0xc28 <SPI_transmitByte>
     41e:	8d 3d       	cpi	r24, 0xDD	; 221
     420:	a1 f3       	breq	.-24     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     422:	10 e0       	ldi	r17, 0x00	; 0
     424:	0c c0       	rjmp	.+24     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
				TIMER_delay(TIMER_2,10);
				
				while(PAN[counter])
				{
					if(SPI_transmitByte(PAN[counter]) == 0xBB)
     426:	0e 94 14 06 	call	0xc28	; 0xc28 <SPI_transmitByte>
     42a:	8b 3b       	cpi	r24, 0xBB	; 187
     42c:	09 f4       	brne	.+2      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
					{
						counter++;
     42e:	1f 5f       	subi	r17, 0xFF	; 255
					}
					TIMER_delay(TIMER_2, 10);
     430:	4a e0       	ldi	r20, 0x0A	; 10
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	82 e0       	ldi	r24, 0x02	; 2
     43a:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
				counter = 0;
				
				while (SPI_transmitByte(0xDD) == 0xDD)
				TIMER_delay(TIMER_2,10);
				
				while(PAN[counter])
     43e:	e1 e0       	ldi	r30, 0x01	; 1
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	ec 0f       	add	r30, r28
     444:	fd 1f       	adc	r31, r29
     446:	e1 0f       	add	r30, r17
     448:	f1 1d       	adc	r31, r1
     44a:	80 81       	ld	r24, Z
     44c:	81 11       	cpse	r24, r1
     44e:	eb cf       	rjmp	.-42     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     450:	07 c0       	rjmp	.+14     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
					}
					TIMER_delay(TIMER_2, 10);
					
				}
				while(SPI_transmitByte(0) == 0xBB)
				TIMER_delay(TIMER_2,10);
     452:	4a e0       	ldi	r20, 0x0A	; 10
     454:	50 e0       	ldi	r21, 0x00	; 0
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
						counter++;
					}
					TIMER_delay(TIMER_2, 10);
					
				}
				while(SPI_transmitByte(0) == 0xBB)
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 14 06 	call	0xc28	; 0xc28 <SPI_transmitByte>
     466:	8b 3b       	cpi	r24, 0xBB	; 187
     468:	a1 f3       	breq	.-24     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     46a:	07 c0       	rjmp	.+14     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
				TIMER_delay(TIMER_2,10);
				
				counter = 0;
				while (SPI_transmitByte(0xDD) == 0xDD)
				TIMER_delay(TIMER_2,10);
     46c:	4a e0       	ldi	r20, 0x0A	; 10
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
				}
				while(SPI_transmitByte(0) == 0xBB)
				TIMER_delay(TIMER_2,10);
				
				counter = 0;
				while (SPI_transmitByte(0xDD) == 0xDD)
     47a:	8d ed       	ldi	r24, 0xDD	; 221
     47c:	0e 94 14 06 	call	0xc28	; 0xc28 <SPI_transmitByte>
     480:	8d 3d       	cpi	r24, 0xDD	; 221
     482:	a1 f3       	breq	.-24     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
     484:	10 e0       	ldi	r17, 0x00	; 0
     486:	13 c0       	rjmp	.+38     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
				TIMER_delay(TIMER_2,10);
				
				while(counter < 4)
				{
					if(SPI_transmitByte(PIN[counter]) == 0xCC)
     488:	e6 e1       	ldi	r30, 0x16	; 22
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	ec 0f       	add	r30, r28
     48e:	fd 1f       	adc	r31, r29
     490:	e1 0f       	add	r30, r17
     492:	f1 1d       	adc	r31, r1
     494:	80 81       	ld	r24, Z
     496:	0e 94 14 06 	call	0xc28	; 0xc28 <SPI_transmitByte>
     49a:	8c 3c       	cpi	r24, 0xCC	; 204
     49c:	09 f4       	brne	.+2      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
					{
						counter++;
     49e:	1f 5f       	subi	r17, 0xFF	; 255
					}
					TIMER_delay(TIMER_2, 10);
     4a0:	4a e0       	ldi	r20, 0x0A	; 10
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
				
				counter = 0;
				while (SPI_transmitByte(0xDD) == 0xDD)
				TIMER_delay(TIMER_2,10);
				
				while(counter < 4)
     4ae:	14 30       	cpi	r17, 0x04	; 4
     4b0:	58 f3       	brcs	.-42     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     4b2:	07 c0       	rjmp	.+14     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
						counter++;
					}
					TIMER_delay(TIMER_2, 10);
				}
				while(SPI_transmitByte(0) == 0xCC)
				TIMER_delay(TIMER_2,10);
     4b4:	4a e0       	ldi	r20, 0x0A	; 10
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
					{
						counter++;
					}
					TIMER_delay(TIMER_2, 10);
				}
				while(SPI_transmitByte(0) == 0xCC)
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	0e 94 14 06 	call	0xc28	; 0xc28 <SPI_transmitByte>
     4c8:	8c 3c       	cpi	r24, 0xCC	; 204
     4ca:	a1 f3       	breq	.-24     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
				TIMER_delay(TIMER_2,10);
				
				TIMER_delay(TIMER_2,5000);
     4cc:	48 e8       	ldi	r20, 0x88	; 136
     4ce:	53 e1       	ldi	r21, 0x13	; 19
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	70 e0       	ldi	r23, 0x00	; 0
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
				while(SPI_transmitByte(0xDD) != 0xDD)
     4da:	07 c0       	rjmp	.+14     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
				TIMER_delay(TIMER_2,100);
     4dc:	44 e6       	ldi	r20, 0x64	; 100
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	82 e0       	ldi	r24, 0x02	; 2
     4e6:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
				}
				while(SPI_transmitByte(0) == 0xCC)
				TIMER_delay(TIMER_2,10);
				
				TIMER_delay(TIMER_2,5000);
				while(SPI_transmitByte(0xDD) != 0xDD)
     4ea:	8d ed       	ldi	r24, 0xDD	; 221
     4ec:	0e 94 14 06 	call	0xc28	; 0xc28 <SPI_transmitByte>
     4f0:	8d 3d       	cpi	r24, 0xDD	; 221
     4f2:	a1 f7       	brne	.-24     	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
     4f4:	6b ce       	rjmp	.-810    	; 0x1cc <APP_superLoop+0x4e>
				TIMER_delay(TIMER_2,100);
				
			}
			/*Step 4 -> in USER_MODE step 4 -> If = 2, go to PROGRAMMING_MODE INITIAL_STATE*/
			else if(buffer == '2')
     4f6:	12 33       	cpi	r17, 0x32	; 50
     4f8:	09 f0       	breq	.+2      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
     4fa:	68 ce       	rjmp	.-816    	; 0x1cc <APP_superLoop+0x4e>
			{
				cardMode = PROGRAMMING_MODE;
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <cardMode>
				programmingState = PRO_INITIAL_STATE;
     502:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
     506:	62 ce       	rjmp	.-828    	; 0x1cc <APP_superLoop+0x4e>

00000508 <EEPROM_init>:
			} 
			while(u8_Pdata[i++] != '\0');
		
				
			return 0;
}
     508:	0e 94 58 05 	call	0xab0	; 0xab0 <I2C_init>
     50c:	08 95       	ret

0000050e <EEPROM_writeByte_256>:

/*-----------------------256-------------------------------*/
u8 EEPROM_writeByte_256(u16 u16_addr, u8 u8data)
{
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	d8 2f       	mov	r29, r24
     516:	c9 2f       	mov	r28, r25
     518:	16 2f       	mov	r17, r22
    /* Send the Start Bit */
    if (I2C_start()==EVENT_OK)
     51a:	0e 94 67 05 	call	0xace	; 0xace <I2C_start>
     51e:	81 11       	cpse	r24, r1
     520:	20 c0       	rjmp	.+64     	; 0x562 <EEPROM_writeByte_256+0x54>
    {
        /* Send the device address, we need to get A8 A9 A10 address bits from the
         * memory location address and R/W=0 (write) */
        if (I2C_address_select(0xA0,write)==SLA_W_ACK_SENT)
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	80 ea       	ldi	r24, 0xA0	; 160
     526:	0e 94 87 05 	call	0xb0e	; 0xb0e <I2C_address_select>
     52a:	83 30       	cpi	r24, 0x03	; 3
     52c:	d1 f4       	brne	.+52     	; 0x562 <EEPROM_writeByte_256+0x54>
        {
            /* Send the required memory location address */
            if (I2C_data_rw((u8)((u16_addr >> 8) & 0xFF),write,ACK)==DATA_WRITE_ACK_SENT)
     52e:	40 e0       	ldi	r20, 0x00	; 0
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	8c 2f       	mov	r24, r28
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 b2 05 	call	0xb64	; 0xb64 <I2C_data_rw>
     53a:	88 30       	cpi	r24, 0x08	; 8
     53c:	91 f4       	brne	.+36     	; 0x562 <EEPROM_writeByte_256+0x54>
            {
                if (I2C_data_rw((u8)(u16_addr),write,ACK)==DATA_WRITE_ACK_SENT)
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	8d 2f       	mov	r24, r29
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 b2 05 	call	0xb64	; 0xb64 <I2C_data_rw>
     54a:	88 30       	cpi	r24, 0x08	; 8
     54c:	51 f4       	brne	.+20     	; 0x562 <EEPROM_writeByte_256+0x54>
                {

                    /* write byte to eeprom */
                    if (I2C_data_rw(u8data,write,ACK)==DATA_WRITE_ACK_SENT)
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	81 2f       	mov	r24, r17
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 b2 05 	call	0xb64	; 0xb64 <I2C_data_rw>
     55a:	88 30       	cpi	r24, 0x08	; 8
     55c:	11 f4       	brne	.+4      	; 0x562 <EEPROM_writeByte_256+0x54>
                    {
                        /* Send the Stop Bit */
                        I2C_stop();
     55e:	0e 94 e5 05 	call	0xbca	; 0xbca <I2C_stop>
            }
        }
    }
	
	return 0;
}
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	08 95       	ret

0000056c <EEPROM_readByte_256>:
u8 EEPROM_readByte_256(u16 u16_addr, u8 *u8data)
{
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	d8 2f       	mov	r29, r24
     576:	c9 2f       	mov	r28, r25
     578:	8b 01       	movw	r16, r22
    /* Send the Start Bit */
    if (I2C_start()==EVENT_OK)
     57a:	0e 94 67 05 	call	0xace	; 0xace <I2C_start>
     57e:	81 11       	cpse	r24, r1
     580:	29 c0       	rjmp	.+82     	; 0x5d4 <EEPROM_readByte_256+0x68>
    {
        /* Send the device address, we need to get A8 A9 A10 address bits from the
         * memory location address and R/W=0 (write) */
        if (I2C_address_select(0xA0,write)==SLA_W_ACK_SENT)
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	80 ea       	ldi	r24, 0xA0	; 160
     586:	0e 94 87 05 	call	0xb0e	; 0xb0e <I2C_address_select>
     58a:	83 30       	cpi	r24, 0x03	; 3
     58c:	19 f5       	brne	.+70     	; 0x5d4 <EEPROM_readByte_256+0x68>
        {
            /* Send the required memory location address */
            if (I2C_data_rw((u8)((u16_addr >> 8) & 0xFF),write,ACK)==DATA_WRITE_ACK_SENT)
     58e:	40 e0       	ldi	r20, 0x00	; 0
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	8c 2f       	mov	r24, r28
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 b2 05 	call	0xb64	; 0xb64 <I2C_data_rw>
     59a:	88 30       	cpi	r24, 0x08	; 8
     59c:	d9 f4       	brne	.+54     	; 0x5d4 <EEPROM_readByte_256+0x68>
            {
                if (I2C_data_rw((u8)(u16_addr),write,ACK)==DATA_WRITE_ACK_SENT)
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	8d 2f       	mov	r24, r29
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 b2 05 	call	0xb64	; 0xb64 <I2C_data_rw>
     5aa:	88 30       	cpi	r24, 0x08	; 8
     5ac:	99 f4       	brne	.+38     	; 0x5d4 <EEPROM_readByte_256+0x68>
                {
                    /* Send the Repeated Start Bit */
                    if (I2C_repeated_start()==EVENT_OK)
     5ae:	0e 94 77 05 	call	0xaee	; 0xaee <I2C_repeated_start>
     5b2:	81 11       	cpse	r24, r1
     5b4:	0f c0       	rjmp	.+30     	; 0x5d4 <EEPROM_readByte_256+0x68>
                    {
                        /* Send the device address, we need to get A8 A9 A10 address bits from the
                         * memory location address and R/W=1 (Read) */

                        if (I2C_address_select(0xA0,read)==SLA_R_ACK_SENT)
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	80 ea       	ldi	r24, 0xA0	; 160
     5ba:	0e 94 87 05 	call	0xb0e	; 0xb0e <I2C_address_select>
     5be:	85 30       	cpi	r24, 0x05	; 5
     5c0:	49 f4       	brne	.+18     	; 0x5d4 <EEPROM_readByte_256+0x68>
                        {
                            /* Read Byte from Memory without send ACK */

                            if (I2C_data_rw(u8data,read,NACK)==DATA_READ_NACK_SENT)
     5c2:	41 e0       	ldi	r20, 0x01	; 1
     5c4:	61 e0       	ldi	r22, 0x01	; 1
     5c6:	c8 01       	movw	r24, r16
     5c8:	0e 94 b2 05 	call	0xb64	; 0xb64 <I2C_data_rw>
     5cc:	8c 30       	cpi	r24, 0x0C	; 12
     5ce:	11 f4       	brne	.+4      	; 0x5d4 <EEPROM_readByte_256+0x68>
                            {
                                /* Send the Stop Bit */
                                I2C_stop();
     5d0:	0e 94 e5 05 	call	0xbca	; 0xbca <I2C_stop>
                }
            }
        }
    }
	return 0;
}
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	08 95       	ret

000005e0 <EEPROM_writeString_256>:
u8 EEPROM_writeString_256 (u16 u16_Saddr, u8 *u8_Pdata)
{ 
     5e0:	ef 92       	push	r14
     5e2:	ff 92       	push	r15
     5e4:	0f 93       	push	r16
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	7b 01       	movw	r14, r22
	
	u8 i;
	u16 ee_address=u16_Saddr;
	for (i=0;u8_Pdata[i];i++)
     5ec:	c0 e0       	ldi	r28, 0x00	; 0
     5ee:	0e c0       	rjmp	.+28     	; 0x60c <EEPROM_writeString_256+0x2c>
	{
		EEPROM_writeByte_256(ee_address++,u8_Pdata[i]);
     5f0:	8c 01       	movw	r16, r24
     5f2:	0f 5f       	subi	r16, 0xFF	; 255
     5f4:	1f 4f       	sbci	r17, 0xFF	; 255
     5f6:	0e 94 87 02 	call	0x50e	; 0x50e <EEPROM_writeByte_256>
		TIMER_delay(TIMER_2,20);
     5fa:	44 e1       	ldi	r20, 0x14	; 20
     5fc:	50 e0       	ldi	r21, 0x00	; 0
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
u8 EEPROM_writeString_256 (u16 u16_Saddr, u8 *u8_Pdata)
{ 
	
	u8 i;
	u16 ee_address=u16_Saddr;
	for (i=0;u8_Pdata[i];i++)
     608:	cf 5f       	subi	r28, 0xFF	; 255
	{
		EEPROM_writeByte_256(ee_address++,u8_Pdata[i]);
     60a:	c8 01       	movw	r24, r16
u8 EEPROM_writeString_256 (u16 u16_Saddr, u8 *u8_Pdata)
{ 
	
	u8 i;
	u16 ee_address=u16_Saddr;
	for (i=0;u8_Pdata[i];i++)
     60c:	f7 01       	movw	r30, r14
     60e:	ec 0f       	add	r30, r28
     610:	f1 1d       	adc	r31, r1
     612:	60 81       	ld	r22, Z
     614:	61 11       	cpse	r22, r1
     616:	ec cf       	rjmp	.-40     	; 0x5f0 <EEPROM_writeString_256+0x10>
	{
		EEPROM_writeByte_256(ee_address++,u8_Pdata[i]);
		TIMER_delay(TIMER_2,20);
	}
	
	EEPROM_writeByte_256(ee_address,'\0');			
     618:	0e 94 87 02 	call	0x50e	; 0x50e <EEPROM_writeByte_256>
	return 0;
				
}
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	cf 91       	pop	r28
     620:	1f 91       	pop	r17
     622:	0f 91       	pop	r16
     624:	ff 90       	pop	r15
     626:	ef 90       	pop	r14
     628:	08 95       	ret

0000062a <EEPROM_readString_256>:
u8 EEPROM_readString_256 (u16 u16_Saddr, u8 *u8_Pdata)
{
     62a:	cf 92       	push	r12
     62c:	df 92       	push	r13
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	6b 01       	movw	r12, r22
	u8 i = 0;
     63a:	c0 e0       	ldi	r28, 0x00	; 0
	do
	{
		EEPROM_readByte_256(u16_Saddr++,&u8_Pdata[i]);
     63c:	86 01       	movw	r16, r12
     63e:	0c 0f       	add	r16, r28
     640:	11 1d       	adc	r17, r1
     642:	7c 01       	movw	r14, r24
     644:	2f ef       	ldi	r18, 0xFF	; 255
     646:	e2 1a       	sub	r14, r18
     648:	f2 0a       	sbc	r15, r18
     64a:	b8 01       	movw	r22, r16
     64c:	0e 94 b6 02 	call	0x56c	; 0x56c <EEPROM_readByte_256>
		TIMER_delay(TIMER_2,30);
     650:	4e e1       	ldi	r20, 0x1E	; 30
     652:	50 e0       	ldi	r21, 0x00	; 0
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
	} 
	while(u8_Pdata[i++] != '\0');
     65e:	cf 5f       	subi	r28, 0xFF	; 255
     660:	f8 01       	movw	r30, r16
     662:	20 81       	ld	r18, Z
u8 EEPROM_readString_256 (u16 u16_Saddr, u8 *u8_Pdata)
{
	u8 i = 0;
	do
	{
		EEPROM_readByte_256(u16_Saddr++,&u8_Pdata[i]);
     664:	c7 01       	movw	r24, r14
		TIMER_delay(TIMER_2,30);
	} 
	while(u8_Pdata[i++] != '\0');
     666:	21 11       	cpse	r18, r1
     668:	e9 cf       	rjmp	.-46     	; 0x63c <EEPROM_readString_256+0x12>
	
	return 0;
}
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	cf 91       	pop	r28
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	df 90       	pop	r13
     678:	cf 90       	pop	r12
     67a:	08 95       	ret

0000067c <LCD_WriteIns>:
	for(u8 i=0;i<8;i++)
	{
		LCD_WriteData(u8_a_pattern[i]);
	}
	LCD_WriteIns(0x80);
}
     67c:	cf 93       	push	r28
     67e:	c8 2f       	mov	r28, r24
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	81 e4       	ldi	r24, 0x41	; 65
     686:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     68a:	4c 2f       	mov	r20, r28
     68c:	44 1f       	adc	r20, r20
     68e:	44 27       	eor	r20, r20
     690:	44 1f       	adc	r20, r20
     692:	67 e0       	ldi	r22, 0x07	; 7
     694:	81 e4       	ldi	r24, 0x41	; 65
     696:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     69a:	c6 fb       	bst	r28, 6
     69c:	44 27       	eor	r20, r20
     69e:	40 f9       	bld	r20, 0
     6a0:	66 e0       	ldi	r22, 0x06	; 6
     6a2:	81 e4       	ldi	r24, 0x41	; 65
     6a4:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     6a8:	c5 fb       	bst	r28, 5
     6aa:	44 27       	eor	r20, r20
     6ac:	40 f9       	bld	r20, 0
     6ae:	65 e0       	ldi	r22, 0x05	; 5
     6b0:	81 e4       	ldi	r24, 0x41	; 65
     6b2:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     6b6:	c4 fb       	bst	r28, 4
     6b8:	44 27       	eor	r20, r20
     6ba:	40 f9       	bld	r20, 0
     6bc:	64 e0       	ldi	r22, 0x04	; 4
     6be:	81 e4       	ldi	r24, 0x41	; 65
     6c0:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     6c4:	41 e0       	ldi	r20, 0x01	; 1
     6c6:	63 e0       	ldi	r22, 0x03	; 3
     6c8:	81 e4       	ldi	r24, 0x41	; 65
     6ca:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     6ce:	41 e0       	ldi	r20, 0x01	; 1
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
     6dc:	40 e0       	ldi	r20, 0x00	; 0
     6de:	63 e0       	ldi	r22, 0x03	; 3
     6e0:	81 e4       	ldi	r24, 0x41	; 65
     6e2:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     6e6:	41 e0       	ldi	r20, 0x01	; 1
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	82 e0       	ldi	r24, 0x02	; 2
     6f0:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
     6f4:	c3 fb       	bst	r28, 3
     6f6:	44 27       	eor	r20, r20
     6f8:	40 f9       	bld	r20, 0
     6fa:	67 e0       	ldi	r22, 0x07	; 7
     6fc:	81 e4       	ldi	r24, 0x41	; 65
     6fe:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     702:	c2 fb       	bst	r28, 2
     704:	44 27       	eor	r20, r20
     706:	40 f9       	bld	r20, 0
     708:	66 e0       	ldi	r22, 0x06	; 6
     70a:	81 e4       	ldi	r24, 0x41	; 65
     70c:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     710:	c1 fb       	bst	r28, 1
     712:	44 27       	eor	r20, r20
     714:	40 f9       	bld	r20, 0
     716:	65 e0       	ldi	r22, 0x05	; 5
     718:	81 e4       	ldi	r24, 0x41	; 65
     71a:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     71e:	4c 2f       	mov	r20, r28
     720:	41 70       	andi	r20, 0x01	; 1
     722:	64 e0       	ldi	r22, 0x04	; 4
     724:	81 e4       	ldi	r24, 0x41	; 65
     726:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     72a:	41 e0       	ldi	r20, 0x01	; 1
     72c:	63 e0       	ldi	r22, 0x03	; 3
     72e:	81 e4       	ldi	r24, 0x41	; 65
     730:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	63 e0       	ldi	r22, 0x03	; 3
     746:	81 e4       	ldi	r24, 0x41	; 65
     748:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     74c:	41 e0       	ldi	r20, 0x01	; 1
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <LCD_Init>:
     75e:	42 e3       	ldi	r20, 0x32	; 50
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_WriteIns>
     772:	88 e2       	ldi	r24, 0x28	; 40
     774:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_WriteIns>
     778:	8c e0       	ldi	r24, 0x0C	; 12
     77a:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_WriteIns>
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_WriteIns>
     784:	41 e0       	ldi	r20, 0x01	; 1
     786:	50 e0       	ldi	r21, 0x00	; 0
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
     792:	86 e0       	ldi	r24, 0x06	; 6
     794:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_WriteIns>
     798:	08 95       	ret

0000079a <LCD_PinsInit>:
* \Parameters (out): None
* \Return value:   : None
*******************************************************************************/
 void LCD_PinsInit ()
 {
	 DIO_init(LCD_PORT,0,OUTPUT);
     79a:	41 e0       	ldi	r20, 0x01	; 1
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	81 e4       	ldi	r24, 0x41	; 65
     7a0:	0e 94 13 04 	call	0x826	; 0x826 <DIO_init>
	 DIO_init(LCD_PORT,1,OUTPUT);
     7a4:	41 e0       	ldi	r20, 0x01	; 1
     7a6:	61 e0       	ldi	r22, 0x01	; 1
     7a8:	81 e4       	ldi	r24, 0x41	; 65
     7aa:	0e 94 13 04 	call	0x826	; 0x826 <DIO_init>
	 DIO_init(LCD_PORT,2,OUTPUT);
     7ae:	41 e0       	ldi	r20, 0x01	; 1
     7b0:	62 e0       	ldi	r22, 0x02	; 2
     7b2:	81 e4       	ldi	r24, 0x41	; 65
     7b4:	0e 94 13 04 	call	0x826	; 0x826 <DIO_init>
	 DIO_init(LCD_PORT,3,OUTPUT);
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	63 e0       	ldi	r22, 0x03	; 3
     7bc:	81 e4       	ldi	r24, 0x41	; 65
     7be:	0e 94 13 04 	call	0x826	; 0x826 <DIO_init>
	 DIO_init(LCD_PORT,4,OUTPUT);
     7c2:	41 e0       	ldi	r20, 0x01	; 1
     7c4:	64 e0       	ldi	r22, 0x04	; 4
     7c6:	81 e4       	ldi	r24, 0x41	; 65
     7c8:	0e 94 13 04 	call	0x826	; 0x826 <DIO_init>
	 DIO_init(LCD_PORT,5,OUTPUT);
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	65 e0       	ldi	r22, 0x05	; 5
     7d0:	81 e4       	ldi	r24, 0x41	; 65
     7d2:	0e 94 13 04 	call	0x826	; 0x826 <DIO_init>
	 DIO_init(LCD_PORT,6,OUTPUT);
     7d6:	41 e0       	ldi	r20, 0x01	; 1
     7d8:	66 e0       	ldi	r22, 0x06	; 6
     7da:	81 e4       	ldi	r24, 0x41	; 65
     7dc:	0e 94 13 04 	call	0x826	; 0x826 <DIO_init>
	 DIO_init(LCD_PORT,7,OUTPUT);
     7e0:	41 e0       	ldi	r20, 0x01	; 1
     7e2:	67 e0       	ldi	r22, 0x07	; 7
     7e4:	81 e4       	ldi	r24, 0x41	; 65
     7e6:	0e 94 13 04 	call	0x826	; 0x826 <DIO_init>
     7ea:	08 95       	ret

000007ec <TRIGGER_init>:

#include "trigger.h"

void TRIGGER_init(void)
{
	DIO_init(TRIGGER_PORT, TRIGGER_PIN, OUTPUT);
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	82 e4       	ldi	r24, 0x42	; 66
     7f2:	0e 94 13 04 	call	0x826	; 0x826 <DIO_init>
     7f6:	08 95       	ret

000007f8 <TRIGGER_triggerMCU>:
}

void TRIGGER_triggerMCU(void)
{
	DIO_write(TRIGGER_PORT, TRIGGER_PIN, HIGH);
     7f8:	41 e0       	ldi	r20, 0x01	; 1
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	82 e4       	ldi	r24, 0x42	; 66
     7fe:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
	TIMER_delay(TIMER_2, 200);
     802:	48 ec       	ldi	r20, 0xC8	; 200
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
	DIO_write(TRIGGER_PORT, TRIGGER_PIN, LOW);
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	82 e4       	ldi	r24, 0x42	; 66
     816:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     81a:	08 95       	ret

0000081c <main>:
int main(void)
{
	
 /* Replace with your application code */
	
 	APP_init();
     81c:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
 	//APP_deleteAll();
 	APP_superLoop();
     820:	0e 94 bf 00 	call	0x17e	; 0x17e <APP_superLoop>
     824:	ff cf       	rjmp	.-2      	; 0x824 <main+0x8>

00000826 <DIO_init>:
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
	if (u8_a_pinNumber < 8)
     826:	68 30       	cpi	r22, 0x08	; 8
     828:	08 f0       	brcs	.+2      	; 0x82c <DIO_init+0x6>
     82a:	80 c0       	rjmp	.+256    	; 0x92c <__stack+0xcd>
	{
		
		switch(u8_a_direction)
     82c:	44 23       	and	r20, r20
     82e:	21 f0       	breq	.+8      	; 0x838 <DIO_init+0x12>
     830:	41 30       	cpi	r20, 0x01	; 1
     832:	09 f4       	brne	.+2      	; 0x836 <DIO_init+0x10>
     834:	40 c0       	rjmp	.+128    	; 0x8b6 <__stack+0x57>
     836:	7c c0       	rjmp	.+248    	; 0x930 <__stack+0xd1>
		{
			case INPUT:
			switch(u8_a_portNumber)
     838:	82 34       	cpi	r24, 0x42	; 66
     83a:	b1 f0       	breq	.+44     	; 0x868 <__stack+0x9>
     83c:	18 f4       	brcc	.+6      	; 0x844 <DIO_init+0x1e>
     83e:	81 34       	cpi	r24, 0x41	; 65
     840:	31 f0       	breq	.+12     	; 0x84e <DIO_init+0x28>
     842:	78 c0       	rjmp	.+240    	; 0x934 <__stack+0xd5>
     844:	83 34       	cpi	r24, 0x43	; 67
     846:	e9 f0       	breq	.+58     	; 0x882 <__stack+0x23>
     848:	84 34       	cpi	r24, 0x44	; 68
     84a:	41 f1       	breq	.+80     	; 0x89c <__stack+0x3d>
     84c:	73 c0       	rjmp	.+230    	; 0x934 <__stack+0xd5>
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
     84e:	2a b3       	in	r18, 0x1a	; 26
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	02 c0       	rjmp	.+4      	; 0x85a <DIO_init+0x34>
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	6a 95       	dec	r22
     85c:	e2 f7       	brpl	.-8      	; 0x856 <DIO_init+0x30>
     85e:	80 95       	com	r24
     860:	82 23       	and	r24, r18
     862:	8a bb       	out	0x1a, r24	; 26
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     864:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_direction)
		{
			case INPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
     866:	08 95       	ret
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
     868:	27 b3       	in	r18, 0x17	; 23
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	02 c0       	rjmp	.+4      	; 0x874 <__stack+0x15>
     870:	88 0f       	add	r24, r24
     872:	99 1f       	adc	r25, r25
     874:	6a 95       	dec	r22
     876:	e2 f7       	brpl	.-8      	; 0x870 <__stack+0x11>
     878:	80 95       	com	r24
     87a:	82 23       	and	r24, r18
     87c:	87 bb       	out	0x17, r24	; 23
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     87e:	80 e0       	ldi	r24, 0x00	; 0
		{
			case INPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
     880:	08 95       	ret
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
     882:	24 b3       	in	r18, 0x14	; 20
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	02 c0       	rjmp	.+4      	; 0x88e <__stack+0x2f>
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	6a 95       	dec	r22
     890:	e2 f7       	brpl	.-8      	; 0x88a <__stack+0x2b>
     892:	80 95       	com	r24
     894:	82 23       	and	r24, r18
     896:	84 bb       	out	0x14, r24	; 20
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     898:	80 e0       	ldi	r24, 0x00	; 0
			case INPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
     89a:	08 95       	ret
				case PORT_D:	DDRD &= ~ (1<<u8_a_pinNumber);	break;
     89c:	21 b3       	in	r18, 0x11	; 17
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	6a 95       	dec	r22
     8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
     8ac:	80 95       	com	r24
     8ae:	82 23       	and	r24, r18
     8b0:	81 bb       	out	0x11, r24	; 17
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     8b2:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_D:	DDRD &= ~ (1<<u8_a_pinNumber);	break;
     8b4:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;	break;
			}
			break;
			
			case OUTPUT:
			switch(u8_a_portNumber)
     8b6:	82 34       	cpi	r24, 0x42	; 66
     8b8:	a9 f0       	breq	.+42     	; 0x8e4 <__stack+0x85>
     8ba:	18 f4       	brcc	.+6      	; 0x8c2 <__stack+0x63>
     8bc:	81 34       	cpi	r24, 0x41	; 65
     8be:	31 f0       	breq	.+12     	; 0x8cc <__stack+0x6d>
     8c0:	3b c0       	rjmp	.+118    	; 0x938 <__stack+0xd9>
     8c2:	83 34       	cpi	r24, 0x43	; 67
     8c4:	d9 f0       	breq	.+54     	; 0x8fc <__stack+0x9d>
     8c6:	84 34       	cpi	r24, 0x44	; 68
     8c8:	29 f1       	breq	.+74     	; 0x914 <__stack+0xb5>
     8ca:	36 c0       	rjmp	.+108    	; 0x938 <__stack+0xd9>
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
     8cc:	2a b3       	in	r18, 0x1a	; 26
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <__stack+0x79>
     8d4:	88 0f       	add	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	6a 95       	dec	r22
     8da:	e2 f7       	brpl	.-8      	; 0x8d4 <__stack+0x75>
     8dc:	82 2b       	or	r24, r18
     8de:	8a bb       	out	0x1a, r24	; 26
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     8e0:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case OUTPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
     8e2:	08 95       	ret
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
     8e4:	27 b3       	in	r18, 0x17	; 23
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <__stack+0x91>
     8ec:	88 0f       	add	r24, r24
     8ee:	99 1f       	adc	r25, r25
     8f0:	6a 95       	dec	r22
     8f2:	e2 f7       	brpl	.-8      	; 0x8ec <__stack+0x8d>
     8f4:	82 2b       	or	r24, r18
     8f6:	87 bb       	out	0x17, r24	; 23
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     8f8:	80 e0       	ldi	r24, 0x00	; 0
			
			case OUTPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
     8fa:	08 95       	ret
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
     8fc:	24 b3       	in	r18, 0x14	; 20
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	6a 95       	dec	r22
     90a:	e2 f7       	brpl	.-8      	; 0x904 <__stack+0xa5>
     90c:	82 2b       	or	r24, r18
     90e:	84 bb       	out	0x14, r24	; 20
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     910:	80 e0       	ldi	r24, 0x00	; 0
			case OUTPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
     912:	08 95       	ret
				case PORT_D:	DDRD |= (1<<u8_a_pinNumber);		break;
     914:	21 b3       	in	r18, 0x11	; 17
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0xc1>
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	6a 95       	dec	r22
     922:	e2 f7       	brpl	.-8      	; 0x91c <__stack+0xbd>
     924:	82 2b       	or	r24, r18
     926:	81 bb       	out	0x11, r24	; 17
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
     928:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	DDRD |= (1<<u8_a_pinNumber);		break;
     92a:	08 95       	ret
		}
		
	}
	else
	{
		error = WRONG_PIN_NUMBER;
     92c:	82 e0       	ldi	r24, 0x02	; 2
     92e:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;	break;
			}
			break;
			
			default:
			error = WRONG_DIRECTION;
     930:	84 e0       	ldi	r24, 0x04	; 4
     932:	08 95       	ret
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_D:	DDRD &= ~ (1<<u8_a_pinNumber);	break;
				default:		error = WRONG_PORT_NUMBER;	break;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	08 95       	ret
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	DDRD |= (1<<u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;	break;
     938:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;
}
     93a:	08 95       	ret

0000093c <DIO_write>:
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
	if (u8_a_pinNumber < 8)
     93c:	68 30       	cpi	r22, 0x08	; 8
     93e:	08 f0       	brcs	.+2      	; 0x942 <DIO_write+0x6>
     940:	80 c0       	rjmp	.+256    	; 0xa42 <DIO_write+0x106>
	{
		switch(u8_a_value)
     942:	44 23       	and	r20, r20
     944:	21 f0       	breq	.+8      	; 0x94e <DIO_write+0x12>
     946:	41 30       	cpi	r20, 0x01	; 1
     948:	09 f4       	brne	.+2      	; 0x94c <DIO_write+0x10>
     94a:	40 c0       	rjmp	.+128    	; 0x9cc <DIO_write+0x90>
     94c:	7c c0       	rjmp	.+248    	; 0xa46 <DIO_write+0x10a>
		{
			case LOW:
			switch(u8_a_portNumber)
     94e:	82 34       	cpi	r24, 0x42	; 66
     950:	b1 f0       	breq	.+44     	; 0x97e <DIO_write+0x42>
     952:	18 f4       	brcc	.+6      	; 0x95a <DIO_write+0x1e>
     954:	81 34       	cpi	r24, 0x41	; 65
     956:	31 f0       	breq	.+12     	; 0x964 <DIO_write+0x28>
     958:	78 c0       	rjmp	.+240    	; 0xa4a <DIO_write+0x10e>
     95a:	83 34       	cpi	r24, 0x43	; 67
     95c:	e9 f0       	breq	.+58     	; 0x998 <DIO_write+0x5c>
     95e:	84 34       	cpi	r24, 0x44	; 68
     960:	41 f1       	breq	.+80     	; 0x9b2 <DIO_write+0x76>
     962:	73 c0       	rjmp	.+230    	; 0xa4a <DIO_write+0x10e>
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
     964:	2b b3       	in	r18, 0x1b	; 27
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	02 c0       	rjmp	.+4      	; 0x970 <DIO_write+0x34>
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	6a 95       	dec	r22
     972:	e2 f7       	brpl	.-8      	; 0x96c <DIO_write+0x30>
     974:	80 95       	com	r24
     976:	82 23       	and	r24, r18
     978:	8b bb       	out	0x1b, r24	; 27
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     97a:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_value)
		{
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
     97c:	08 95       	ret
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
     97e:	28 b3       	in	r18, 0x18	; 24
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	02 c0       	rjmp	.+4      	; 0x98a <DIO_write+0x4e>
     986:	88 0f       	add	r24, r24
     988:	99 1f       	adc	r25, r25
     98a:	6a 95       	dec	r22
     98c:	e2 f7       	brpl	.-8      	; 0x986 <DIO_write+0x4a>
     98e:	80 95       	com	r24
     990:	82 23       	and	r24, r18
     992:	88 bb       	out	0x18, r24	; 24
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     994:	80 e0       	ldi	r24, 0x00	; 0
		{
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
     996:	08 95       	ret
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
     998:	25 b3       	in	r18, 0x15	; 21
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <DIO_write+0x68>
     9a0:	88 0f       	add	r24, r24
     9a2:	99 1f       	adc	r25, r25
     9a4:	6a 95       	dec	r22
     9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <DIO_write+0x64>
     9a8:	80 95       	com	r24
     9aa:	82 23       	and	r24, r18
     9ac:	85 bb       	out	0x15, r24	; 21
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     9ae:	80 e0       	ldi	r24, 0x00	; 0
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
     9b0:	08 95       	ret
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
     9b2:	22 b3       	in	r18, 0x12	; 18
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <DIO_write+0x82>
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
     9be:	6a 95       	dec	r22
     9c0:	e2 f7       	brpl	.-8      	; 0x9ba <DIO_write+0x7e>
     9c2:	80 95       	com	r24
     9c4:	82 23       	and	r24, r18
     9c6:	82 bb       	out	0x12, r24	; 18
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     9c8:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
     9ca:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;		break;
			}
			break;
				
			case HIGH:
			switch(u8_a_portNumber)
     9cc:	82 34       	cpi	r24, 0x42	; 66
     9ce:	a9 f0       	breq	.+42     	; 0x9fa <DIO_write+0xbe>
     9d0:	18 f4       	brcc	.+6      	; 0x9d8 <DIO_write+0x9c>
     9d2:	81 34       	cpi	r24, 0x41	; 65
     9d4:	31 f0       	breq	.+12     	; 0x9e2 <DIO_write+0xa6>
     9d6:	3b c0       	rjmp	.+118    	; 0xa4e <DIO_write+0x112>
     9d8:	83 34       	cpi	r24, 0x43	; 67
     9da:	d9 f0       	breq	.+54     	; 0xa12 <DIO_write+0xd6>
     9dc:	84 34       	cpi	r24, 0x44	; 68
     9de:	29 f1       	breq	.+74     	; 0xa2a <DIO_write+0xee>
     9e0:	36 c0       	rjmp	.+108    	; 0xa4e <DIO_write+0x112>
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
     9e2:	2b b3       	in	r18, 0x1b	; 27
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <DIO_write+0xb2>
     9ea:	88 0f       	add	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	6a 95       	dec	r22
     9f0:	e2 f7       	brpl	.-8      	; 0x9ea <DIO_write+0xae>
     9f2:	82 2b       	or	r24, r18
     9f4:	8b bb       	out	0x1b, r24	; 27
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     9f6:	80 e0       	ldi	r24, 0x00	; 0
			break;
				
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
     9f8:	08 95       	ret
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
     9fa:	28 b3       	in	r18, 0x18	; 24
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <DIO_write+0xca>
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	6a 95       	dec	r22
     a08:	e2 f7       	brpl	.-8      	; 0xa02 <DIO_write+0xc6>
     a0a:	82 2b       	or	r24, r18
     a0c:	88 bb       	out	0x18, r24	; 24
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     a0e:	80 e0       	ldi	r24, 0x00	; 0
				
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
     a10:	08 95       	ret
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
     a12:	25 b3       	in	r18, 0x15	; 21
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <DIO_write+0xe2>
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	6a 95       	dec	r22
     a20:	e2 f7       	brpl	.-8      	; 0xa1a <DIO_write+0xde>
     a22:	82 2b       	or	r24, r18
     a24:	85 bb       	out	0x15, r24	; 21
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     a26:	80 e0       	ldi	r24, 0x00	; 0
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
     a28:	08 95       	ret
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
     a2a:	22 b3       	in	r18, 0x12	; 18
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	02 c0       	rjmp	.+4      	; 0xa36 <DIO_write+0xfa>
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	6a 95       	dec	r22
     a38:	e2 f7       	brpl	.-8      	; 0xa32 <DIO_write+0xf6>
     a3a:	82 2b       	or	r24, r18
     a3c:	82 bb       	out	0x12, r24	; 18
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
     a3e:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
     a40:	08 95       	ret
				break;
		}
	}
	else
	{
		error = WRONG_PIN_NUMBER;
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;		break;
			}
			break;
				
			default:
				error = WRONG_VALUE;
     a46:	83 e0       	ldi	r24, 0x03	; 3
     a48:	08 95       	ret
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;		break;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	08 95       	ret
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;		break;
     a4e:	81 e0       	ldi	r24, 0x01	; 1
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;

}
     a50:	08 95       	ret

00000a52 <I2C_getStatus>:

u8 I2C_getStatus(void)
{
	u8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
     a52:	81 b1       	in	r24, 0x01	; 1
     a54:	92 b1       	in	r25, 0x02	; 2
	return status;
}
     a56:	88 7f       	andi	r24, 0xF8	; 248
     a58:	08 95       	ret

00000a5a <I2C_addressWrite>:
 void I2C_addressWrite(u8 I2C_address) {
	 TWDR = I2C_address+0;
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	94 b9       	out	0x04, r25	; 4
     a5e:	83 b9       	out	0x03, r24	; 3
     a60:	08 95       	ret

00000a62 <I2C_addressRead>:
 }
void I2C_addressRead(u8 I2C_address) {
	 TWDR = I2C_address+1;
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	94 b9       	out	0x04, r25	; 4
     a68:	83 b9       	out	0x03, r24	; 3
     a6a:	08 95       	ret

00000a6c <I2C_WriteData>:
 }
 void I2C_WriteData(u8 data) {
	    /* Put data On TWI data Register */
    TWDR = data;
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	94 b9       	out	0x04, r25	; 4
     a70:	83 b9       	out	0x03, r24	; 3
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     a72:	84 e8       	ldi	r24, 0x84	; 132
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	97 bf       	out	0x37, r25	; 55
     a78:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(!GET_BIT(TWCR,TWINT));
     a7a:	86 b7       	in	r24, 0x36	; 54
     a7c:	97 b7       	in	r25, 0x37	; 55
     a7e:	87 ff       	sbrs	r24, 7
     a80:	fc cf       	rjmp	.-8      	; 0xa7a <I2C_WriteData+0xe>
 } 
     a82:	08 95       	ret

00000a84 <I2C_readWithACK>:
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     a84:	84 ec       	ldi	r24, 0xC4	; 196
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	97 bf       	out	0x37, r25	; 55
     a8a:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(!GET_BIT(TWCR,TWINT));
     a8c:	86 b7       	in	r24, 0x36	; 54
     a8e:	97 b7       	in	r25, 0x37	; 55
     a90:	87 ff       	sbrs	r24, 7
     a92:	fc cf       	rjmp	.-8      	; 0xa8c <I2C_readWithACK+0x8>
    /* Read Data */
    return TWDR;
     a94:	83 b1       	in	r24, 0x03	; 3
     a96:	94 b1       	in	r25, 0x04	; 4
}
     a98:	08 95       	ret

00000a9a <I2C_readWithNACK>:
{
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     a9a:	84 e8       	ldi	r24, 0x84	; 132
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	97 bf       	out	0x37, r25	; 55
     aa0:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(!GET_BIT(TWCR,TWINT));
     aa2:	86 b7       	in	r24, 0x36	; 54
     aa4:	97 b7       	in	r25, 0x37	; 55
     aa6:	87 ff       	sbrs	r24, 7
     aa8:	fc cf       	rjmp	.-8      	; 0xaa2 <I2C_readWithNACK+0x8>
    /* Read Data */
    return TWDR;
     aaa:	83 b1       	in	r24, 0x03	; 3
     aac:	94 b1       	in	r25, 0x04	; 4
}
     aae:	08 95       	ret

00000ab0 <I2C_init>:
 /*---------------------------------------------------------------*/
void I2C_init(void)
{   TWBR = I2C_CFG_BITRATE;
     ab0:	8c e0       	ldi	r24, 0x0C	; 12
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	91 b9       	out	0x01, r25	; 1
     ab6:	80 b9       	out	0x00, r24	; 0
	TWSR = 0x00;
     ab8:	12 b8       	out	0x02, r1	; 2
     aba:	11 b8       	out	0x01, r1	; 1
   /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
   //TWBR=BITRATE(TWSR);   //  TWBR = 0x02;
   
     /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
     abc:	82 e0       	ldi	r24, 0x02	; 2
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	93 b9       	out	0x03, r25	; 3
     ac2:	82 b9       	out	0x02, r24	; 2
	
    TWCR = (1<<TWEN); /* enable TWI */ 
     ac4:	84 e0       	ldi	r24, 0x04	; 4
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	97 bf       	out	0x37, r25	; 55
     aca:	86 bf       	out	0x36, r24	; 54
     acc:	08 95       	ret

00000ace <I2C_start>:
} 
en_I2CError_t I2C_start(void)
{  	

    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     ace:	84 ea       	ldi	r24, 0xA4	; 164
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	97 bf       	out	0x37, r25	; 55
     ad4:	86 bf       	out	0x36, r24	; 54
	 while (!(TWCR & (1<<TWINT)));	
     ad6:	86 b7       	in	r24, 0x36	; 54
     ad8:	97 b7       	in	r25, 0x37	; 55
     ada:	87 ff       	sbrs	r24, 7
     adc:	fc cf       	rjmp	.-8      	; 0xad6 <I2C_start+0x8>
	if (I2C_getStatus()!=START_STATE)
     ade:	0e 94 29 05 	call	0xa52	; 0xa52 <I2C_getStatus>
     ae2:	88 30       	cpi	r24, 0x08	; 8
     ae4:	11 f0       	breq	.+4      	; 0xaea <I2C_start+0x1c>
	{  
		return START_NOT_SENT;
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	08 95       	ret
	} 
	else
	{ 	
		return EVENT_OK;
     aea:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
     aec:	08 95       	ret

00000aee <I2C_repeated_start>:
en_I2CError_t I2C_repeated_start(void)
{ 
   
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     aee:	84 ea       	ldi	r24, 0xA4	; 164
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	97 bf       	out	0x37, r25	; 55
     af4:	86 bf       	out	0x36, r24	; 54
 	 while (!(TWCR & (1<<TWINT)));	
     af6:	86 b7       	in	r24, 0x36	; 54
     af8:	97 b7       	in	r25, 0x37	; 55
     afa:	87 ff       	sbrs	r24, 7
     afc:	fc cf       	rjmp	.-8      	; 0xaf6 <I2C_repeated_start+0x8>

	if (I2C_getStatus()!=REP_START_STATE)
     afe:	0e 94 29 05 	call	0xa52	; 0xa52 <I2C_getStatus>
     b02:	80 31       	cpi	r24, 0x10	; 16
     b04:	11 f0       	breq	.+4      	; 0xb0a <I2C_repeated_start+0x1c>
	{
		return REPEATED_START_NOT_SENT;
     b06:	82 e0       	ldi	r24, 0x02	; 2
     b08:	08 95       	ret
	} 
	else
	{
		return EVENT_OK;
     b0a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     b0c:	08 95       	ret

00000b0e <I2C_address_select>:
en_I2CError_t I2C_address_select(u8 adress,u8 rw)
{  
	if (rw==write)
     b0e:	61 11       	cpse	r22, r1
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <I2C_address_select+0xa>
	{
		//TWDR = adress+0;
		I2C_addressWrite(adress);
     b12:	0e 94 2d 05 	call	0xa5a	; 0xa5a <I2C_addressWrite>
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <I2C_address_select+0x12>
	}
	else if (rw ==read )
     b18:	61 30       	cpi	r22, 0x01	; 1
     b1a:	11 f4       	brne	.+4      	; 0xb20 <I2C_address_select+0x12>
	{
		//TWDR = adress+1;
		I2C_addressRead(adress);
     b1c:	0e 94 31 05 	call	0xa62	; 0xa62 <I2C_addressRead>
	else
	{
		
	}
	
	       TWCR = (1 << TWINT) | (1 << TWEN);
     b20:	84 e8       	ldi	r24, 0x84	; 132
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	97 bf       	out	0x37, r25	; 55
     b26:	86 bf       	out	0x36, r24	; 54
	
			   while (!(TWCR&(1<<TWINT)));
     b28:	86 b7       	in	r24, 0x36	; 54
     b2a:	97 b7       	in	r25, 0x37	; 55
     b2c:	87 ff       	sbrs	r24, 7
     b2e:	fc cf       	rjmp	.-8      	; 0xb28 <I2C_address_select+0x1a>
	if (I2C_getStatus()==SLA_W_ACK_STATE)
     b30:	0e 94 29 05 	call	0xa52	; 0xa52 <I2C_getStatus>
     b34:	88 31       	cpi	r24, 0x18	; 24
     b36:	71 f0       	breq	.+28     	; 0xb54 <I2C_address_select+0x46>
	{   
		 
		return SLA_W_ACK_SENT;
		
	}
	else if(I2C_getStatus()==SLA_W_NACK_STATE)
     b38:	0e 94 29 05 	call	0xa52	; 0xa52 <I2C_getStatus>
     b3c:	80 32       	cpi	r24, 0x20	; 32
     b3e:	61 f0       	breq	.+24     	; 0xb58 <I2C_address_select+0x4a>
	{  
		
		return SLA_W_NACK_SENT;
		
	}
	if (I2C_getStatus()==SLA_R_ACK_STATE)
     b40:	0e 94 29 05 	call	0xa52	; 0xa52 <I2C_getStatus>
     b44:	80 34       	cpi	r24, 0x40	; 64
     b46:	51 f0       	breq	.+20     	; 0xb5c <I2C_address_select+0x4e>
	{    
		
		return SLA_R_ACK_SENT;
		
	}
	else if(I2C_getStatus()==SLA_R_NACK_STATE)
     b48:	0e 94 29 05 	call	0xa52	; 0xa52 <I2C_getStatus>
     b4c:	88 34       	cpi	r24, 0x48	; 72
     b4e:	41 f4       	brne	.+16     	; 0xb60 <I2C_address_select+0x52>
	{
		return SLA_R_NACK_SENT;
     b50:	86 e0       	ldi	r24, 0x06	; 6
     b52:	08 95       	ret
	
			   while (!(TWCR&(1<<TWINT)));
	if (I2C_getStatus()==SLA_W_ACK_STATE)
	{   
		 
		return SLA_W_ACK_SENT;
     b54:	83 e0       	ldi	r24, 0x03	; 3
     b56:	08 95       	ret
		
	}
	else if(I2C_getStatus()==SLA_W_NACK_STATE)
	{  
		
		return SLA_W_NACK_SENT;
     b58:	84 e0       	ldi	r24, 0x04	; 4
     b5a:	08 95       	ret
		
	}
	if (I2C_getStatus()==SLA_R_ACK_STATE)
	{    
		
		return SLA_R_ACK_SENT;
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	08 95       	ret
		
	}
	else
	{   
		
		return SLA_RW_FAILED;	 
     b60:	87 e0       	ldi	r24, 0x07	; 7
	}
	
}
     b62:	08 95       	ret

00000b64 <I2C_data_rw>:
en_I2CError_t I2C_data_rw(u8 *data,u8 rw,u8 ack)
 {  
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	ec 01       	movw	r28, r24
	
	 if (rw==write)
     b6a:	61 11       	cpse	r22, r1
     b6c:	0c c0       	rjmp	.+24     	; 0xb86 <I2C_data_rw+0x22>
	 {
		I2C_WriteData(data);
     b6e:	0e 94 36 05 	call	0xa6c	; 0xa6c <I2C_WriteData>
		
		 if (I2C_getStatus()==DATA_WRITE_ACK_STATE)
     b72:	0e 94 29 05 	call	0xa52	; 0xa52 <I2C_getStatus>
     b76:	88 32       	cpi	r24, 0x28	; 40
     b78:	f1 f0       	breq	.+60     	; 0xbb6 <I2C_data_rw+0x52>
		 {
			 return DATA_WRITE_ACK_SENT;
		 }
		 else if(I2C_getStatus()==DATA_WRITE_NACK_STATE)
     b7a:	0e 94 29 05 	call	0xa52	; 0xa52 <I2C_getStatus>
     b7e:	80 33       	cpi	r24, 0x30	; 48
     b80:	e1 f4       	brne	.+56     	; 0xbba <I2C_data_rw+0x56>
		 {
			 return DATA_WRITE_NACK_SENT;
     b82:	89 e0       	ldi	r24, 0x09	; 9
     b84:	1f c0       	rjmp	.+62     	; 0xbc4 <I2C_data_rw+0x60>
			 return DATA_WRITE_FAILED;
		 }
		 
	 } 
	 
	 else if (rw==read)
     b86:	61 30       	cpi	r22, 0x01	; 1
     b88:	a9 f4       	brne	.+42     	; 0xbb4 <I2C_data_rw+0x50>
	 {
		 if (ack==ACK)
     b8a:	41 11       	cpse	r20, r1
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <I2C_data_rw+0x32>
		 {
			*data=I2C_readWithACK();
     b8e:	0e 94 42 05 	call	0xa84	; 0xa84 <I2C_readWithACK>
     b92:	88 83       	st	Y, r24
     b94:	05 c0       	rjmp	.+10     	; 0xba0 <I2C_data_rw+0x3c>
		 }
		 else if (ack==NACK)
     b96:	41 30       	cpi	r20, 0x01	; 1
     b98:	19 f4       	brne	.+6      	; 0xba0 <I2C_data_rw+0x3c>
		 { 
			*data=I2C_readWithNACK();
     b9a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <I2C_readWithNACK>
     b9e:	88 83       	st	Y, r24
			
		 }
		 
			    
		 if (I2C_getStatus()==DATA_READ_ACK_STATE)
     ba0:	0e 94 29 05 	call	0xa52	; 0xa52 <I2C_getStatus>
     ba4:	80 35       	cpi	r24, 0x50	; 80
     ba6:	59 f0       	breq	.+22     	; 0xbbe <I2C_data_rw+0x5a>
		 {
			 return DATA_READ_ACK_SENT;
			 
		 }
		 else if(I2C_getStatus()==DATA_READ_NACK_STATE)
     ba8:	0e 94 29 05 	call	0xa52	; 0xa52 <I2C_getStatus>
     bac:	88 35       	cpi	r24, 0x58	; 88
     bae:	49 f4       	brne	.+18     	; 0xbc2 <I2C_data_rw+0x5e>
		 {
			 return DATA_READ_NACK_SENT;
     bb0:	8c e0       	ldi	r24, 0x0C	; 12
     bb2:	08 c0       	rjmp	.+16     	; 0xbc4 <I2C_data_rw+0x60>
		 }
		 
		 
	 }
	 
 } 
     bb4:	07 c0       	rjmp	.+14     	; 0xbc4 <I2C_data_rw+0x60>
	 {
		I2C_WriteData(data);
		
		 if (I2C_getStatus()==DATA_WRITE_ACK_STATE)
		 {
			 return DATA_WRITE_ACK_SENT;
     bb6:	88 e0       	ldi	r24, 0x08	; 8
     bb8:	05 c0       	rjmp	.+10     	; 0xbc4 <I2C_data_rw+0x60>
		 {
			 return DATA_WRITE_NACK_SENT;
		 }
		 else
		 {
			 return DATA_WRITE_FAILED;
     bba:	8a e0       	ldi	r24, 0x0A	; 10
     bbc:	03 c0       	rjmp	.+6      	; 0xbc4 <I2C_data_rw+0x60>
		 }
		 
			    
		 if (I2C_getStatus()==DATA_READ_ACK_STATE)
		 {
			 return DATA_READ_ACK_SENT;
     bbe:	8b e0       	ldi	r24, 0x0B	; 11
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <I2C_data_rw+0x60>
			 return DATA_READ_NACK_SENT;
			 
		 }
		 else
		 {
			 return DATA_READ_FAILED;
     bc2:	8d e0       	ldi	r24, 0x0D	; 13
		 }
		 
		 
	 }
	 
 } 
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <I2C_stop>:
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     bca:	84 e9       	ldi	r24, 0x94	; 148
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	97 bf       	out	0x37, r25	; 55
     bd0:	86 bf       	out	0x36, r24	; 54
	  while (TWCR&(1<<TWSTO));
     bd2:	86 b7       	in	r24, 0x36	; 54
     bd4:	97 b7       	in	r25, 0x37	; 55
     bd6:	84 fd       	sbrc	r24, 4
     bd8:	fc cf       	rjmp	.-8      	; 0xbd2 <I2C_stop+0x8>
}
     bda:	08 95       	ret

00000bdc <SPI_initMaster>:
	 DIO_init(PORT_B,4,INPUT);
	 DIO_init(PORT_B,5,INPUT);
	 DIO_init(PORT_B,7,INPUT);
	 DIO_init(PORT_B,6,OUTPUT);

	 SET_BIT(SPCR,SPE);
     bdc:	41 e0       	ldi	r20, 0x01	; 1
     bde:	64 e0       	ldi	r22, 0x04	; 4
     be0:	82 e4       	ldi	r24, 0x42	; 66
     be2:	0e 94 13 04 	call	0x826	; 0x826 <DIO_init>
     be6:	41 e0       	ldi	r20, 0x01	; 1
     be8:	65 e0       	ldi	r22, 0x05	; 5
     bea:	82 e4       	ldi	r24, 0x42	; 66
     bec:	0e 94 13 04 	call	0x826	; 0x826 <DIO_init>
     bf0:	41 e0       	ldi	r20, 0x01	; 1
     bf2:	67 e0       	ldi	r22, 0x07	; 7
     bf4:	82 e4       	ldi	r24, 0x42	; 66
     bf6:	0e 94 13 04 	call	0x826	; 0x826 <DIO_init>
     bfa:	40 e0       	ldi	r20, 0x00	; 0
     bfc:	66 e0       	ldi	r22, 0x06	; 6
     bfe:	82 e4       	ldi	r24, 0x42	; 66
     c00:	0e 94 13 04 	call	0x826	; 0x826 <DIO_init>
     c04:	41 e0       	ldi	r20, 0x01	; 1
     c06:	64 e0       	ldi	r22, 0x04	; 4
     c08:	82 e4       	ldi	r24, 0x42	; 66
     c0a:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     c0e:	8d b1       	in	r24, 0x0d	; 13
     c10:	80 64       	ori	r24, 0x40	; 64
     c12:	8d b9       	out	0x0d, r24	; 13
     c14:	8d b1       	in	r24, 0x0d	; 13
     c16:	80 61       	ori	r24, 0x10	; 16
     c18:	8d b9       	out	0x0d, r24	; 13
     c1a:	08 95       	ret

00000c1c <SPI_startTransmission>:
}


void SPI_startTransmission (void)
{
	DIO_write(PORT_B,4,LOW);
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	64 e0       	ldi	r22, 0x04	; 4
     c20:	82 e4       	ldi	r24, 0x42	; 66
     c22:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
     c26:	08 95       	ret

00000c28 <SPI_transmitByte>:
{
	 /*Master*/
	 
	u8 flushBuffer;
	 
	 SPDR=data;
     c28:	8f b9       	out	0x0f, r24	; 15
	 
	 while(GET_BIT(SPSR,SPIF)==0);
     c2a:	77 9b       	sbis	0x0e, 7	; 14
     c2c:	fe cf       	rjmp	.-4      	; 0xc2a <SPI_transmitByte+0x2>
	 
	 flushBuffer = SPDR;
     c2e:	8f b1       	in	r24, 0x0f	; 15
	 
	 return flushBuffer;
}
     c30:	08 95       	ret

00000c32 <TIMER_init>:
		{
			TIMER_1_callBack = funPtr;
		}
		else if (u8_a_timerUsed == TIMER_2)
		{
			TIMER_2_callBack = funPtr;
     c32:	81 11       	cpse	r24, r1
     c34:	0e c0       	rjmp	.+28     	; 0xc52 <TIMER_init+0x20>
     c36:	83 b7       	in	r24, 0x33	; 51
     c38:	87 7f       	andi	r24, 0xF7	; 247
     c3a:	83 bf       	out	0x33, r24	; 51
     c3c:	83 b7       	in	r24, 0x33	; 51
     c3e:	8f 7b       	andi	r24, 0xBF	; 191
     c40:	83 bf       	out	0x33, r24	; 51
     c42:	89 b7       	in	r24, 0x39	; 57
     c44:	81 60       	ori	r24, 0x01	; 1
     c46:	89 bf       	out	0x39, r24	; 57
     c48:	8f b7       	in	r24, 0x3f	; 63
     c4a:	80 68       	ori	r24, 0x80	; 128
     c4c:	8f bf       	out	0x3f, r24	; 63
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	08 95       	ret
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	81 f0       	breq	.+32     	; 0xc76 <TIMER_init+0x44>
     c56:	82 30       	cpi	r24, 0x02	; 2
     c58:	81 f4       	brne	.+32     	; 0xc7a <TIMER_init+0x48>
     c5a:	85 b5       	in	r24, 0x25	; 37
     c5c:	87 7f       	andi	r24, 0xF7	; 247
     c5e:	85 bd       	out	0x25, r24	; 37
     c60:	85 b5       	in	r24, 0x25	; 37
     c62:	8f 7b       	andi	r24, 0xBF	; 191
     c64:	85 bd       	out	0x25, r24	; 37
     c66:	89 b7       	in	r24, 0x39	; 57
     c68:	80 64       	ori	r24, 0x40	; 64
     c6a:	89 bf       	out	0x39, r24	; 57
     c6c:	8f b7       	in	r24, 0x3f	; 63
     c6e:	80 68       	ori	r24, 0x80	; 128
     c70:	8f bf       	out	0x3f, r24	; 63
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	08 95       	ret
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	08 95       	ret
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	08 95       	ret

00000c7e <TIMER_start>:
     c7e:	81 11       	cpse	r24, r1
     c80:	0b c0       	rjmp	.+22     	; 0xc98 <TIMER_start+0x1a>
     c82:	83 b7       	in	r24, 0x33	; 51
     c84:	84 60       	ori	r24, 0x04	; 4
     c86:	83 bf       	out	0x33, r24	; 51
     c88:	83 b7       	in	r24, 0x33	; 51
     c8a:	8d 7f       	andi	r24, 0xFD	; 253
     c8c:	83 bf       	out	0x33, r24	; 51
     c8e:	83 b7       	in	r24, 0x33	; 51
     c90:	8e 7f       	andi	r24, 0xFE	; 254
     c92:	83 bf       	out	0x33, r24	; 51
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	08 95       	ret
     c98:	81 30       	cpi	r24, 0x01	; 1
     c9a:	69 f0       	breq	.+26     	; 0xcb6 <TIMER_start+0x38>
     c9c:	82 30       	cpi	r24, 0x02	; 2
     c9e:	69 f4       	brne	.+26     	; 0xcba <TIMER_start+0x3c>
     ca0:	85 b5       	in	r24, 0x25	; 37
     ca2:	84 60       	ori	r24, 0x04	; 4
     ca4:	85 bd       	out	0x25, r24	; 37
     ca6:	85 b5       	in	r24, 0x25	; 37
     ca8:	82 60       	ori	r24, 0x02	; 2
     caa:	85 bd       	out	0x25, r24	; 37
     cac:	85 b5       	in	r24, 0x25	; 37
     cae:	8e 7f       	andi	r24, 0xFE	; 254
     cb0:	85 bd       	out	0x25, r24	; 37
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	08 95       	ret
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	08 95       	ret
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	08 95       	ret

00000cbe <TIMER_stopInterrupt>:
 */
en_timerError_t	TIMER_stopInterrupt(u8 u8_a_timerUsed)
{
	en_timerError_t en_a_error;
	
	if (u8_a_timerUsed == TIMER_0)
     cbe:	81 11       	cpse	r24, r1
     cc0:	07 c0       	rjmp	.+14     	; 0xcd0 <TIMER_stopInterrupt+0x12>
	{
		CLR_BIT(TIMSK,TOIE0);
     cc2:	89 b7       	in	r24, 0x39	; 57
     cc4:	8e 7f       	andi	r24, 0xFE	; 254
     cc6:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK,OCIE0);
     cc8:	89 b7       	in	r24, 0x39	; 57
     cca:	8d 7f       	andi	r24, 0xFD	; 253
     ccc:	89 bf       	out	0x39, r24	; 57
     cce:	0a c0       	rjmp	.+20     	; 0xce4 <TIMER_stopInterrupt+0x26>
	}
	else if (u8_a_timerUsed == TIMER_1)
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	41 f0       	breq	.+16     	; 0xce4 <TIMER_stopInterrupt+0x26>
	{
		
	}
	else if (u8_a_timerUsed == TIMER_2)
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	31 f4       	brne	.+12     	; 0xce4 <TIMER_stopInterrupt+0x26>
	{
		CLR_BIT(TIMSK,TOIE2);
     cd8:	89 b7       	in	r24, 0x39	; 57
     cda:	8f 7b       	andi	r24, 0xBF	; 191
     cdc:	89 bf       	out	0x39, r24	; 57
		CLR_BIT(TIMSK,OCIE2);
     cde:	89 b7       	in	r24, 0x39	; 57
     ce0:	8f 77       	andi	r24, 0x7F	; 127
     ce2:	89 bf       	out	0x39, r24	; 57
	else
	{
		en_a_error = WRONG_TIMER_USED;
	}
	return en_a_error;
}
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	08 95       	ret

00000ce8 <TIMER_enableInterrupt>:

en_timerError_t	TIMER_enableInterrupt(u8 u8_a_timerUsed)
{
	en_timerError_t en_a_error;
	
	if (u8_a_timerUsed == TIMER_0)
     ce8:	81 11       	cpse	r24, r1
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <TIMER_enableInterrupt+0xc>
	{
		#if		TIMER_0_MODE		==		OV_TIMER
		SET_BIT(TIMSK,TOIE0);
     cec:	89 b7       	in	r24, 0x39	; 57
     cee:	81 60       	ori	r24, 0x01	; 1
     cf0:	89 bf       	out	0x39, r24	; 57
     cf2:	07 c0       	rjmp	.+14     	; 0xd02 <TIMER_enableInterrupt+0x1a>
		#elif	TIMER_0_MODE		==	CTC_TIMER
		SET_BIT(TIMSK,OCIE0);
		#endif
	}
	else if (u8_a_timerUsed == TIMER_1)
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	29 f0       	breq	.+10     	; 0xd02 <TIMER_enableInterrupt+0x1a>
	{
		
	}
	else if (u8_a_timerUsed == TIMER_2)
     cf8:	82 30       	cpi	r24, 0x02	; 2
     cfa:	19 f4       	brne	.+6      	; 0xd02 <TIMER_enableInterrupt+0x1a>
	{
		#if		TIMER_2_MODE		==		OV_TIMER
		SET_BIT(TIMSK,TOIE2);
     cfc:	89 b7       	in	r24, 0x39	; 57
     cfe:	80 64       	ori	r24, 0x40	; 64
     d00:	89 bf       	out	0x39, r24	; 57
	else
	{
		en_a_error = WRONG_TIMER_USED;
	}
	return en_a_error;
}
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	08 95       	ret

00000d06 <TIMER_delay>:
 *Delays the program for the specified time using the specified timer.
 *u8_a_timerUsed The timer to use for the delay (TIMER_0, TIMER_1, or TIMER_2).
 *u32_a_timeInMS The time to delay the program in milliseconds. en_timerError_t Returns TIMER_OK if the operation was successful, or WRONG_TIMER_USED if an invalid timer is specified.
 */
en_timerError_t TIMER_delay(u8 u8_a_timerUsed, u32 u32_a_timeInMS)
{
     d06:	cf 92       	push	r12
     d08:	df 92       	push	r13
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
	en_timerError_t en_a_error;
	
	if (u8_a_timerUsed == TIMER_0)
     d12:	88 23       	and	r24, r24
     d14:	09 f4       	brne	.+2      	; 0xd18 <TIMER_delay+0x12>
     d16:	45 c0       	rjmp	.+138    	; 0xda2 <TIMER_delay+0x9c>
	{

	}
	else if (u8_a_timerUsed == TIMER_1)
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	09 f4       	brne	.+2      	; 0xd1e <TIMER_delay+0x18>
     d1c:	42 c0       	rjmp	.+132    	; 0xda2 <TIMER_delay+0x9c>
	{
		
	}
	else if (u8_a_timerUsed == TIMER_2)
     d1e:	82 30       	cpi	r24, 0x02	; 2
     d20:	09 f0       	breq	.+2      	; 0xd24 <TIMER_delay+0x1e>
     d22:	3f c0       	rjmp	.+126    	; 0xda2 <TIMER_delay+0x9c>
     d24:	6a 01       	movw	r12, r20
     d26:	7b 01       	movw	r14, r22
	{
		TIMER_stopInterrupt(TIMER_2);
     d28:	0e 94 5f 06 	call	0xcbe	; 0xcbe <TIMER_stopInterrupt>
		u32 numberOfOverflows = 0;
		u8 numberOfRemTicks	= 0;
		
		
		tickTime = TIMER_2_PRESCALER / XTAL_FREQ;
		numberOfTicks = ((u32_a_timeInMS*1000)/tickTime);
     d2c:	a8 ee       	ldi	r26, 0xE8	; 232
     d2e:	b3 e0       	ldi	r27, 0x03	; 3
     d30:	a7 01       	movw	r20, r14
     d32:	96 01       	movw	r18, r12
     d34:	0e 94 08 08 	call	0x1010	; 0x1010 <__muluhisi3>
     d38:	6b 01       	movw	r12, r22
     d3a:	7c 01       	movw	r14, r24
     d3c:	68 94       	set
     d3e:	13 f8       	bld	r1, 3
     d40:	f6 94       	lsr	r15
     d42:	e7 94       	ror	r14
     d44:	d7 94       	ror	r13
     d46:	c7 94       	ror	r12
     d48:	16 94       	lsr	r1
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <TIMER_delay+0x3a>
		numberOfOverflows = numberOfTicks / 256;
     d4c:	8b 01       	movw	r16, r22
     d4e:	9c 01       	movw	r18, r24
     d50:	0f 2e       	mov	r0, r31
     d52:	fc e0       	ldi	r31, 0x0C	; 12
     d54:	36 95       	lsr	r19
     d56:	27 95       	ror	r18
     d58:	17 95       	ror	r17
     d5a:	07 95       	ror	r16
     d5c:	fa 95       	dec	r31
     d5e:	d1 f7       	brne	.-12     	; 0xd54 <TIMER_delay+0x4e>
     d60:	f0 2d       	mov	r31, r0
		numberOfRemTicks	= numberOfTicks % 256;
		
		if (numberOfRemTicks)
     d62:	cc 20       	and	r12, r12
     d64:	51 f0       	breq	.+20     	; 0xd7a <TIMER_delay+0x74>
		{
			numberOfOverflows++;
     d66:	0f 5f       	subi	r16, 0xFF	; 255
     d68:	1f 4f       	sbci	r17, 0xFF	; 255
     d6a:	2f 4f       	sbci	r18, 0xFF	; 255
     d6c:	3f 4f       	sbci	r19, 0xFF	; 255
			TCNT2 = 256 - numberOfRemTicks;
     d6e:	c1 94       	neg	r12
     d70:	c4 bc       	out	0x24, r12	; 36
 *Delays the program for the specified time using the specified timer.
 *u8_a_timerUsed The timer to use for the delay (TIMER_0, TIMER_1, or TIMER_2).
 *u32_a_timeInMS The time to delay the program in milliseconds. en_timerError_t Returns TIMER_OK if the operation was successful, or WRONG_TIMER_USED if an invalid timer is specified.
 */
en_timerError_t TIMER_delay(u8 u8_a_timerUsed, u32 u32_a_timeInMS)
{
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	ba 01       	movw	r22, r20
     d78:	0c c0       	rjmp	.+24     	; 0xd92 <TIMER_delay+0x8c>
			numberOfOverflows++;
			TCNT2 = 256 - numberOfRemTicks;
		}
		else
		{
			TCNT2 = 0;
     d7a:	14 bc       	out	0x24, r1	; 36
     d7c:	fa cf       	rjmp	.-12     	; 0xd72 <TIMER_delay+0x6c>
		}
		while(overflowCounter < numberOfOverflows)		
		{
			while((GET_BIT(TIFR, TOV2)) == 0);
     d7e:	08 b6       	in	r0, 0x38	; 56
     d80:	06 fe       	sbrs	r0, 6
     d82:	fd cf       	rjmp	.-6      	; 0xd7e <TIMER_delay+0x78>
			SET_BIT(TIFR, TOV2);
     d84:	88 b7       	in	r24, 0x38	; 56
     d86:	80 64       	ori	r24, 0x40	; 64
     d88:	88 bf       	out	0x38, r24	; 56
			overflowCounter++;
     d8a:	4f 5f       	subi	r20, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	6f 4f       	sbci	r22, 0xFF	; 255
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		else
		{
			TCNT2 = 0;
		}
		while(overflowCounter < numberOfOverflows)		
     d92:	40 17       	cp	r20, r16
     d94:	51 07       	cpc	r21, r17
     d96:	62 07       	cpc	r22, r18
     d98:	73 07       	cpc	r23, r19
     d9a:	88 f3       	brcs	.-30     	; 0xd7e <TIMER_delay+0x78>
			while((GET_BIT(TIFR, TOV2)) == 0);
			SET_BIT(TIFR, TOV2);
			overflowCounter++;
		}
		
		TIMER_enableInterrupt(TIMER_2);
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	0e 94 74 06 	call	0xce8	; 0xce8 <TIMER_enableInterrupt>
	{
		en_a_error = WRONG_TIMER_USED;
	}
	return en_a_error;
	
}
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	cf 90       	pop	r12
     db0:	08 95       	ret

00000db2 <__vector_11>:

#if			TIMER_0_MODE		==		OV_TIMER
ISR(TIMER0_OVF)
{
     db2:	1f 92       	push	r1
     db4:	0f 92       	push	r0
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	0f 92       	push	r0
     dba:	11 24       	eor	r1, r1
     dbc:	2f 93       	push	r18
     dbe:	3f 93       	push	r19
     dc0:	4f 93       	push	r20
     dc2:	5f 93       	push	r21
     dc4:	6f 93       	push	r22
     dc6:	7f 93       	push	r23
     dc8:	8f 93       	push	r24
     dca:	9f 93       	push	r25
     dcc:	af 93       	push	r26
     dce:	bf 93       	push	r27
     dd0:	ef 93       	push	r30
     dd2:	ff 93       	push	r31
	if (u8_g_normalToPwm == 0	)
     dd4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u8_g_normalToPwm>
     dd8:	81 11       	cpse	r24, r1
     dda:	35 c0       	rjmp	.+106    	; 0xe46 <__vector_11+0x94>
	{
		
		static u32 OVFCounter = 0;
		OVFCounter  ++;
     ddc:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <OVFCounter.1713>
     de0:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <OVFCounter.1713+0x1>
     de4:	a0 91 4b 01 	lds	r26, 0x014B	; 0x80014b <OVFCounter.1713+0x2>
     de8:	b0 91 4c 01 	lds	r27, 0x014C	; 0x80014c <OVFCounter.1713+0x3>
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	a1 1d       	adc	r26, r1
     df0:	b1 1d       	adc	r27, r1
     df2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <OVFCounter.1713>
     df6:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <OVFCounter.1713+0x1>
     dfa:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <OVFCounter.1713+0x2>
     dfe:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <OVFCounter.1713+0x3>
		if (OVFCounter  == u32_g_timer0NumberOfOVFs)
     e02:	40 91 5b 01 	lds	r20, 0x015B	; 0x80015b <u32_g_timer0NumberOfOVFs>
     e06:	50 91 5c 01 	lds	r21, 0x015C	; 0x80015c <u32_g_timer0NumberOfOVFs+0x1>
     e0a:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <u32_g_timer0NumberOfOVFs+0x2>
     e0e:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <u32_g_timer0NumberOfOVFs+0x3>
     e12:	84 17       	cp	r24, r20
     e14:	95 07       	cpc	r25, r21
     e16:	a6 07       	cpc	r26, r22
     e18:	b7 07       	cpc	r27, r23
     e1a:	09 f0       	breq	.+2      	; 0xe1e <__vector_11+0x6c>
     e1c:	4a c0       	rjmp	.+148    	; 0xeb2 <__vector_11+0x100>
		{
			if(TIMER_0_callBack != nullPtr)
     e1e:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <TIMER_0_callBack>
     e22:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <TIMER_0_callBack+0x1>
     e26:	30 97       	sbiw	r30, 0x00	; 0
     e28:	09 f0       	breq	.+2      	; 0xe2c <__vector_11+0x7a>
			{
				TIMER_0_callBack();
     e2a:	09 95       	icall
			}
			OVFCounter  =	0;
     e2c:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <OVFCounter.1713>
     e30:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <OVFCounter.1713+0x1>
     e34:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <OVFCounter.1713+0x2>
     e38:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <OVFCounter.1713+0x3>
			TCNT0 = 256 - u8_g_timer0RemTicks;
     e3c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <u8_g_timer0RemTicks>
     e40:	81 95       	neg	r24
     e42:	82 bf       	out	0x32, r24	; 50
     e44:	36 c0       	rjmp	.+108    	; 0xeb2 <__vector_11+0x100>
		}
	}
	else
	{
		static u8 u8_gs_generatorState = 0;
		if (u8_gs_generatorState)
     e46:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <u8_gs_generatorState.1714>
     e4a:	88 23       	and	r24, r24
     e4c:	c9 f0       	breq	.+50     	; 0xe80 <__vector_11+0xce>
		{
			DIO_write(PORT_D,4,LOW);
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	64 e0       	ldi	r22, 0x04	; 4
     e52:	84 e4       	ldi	r24, 0x44	; 68
     e54:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
			DIO_write(PORT_D,5,LOW);
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	65 e0       	ldi	r22, 0x05	; 5
     e5c:	84 e4       	ldi	r24, 0x44	; 68
     e5e:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
			TCNT0 = 256 - u16_g_offTime;
     e62:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <u16_g_offTime>
     e66:	81 95       	neg	r24
     e68:	82 bf       	out	0x32, r24	; 50
			if (u16_g_offTime < 256)
     e6a:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <u16_g_offTime>
     e6e:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <u16_g_offTime+0x1>
     e72:	8f 3f       	cpi	r24, 0xFF	; 255
     e74:	91 05       	cpc	r25, r1
     e76:	09 f0       	breq	.+2      	; 0xe7a <__vector_11+0xc8>
     e78:	e0 f4       	brcc	.+56     	; 0xeb2 <__vector_11+0x100>
			{
				u8_gs_generatorState = 0;
     e7a:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <u8_gs_generatorState.1714>
     e7e:	19 c0       	rjmp	.+50     	; 0xeb2 <__vector_11+0x100>
			}	
		}
		else
		{
			DIO_write(PORT_D,4, HIGH);
     e80:	41 e0       	ldi	r20, 0x01	; 1
     e82:	64 e0       	ldi	r22, 0x04	; 4
     e84:	84 e4       	ldi	r24, 0x44	; 68
     e86:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
			DIO_write(PORT_D,5, HIGH);
     e8a:	41 e0       	ldi	r20, 0x01	; 1
     e8c:	65 e0       	ldi	r22, 0x05	; 5
     e8e:	84 e4       	ldi	r24, 0x44	; 68
     e90:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
			TCNT0 = 256 - u16_g_onTime;
     e94:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <u16_g_onTime>
     e98:	81 95       	neg	r24
     e9a:	82 bf       	out	0x32, r24	; 50
			if (u16_g_onTime < 256)
     e9c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <u16_g_onTime>
     ea0:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <u16_g_onTime+0x1>
     ea4:	8f 3f       	cpi	r24, 0xFF	; 255
     ea6:	91 05       	cpc	r25, r1
     ea8:	09 f0       	breq	.+2      	; 0xeac <__vector_11+0xfa>
     eaa:	18 f4       	brcc	.+6      	; 0xeb2 <__vector_11+0x100>
			{
				u8_gs_generatorState = 1;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <u8_gs_generatorState.1714>
			}
			
		}
		
	}
}
     eb2:	ff 91       	pop	r31
     eb4:	ef 91       	pop	r30
     eb6:	bf 91       	pop	r27
     eb8:	af 91       	pop	r26
     eba:	9f 91       	pop	r25
     ebc:	8f 91       	pop	r24
     ebe:	7f 91       	pop	r23
     ec0:	6f 91       	pop	r22
     ec2:	5f 91       	pop	r21
     ec4:	4f 91       	pop	r20
     ec6:	3f 91       	pop	r19
     ec8:	2f 91       	pop	r18
     eca:	0f 90       	pop	r0
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <__vector_5>:
	}
}
#endif

ISR(TIMER2_OVF)
{		
     ed4:	1f 92       	push	r1
     ed6:	0f 92       	push	r0
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	2f 93       	push	r18
     ee0:	3f 93       	push	r19
     ee2:	4f 93       	push	r20
     ee4:	5f 93       	push	r21
     ee6:	6f 93       	push	r22
     ee8:	7f 93       	push	r23
     eea:	8f 93       	push	r24
     eec:	9f 93       	push	r25
     eee:	af 93       	push	r26
     ef0:	bf 93       	push	r27
     ef2:	ef 93       	push	r30
     ef4:	ff 93       	push	r31
		static u32 OVFCounter = 0;
		OVFCounter  ++;
     ef6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <OVFCounter.1720>
     efa:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <OVFCounter.1720+0x1>
     efe:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <OVFCounter.1720+0x2>
     f02:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <OVFCounter.1720+0x3>
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	a1 1d       	adc	r26, r1
     f0a:	b1 1d       	adc	r27, r1
     f0c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <OVFCounter.1720>
     f10:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <OVFCounter.1720+0x1>
     f14:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <OVFCounter.1720+0x2>
     f18:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <OVFCounter.1720+0x3>
		if (OVFCounter  == u32_g_timer2NumberOfOVFs)
     f1c:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <u32_g_timer2NumberOfOVFs>
     f20:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <u32_g_timer2NumberOfOVFs+0x1>
     f24:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <u32_g_timer2NumberOfOVFs+0x2>
     f28:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <u32_g_timer2NumberOfOVFs+0x3>
     f2c:	84 17       	cp	r24, r20
     f2e:	95 07       	cpc	r25, r21
     f30:	a6 07       	cpc	r26, r22
     f32:	b7 07       	cpc	r27, r23
     f34:	99 f4       	brne	.+38     	; 0xf5c <__vector_5+0x88>
		{
			if(TIMER_2_callBack != nullPtr)
     f36:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <TIMER_2_callBack>
     f3a:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <TIMER_2_callBack+0x1>
     f3e:	30 97       	sbiw	r30, 0x00	; 0
     f40:	09 f0       	breq	.+2      	; 0xf44 <__vector_5+0x70>
			{
				TIMER_2_callBack();
     f42:	09 95       	icall
			}
			OVFCounter  =	0;
     f44:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <OVFCounter.1720>
     f48:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <OVFCounter.1720+0x1>
     f4c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <OVFCounter.1720+0x2>
     f50:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <OVFCounter.1720+0x3>
			TCNT0 = 256 - u8_g_timer2RemTicks;
     f54:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <u8_g_timer2RemTicks>
     f58:	81 95       	neg	r24
     f5a:	82 bf       	out	0x32, r24	; 50
			
		}

     f5c:	ff 91       	pop	r31
     f5e:	ef 91       	pop	r30
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	7f 91       	pop	r23
     f6a:	6f 91       	pop	r22
     f6c:	5f 91       	pop	r21
     f6e:	4f 91       	pop	r20
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <UART_Init>:
#include "uart.h"

void UART_Init(void)
{
	
	DIO_write(PORT_D, 0, INPUT);
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	84 e4       	ldi	r24, 0x44	; 68
     f84:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
	DIO_write(PORT_D, 1, OUTPUT);
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	84 e4       	ldi	r24, 0x44	; 68
     f8e:	0e 94 9e 04 	call	0x93c	; 0x93c <DIO_write>
	
	
	
	u8 UCSRCValue = 0;
	SET_BIT(UCSRCValue,7);
	CLR_BIT(UCSRB,2);
     f92:	8a b1       	in	r24, 0x0a	; 10
     f94:	8b 7f       	andi	r24, 0xFB	; 251
     f96:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRCValue,2);
	CLR_BIT(UCSRCValue,4);
	CLR_BIT(UCSRCValue,5);
	CLR_BIT(UCSRCValue,3);    // to select stop bit as -> 1
	
	UBRRL = 103;
     f98:	87 e6       	ldi	r24, 0x67	; 103
     f9a:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = UCSRCValue;
     f9c:	86 e8       	ldi	r24, 0x86	; 134
     f9e:	80 bd       	out	0x20, r24	; 32
	//SET_BIT(UCSRC,UCSZ1);
	//SET_BIT(UCSRC,URSEL);
	
	// Enable RX and TX
	//UCSRB = 0x18;
	SET_BIT(UCSRB,RXEN);
     fa0:	8a b1       	in	r24, 0x0a	; 10
     fa2:	80 61       	ori	r24, 0x10	; 16
     fa4:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB,TXEN);
     fa6:	8a b1       	in	r24, 0x0a	; 10
     fa8:	88 60       	ori	r24, 0x08	; 8
     faa:	8a b9       	out	0x0a, r24	; 10
     fac:	08 95       	ret

00000fae <UART_SendChar>:
}

void UART_SendChar(u8 data)
{
	// Wait until transmission Register Empty
	UDR = data;
     fae:	8c b9       	out	0x0c, r24	; 12
	while(GET_BIT(UCSRA,6) == 0x00);
     fb0:	5e 9b       	sbis	0x0b, 6	; 11
     fb2:	fe cf       	rjmp	.-4      	; 0xfb0 <UART_SendChar+0x2>
	
}
     fb4:	08 95       	ret

00000fb6 <UART_GetChar>:
u8 UART_GetChar(void)
{
	u8 Result;
	// Wait until Reception Complete

	while(	GET_BIT(UCSRA,7) == 0x00);
     fb6:	5f 9b       	sbis	0x0b, 7	; 11
     fb8:	fe cf       	rjmp	.-4      	; 0xfb6 <UART_GetChar>
	Result = UDR;
     fba:	8c b1       	in	r24, 0x0c	; 12

	/* Clear Flag */
	//SET_BIT(UCSRA,RXC);
	return Result;

}
     fbc:	08 95       	ret

00000fbe <UART_sendString>:


void UART_sendString(u8 *str)
{
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	8c 01       	movw	r16, r24
	u8 i=0;
     fc6:	c0 e0       	ldi	r28, 0x00	; 0


	while(str[i]!='\0')
     fc8:	0a c0       	rjmp	.+20     	; 0xfde <UART_sendString+0x20>
	{
		UART_SendChar(str[i]);
     fca:	0e 94 d7 07 	call	0xfae	; 0xfae <UART_SendChar>
		TIMER_delay(TIMER_2, 10);
     fce:	4a e0       	ldi	r20, 0x0A	; 10
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	0e 94 83 06 	call	0xd06	; 0xd06 <TIMER_delay>
		i++;
     fdc:	cf 5f       	subi	r28, 0xFF	; 255
void UART_sendString(u8 *str)
{
	u8 i=0;


	while(str[i]!='\0')
     fde:	f8 01       	movw	r30, r16
     fe0:	ec 0f       	add	r30, r28
     fe2:	f1 1d       	adc	r31, r1
     fe4:	80 81       	ld	r24, Z
     fe6:	81 11       	cpse	r24, r1
     fe8:	f0 cf       	rjmp	.-32     	; 0xfca <UART_sendString+0xc>

	}



}
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <__umulhisi3>:
     ff2:	a2 9f       	mul	r26, r18
     ff4:	b0 01       	movw	r22, r0
     ff6:	b3 9f       	mul	r27, r19
     ff8:	c0 01       	movw	r24, r0
     ffa:	a3 9f       	mul	r26, r19
     ffc:	70 0d       	add	r23, r0
     ffe:	81 1d       	adc	r24, r1
    1000:	11 24       	eor	r1, r1
    1002:	91 1d       	adc	r25, r1
    1004:	b2 9f       	mul	r27, r18
    1006:	70 0d       	add	r23, r0
    1008:	81 1d       	adc	r24, r1
    100a:	11 24       	eor	r1, r1
    100c:	91 1d       	adc	r25, r1
    100e:	08 95       	ret

00001010 <__muluhisi3>:
    1010:	0e 94 f9 07 	call	0xff2	; 0xff2 <__umulhisi3>
    1014:	a5 9f       	mul	r26, r21
    1016:	90 0d       	add	r25, r0
    1018:	b4 9f       	mul	r27, r20
    101a:	90 0d       	add	r25, r0
    101c:	a4 9f       	mul	r26, r20
    101e:	80 0d       	add	r24, r0
    1020:	91 1d       	adc	r25, r1
    1022:	11 24       	eor	r1, r1
    1024:	08 95       	ret

00001026 <_exit>:
    1026:	f8 94       	cli

00001028 <__stop_program>:
    1028:	ff cf       	rjmp	.-2      	; 0x1028 <__stop_program>
