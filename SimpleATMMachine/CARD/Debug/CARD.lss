
CARD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800060  00800060  00000528  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ea  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c9  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8a  00000000  00000000  0000205f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00002aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071b  00000000  00000000  00002d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e19  00000000  00000000  000034ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000042c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_5>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 37       	cpi	r26, 0x7F	; 127
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "APP/app.h"


int main(void)
{
SPI_initMaster();
  7c:	0e 94 57 01 	call	0x2ae	; 0x2ae <SPI_initMaster>
  80:	ff cf       	rjmp	.-2      	; 0x80 <main+0x4>

00000082 <DIO_init>:
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
	if (u8_a_pinNumber < 8)
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_init+0x6>
  86:	80 c0       	rjmp	.+256    	; 0x188 <DIO_init+0x106>
	{
		
		switch(u8_a_direction)
  88:	44 23       	and	r20, r20
  8a:	21 f0       	breq	.+8      	; 0x94 <DIO_init+0x12>
  8c:	41 30       	cpi	r20, 0x01	; 1
  8e:	09 f4       	brne	.+2      	; 0x92 <DIO_init+0x10>
  90:	40 c0       	rjmp	.+128    	; 0x112 <DIO_init+0x90>
  92:	7c c0       	rjmp	.+248    	; 0x18c <DIO_init+0x10a>
		{
			case INPUT:
			switch(u8_a_portNumber)
  94:	82 34       	cpi	r24, 0x42	; 66
  96:	b1 f0       	breq	.+44     	; 0xc4 <DIO_init+0x42>
  98:	18 f4       	brcc	.+6      	; 0xa0 <DIO_init+0x1e>
  9a:	81 34       	cpi	r24, 0x41	; 65
  9c:	31 f0       	breq	.+12     	; 0xaa <DIO_init+0x28>
  9e:	78 c0       	rjmp	.+240    	; 0x190 <DIO_init+0x10e>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	e9 f0       	breq	.+58     	; 0xde <DIO_init+0x5c>
  a4:	84 34       	cpi	r24, 0x44	; 68
  a6:	41 f1       	breq	.+80     	; 0xf8 <DIO_init+0x76>
  a8:	73 c0       	rjmp	.+230    	; 0x190 <DIO_init+0x10e>
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_init+0x34>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_init+0x30>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
  c0:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_direction)
		{
			case INPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
  c2:	08 95       	ret
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
  c4:	27 b3       	in	r18, 0x17	; 23
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_init+0x4e>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_init+0x4a>
  d4:	80 95       	com	r24
  d6:	82 23       	and	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
  da:	80 e0       	ldi	r24, 0x00	; 0
		{
			case INPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
  dc:	08 95       	ret
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
  de:	24 b3       	in	r18, 0x14	; 20
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_init+0x68>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_init+0x64>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	84 bb       	out	0x14, r24	; 20
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
  f4:	80 e0       	ldi	r24, 0x00	; 0
			case INPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
  f6:	08 95       	ret
				case PORT_D:	DDRD &= ~ (1<<u8_a_pinNumber);	break;
  f8:	21 b3       	in	r18, 0x11	; 17
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_init+0x82>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_init+0x7e>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	81 bb       	out	0x11, r24	; 17
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
 10e:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_D:	DDRD &= ~ (1<<u8_a_pinNumber);	break;
 110:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;	break;
			}
			break;
			
			case OUTPUT:
			switch(u8_a_portNumber)
 112:	82 34       	cpi	r24, 0x42	; 66
 114:	a9 f0       	breq	.+42     	; 0x140 <DIO_init+0xbe>
 116:	18 f4       	brcc	.+6      	; 0x11e <DIO_init+0x9c>
 118:	81 34       	cpi	r24, 0x41	; 65
 11a:	31 f0       	breq	.+12     	; 0x128 <DIO_init+0xa6>
 11c:	3b c0       	rjmp	.+118    	; 0x194 <DIO_init+0x112>
 11e:	83 34       	cpi	r24, 0x43	; 67
 120:	d9 f0       	breq	.+54     	; 0x158 <DIO_init+0xd6>
 122:	84 34       	cpi	r24, 0x44	; 68
 124:	29 f1       	breq	.+74     	; 0x170 <DIO_init+0xee>
 126:	36 c0       	rjmp	.+108    	; 0x194 <DIO_init+0x112>
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
 128:	2a b3       	in	r18, 0x1a	; 26
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_init+0xb2>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_init+0xae>
 138:	82 2b       	or	r24, r18
 13a:	8a bb       	out	0x1a, r24	; 26
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
 13c:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case OUTPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
 13e:	08 95       	ret
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
 140:	27 b3       	in	r18, 0x17	; 23
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_init+0xca>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_init+0xc6>
 150:	82 2b       	or	r24, r18
 152:	87 bb       	out	0x17, r24	; 23
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
 154:	80 e0       	ldi	r24, 0x00	; 0
			
			case OUTPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
 156:	08 95       	ret
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
 158:	24 b3       	in	r18, 0x14	; 20
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_init+0xe2>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_init+0xde>
 168:	82 2b       	or	r24, r18
 16a:	84 bb       	out	0x14, r24	; 20
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
 16c:	80 e0       	ldi	r24, 0x00	; 0
			case OUTPUT:
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
 16e:	08 95       	ret
				case PORT_D:	DDRD |= (1<<u8_a_pinNumber);		break;
 170:	21 b3       	in	r18, 0x11	; 17
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_init+0xfa>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_init+0xf6>
 180:	82 2b       	or	r24, r18
 182:	81 bb       	out	0x11, r24	; 17
*										WRONG_DIRECTION
*******************************************************************************/

en_dioError_t DIO_init(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_direction)	// Initialize dio direction
{
	en_dioError_t error = DIO_OK;
 184:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	DDRD |= (1<<u8_a_pinNumber);		break;
 186:	08 95       	ret
		}
		
	}
	else
	{
		error = WRONG_PIN_NUMBER;
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;	break;
			}
			break;
			
			default:
			error = WRONG_DIRECTION;
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	08 95       	ret
			{
				case PORT_A:	DDRA &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_B:	DDRB &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_C:	DDRC &= ~ (1<<u8_a_pinNumber);	break;
				case PORT_D:	DDRD &= ~ (1<<u8_a_pinNumber);	break;
				default:		error = WRONG_PORT_NUMBER;	break;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	08 95       	ret
			{
				case PORT_A:	DDRA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	DDRB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	DDRC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	DDRD |= (1<<u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;	break;
 194:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;
}
 196:	08 95       	ret

00000198 <DIO_write>:
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
	if (u8_a_pinNumber < 8)
 198:	68 30       	cpi	r22, 0x08	; 8
 19a:	08 f0       	brcs	.+2      	; 0x19e <DIO_write+0x6>
 19c:	80 c0       	rjmp	.+256    	; 0x29e <DIO_write+0x106>
	{
		switch(u8_a_value)
 19e:	44 23       	and	r20, r20
 1a0:	21 f0       	breq	.+8      	; 0x1aa <DIO_write+0x12>
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <DIO_write+0x10>
 1a6:	40 c0       	rjmp	.+128    	; 0x228 <DIO_write+0x90>
 1a8:	7c c0       	rjmp	.+248    	; 0x2a2 <DIO_write+0x10a>
		{
			case LOW:
			switch(u8_a_portNumber)
 1aa:	82 34       	cpi	r24, 0x42	; 66
 1ac:	b1 f0       	breq	.+44     	; 0x1da <DIO_write+0x42>
 1ae:	18 f4       	brcc	.+6      	; 0x1b6 <DIO_write+0x1e>
 1b0:	81 34       	cpi	r24, 0x41	; 65
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <DIO_write+0x28>
 1b4:	78 c0       	rjmp	.+240    	; 0x2a6 <DIO_write+0x10e>
 1b6:	83 34       	cpi	r24, 0x43	; 67
 1b8:	e9 f0       	breq	.+58     	; 0x1f4 <DIO_write+0x5c>
 1ba:	84 34       	cpi	r24, 0x44	; 68
 1bc:	41 f1       	breq	.+80     	; 0x20e <DIO_write+0x76>
 1be:	73 c0       	rjmp	.+230    	; 0x2a6 <DIO_write+0x10e>
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
 1c0:	2b b3       	in	r18, 0x1b	; 27
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_write+0x34>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_write+0x30>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	8b bb       	out	0x1b, r24	; 27
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_value)
		{
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
 1d8:	08 95       	ret
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
 1da:	28 b3       	in	r18, 0x18	; 24
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_write+0x4e>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_write+0x4a>
 1ea:	80 95       	com	r24
 1ec:	82 23       	and	r24, r18
 1ee:	88 bb       	out	0x18, r24	; 24
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 1f0:	80 e0       	ldi	r24, 0x00	; 0
		{
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
 1f2:	08 95       	ret
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
 1f4:	25 b3       	in	r18, 0x15	; 21
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_write+0x68>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_write+0x64>
 204:	80 95       	com	r24
 206:	82 23       	and	r24, r18
 208:	85 bb       	out	0x15, r24	; 21
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 20a:	80 e0       	ldi	r24, 0x00	; 0
			case LOW:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
 20c:	08 95       	ret
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
 20e:	22 b3       	in	r18, 0x12	; 18
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_write+0x82>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_write+0x7e>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	82 bb       	out	0x12, r24	; 18
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 224:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
 226:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;		break;
			}
			break;
				
			case HIGH:
			switch(u8_a_portNumber)
 228:	82 34       	cpi	r24, 0x42	; 66
 22a:	a9 f0       	breq	.+42     	; 0x256 <DIO_write+0xbe>
 22c:	18 f4       	brcc	.+6      	; 0x234 <DIO_write+0x9c>
 22e:	81 34       	cpi	r24, 0x41	; 65
 230:	31 f0       	breq	.+12     	; 0x23e <DIO_write+0xa6>
 232:	3b c0       	rjmp	.+118    	; 0x2aa <DIO_write+0x112>
 234:	83 34       	cpi	r24, 0x43	; 67
 236:	d9 f0       	breq	.+54     	; 0x26e <DIO_write+0xd6>
 238:	84 34       	cpi	r24, 0x44	; 68
 23a:	29 f1       	breq	.+74     	; 0x286 <DIO_write+0xee>
 23c:	36 c0       	rjmp	.+108    	; 0x2aa <DIO_write+0x112>
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
 23e:	2b b3       	in	r18, 0x1b	; 27
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_write+0xb2>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_write+0xae>
 24e:	82 2b       	or	r24, r18
 250:	8b bb       	out	0x1b, r24	; 27
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 252:	80 e0       	ldi	r24, 0x00	; 0
			break;
				
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
 254:	08 95       	ret
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
 256:	28 b3       	in	r18, 0x18	; 24
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_write+0xca>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_write+0xc6>
 266:	82 2b       	or	r24, r18
 268:	88 bb       	out	0x18, r24	; 24
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 26a:	80 e0       	ldi	r24, 0x00	; 0
				
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
 26c:	08 95       	ret
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
 26e:	25 b3       	in	r18, 0x15	; 21
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_write+0xe2>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_write+0xde>
 27e:	82 2b       	or	r24, r18
 280:	85 bb       	out	0x15, r24	; 21
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 282:	80 e0       	ldi	r24, 0x00	; 0
			case HIGH:
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
 284:	08 95       	ret
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
 286:	22 b3       	in	r18, 0x12	; 18
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_write+0xfa>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_write+0xf6>
 296:	82 2b       	or	r24, r18
 298:	82 bb       	out	0x12, r24	; 18
*										WRONG_VALUE
*******************************************************************************/

en_dioError_t DIO_write(u8 u8_a_portNumber, u8 u8_a_pinNumber, u8 u8_a_value)		// Write data to dio
{
	en_dioError_t error = DIO_OK;
 29a:	80 e0       	ldi	r24, 0x00	; 0
			switch(u8_a_portNumber)
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
 29c:	08 95       	ret
				break;
		}
	}
	else
	{
		error = WRONG_PIN_NUMBER;
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;		break;
			}
			break;
				
			default:
				error = WRONG_VALUE;
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	08 95       	ret
			{
				case PORT_A:	PORTA &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC &= ~ (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD &= ~ (1<<u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;		break;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	08 95       	ret
			{
				case PORT_A:	PORTA |= (1<<u8_a_pinNumber);		break;
				case PORT_B:	PORTB |= (1<<u8_a_pinNumber);		break;
				case PORT_C:	PORTC |= (1<<u8_a_pinNumber);		break;
				case PORT_D:	PORTD |= (1<<u8_a_pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;		break;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;

}
 2ac:	08 95       	ret

000002ae <SPI_initMaster>:
 * Created: 4/28/2023 1:44:45 PM
 *  Author: Speed
 */ #include "spi.h"
 void SPI_initMaster(void)
 {
 DIO_init(PORT_B,4,OUTPUT);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	64 e0       	ldi	r22, 0x04	; 4
 2b2:	82 e4       	ldi	r24, 0x42	; 66
 2b4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>
 DIO_init(PORT_B,5,OUTPUT);
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	65 e0       	ldi	r22, 0x05	; 5
 2bc:	82 e4       	ldi	r24, 0x42	; 66
 2be:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>
 DIO_init(PORT_B,7,OUTPUT);
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	67 e0       	ldi	r22, 0x07	; 7
 2c6:	82 e4       	ldi	r24, 0x42	; 66
 2c8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>
 DIO_init(PORT_B,6,INPUT);
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	66 e0       	ldi	r22, 0x06	; 6
 2d0:	82 e4       	ldi	r24, 0x42	; 66
 2d2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_init>

 SET_BIT(SPCR,SPE);
 2d6:	8d b1       	in	r24, 0x0d	; 13
 2d8:	80 64       	ori	r24, 0x40	; 64
 2da:	8d b9       	out	0x0d, r24	; 13
 SET_BIT(SPCR,MSTR);
 2dc:	8d b1       	in	r24, 0x0d	; 13
 2de:	80 61       	ori	r24, 0x10	; 16
 2e0:	8d b9       	out	0x0d, r24	; 13
 2e2:	08 95       	ret

000002e4 <__vector_11>:
	
}

#if			TIMER_0_MODE		==		OV_TIMER
ISR(TIMER0_OVF)
{
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	2f 93       	push	r18
 2f0:	3f 93       	push	r19
 2f2:	4f 93       	push	r20
 2f4:	5f 93       	push	r21
 2f6:	6f 93       	push	r22
 2f8:	7f 93       	push	r23
 2fa:	8f 93       	push	r24
 2fc:	9f 93       	push	r25
 2fe:	af 93       	push	r26
 300:	bf 93       	push	r27
 302:	ef 93       	push	r30
 304:	ff 93       	push	r31
	if (u8_g_normalToPwm == 0	)
 306:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <u8_g_normalToPwm>
 30a:	81 11       	cpse	r24, r1
 30c:	35 c0       	rjmp	.+106    	; 0x378 <__vector_11+0x94>
	{
		
		static u32 OVFCounter = 0;
		OVFCounter  ++;
 30e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <OVFCounter.1713>
 312:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <OVFCounter.1713+0x1>
 316:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <OVFCounter.1713+0x2>
 31a:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <OVFCounter.1713+0x3>
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	a1 1d       	adc	r26, r1
 322:	b1 1d       	adc	r27, r1
 324:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <OVFCounter.1713>
 328:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <OVFCounter.1713+0x1>
 32c:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <OVFCounter.1713+0x2>
 330:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <OVFCounter.1713+0x3>
		if (OVFCounter  == u32_g_timer0NumberOfOVFs)
 334:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <u32_g_timer0NumberOfOVFs>
 338:	50 91 78 00 	lds	r21, 0x0078	; 0x800078 <u32_g_timer0NumberOfOVFs+0x1>
 33c:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <u32_g_timer0NumberOfOVFs+0x2>
 340:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <u32_g_timer0NumberOfOVFs+0x3>
 344:	84 17       	cp	r24, r20
 346:	95 07       	cpc	r25, r21
 348:	a6 07       	cpc	r26, r22
 34a:	b7 07       	cpc	r27, r23
 34c:	09 f0       	breq	.+2      	; 0x350 <__vector_11+0x6c>
 34e:	4a c0       	rjmp	.+148    	; 0x3e4 <__vector_11+0x100>
		{
			if(TIMER_0_callBack != nullPtr)
 350:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <TIMER_0_callBack>
 354:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <TIMER_0_callBack+0x1>
 358:	30 97       	sbiw	r30, 0x00	; 0
 35a:	09 f0       	breq	.+2      	; 0x35e <__vector_11+0x7a>
			{
				TIMER_0_callBack();
 35c:	09 95       	icall
			}
			OVFCounter  =	0;
 35e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <OVFCounter.1713>
 362:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <OVFCounter.1713+0x1>
 366:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <OVFCounter.1713+0x2>
 36a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <OVFCounter.1713+0x3>
			TCNT0 = 256 - u8_g_timer0RemTicks;
 36e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <u8_g_timer0RemTicks>
 372:	81 95       	neg	r24
 374:	82 bf       	out	0x32, r24	; 50
 376:	36 c0       	rjmp	.+108    	; 0x3e4 <__vector_11+0x100>
		}
	}
	else
	{
		static u8 u8_gs_generatorState = 0;
		if (u8_gs_generatorState)
 378:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <u8_gs_generatorState.1714>
 37c:	88 23       	and	r24, r24
 37e:	c9 f0       	breq	.+50     	; 0x3b2 <__vector_11+0xce>
		{
			DIO_write(PORT_D,4,LOW);
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	64 e0       	ldi	r22, 0x04	; 4
 384:	84 e4       	ldi	r24, 0x44	; 68
 386:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
			DIO_write(PORT_D,5,LOW);
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	65 e0       	ldi	r22, 0x05	; 5
 38e:	84 e4       	ldi	r24, 0x44	; 68
 390:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
			TCNT0 = 256 - u16_g_offTime;
 394:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <u16_g_offTime>
 398:	81 95       	neg	r24
 39a:	82 bf       	out	0x32, r24	; 50
			if (u16_g_offTime < 256)
 39c:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <u16_g_offTime>
 3a0:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <u16_g_offTime+0x1>
 3a4:	8f 3f       	cpi	r24, 0xFF	; 255
 3a6:	91 05       	cpc	r25, r1
 3a8:	09 f0       	breq	.+2      	; 0x3ac <__vector_11+0xc8>
 3aa:	e0 f4       	brcc	.+56     	; 0x3e4 <__vector_11+0x100>
			{
				u8_gs_generatorState = 0;
 3ac:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <u8_gs_generatorState.1714>
 3b0:	19 c0       	rjmp	.+50     	; 0x3e4 <__vector_11+0x100>
			}	
		}
		else
		{
			DIO_write(PORT_D,4, HIGH);
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	64 e0       	ldi	r22, 0x04	; 4
 3b6:	84 e4       	ldi	r24, 0x44	; 68
 3b8:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
			DIO_write(PORT_D,5, HIGH);
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	65 e0       	ldi	r22, 0x05	; 5
 3c0:	84 e4       	ldi	r24, 0x44	; 68
 3c2:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
			TCNT0 = 256 - u16_g_onTime;
 3c6:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u16_g_onTime>
 3ca:	81 95       	neg	r24
 3cc:	82 bf       	out	0x32, r24	; 50
			if (u16_g_onTime < 256)
 3ce:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <u16_g_onTime>
 3d2:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <u16_g_onTime+0x1>
 3d6:	8f 3f       	cpi	r24, 0xFF	; 255
 3d8:	91 05       	cpc	r25, r1
 3da:	09 f0       	breq	.+2      	; 0x3de <__vector_11+0xfa>
 3dc:	18 f4       	brcc	.+6      	; 0x3e4 <__vector_11+0x100>
			{
				u8_gs_generatorState = 1;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <u8_gs_generatorState.1714>
			}
			
		}
		
	}
}
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	7f 91       	pop	r23
 3f2:	6f 91       	pop	r22
 3f4:	5f 91       	pop	r21
 3f6:	4f 91       	pop	r20
 3f8:	3f 91       	pop	r19
 3fa:	2f 91       	pop	r18
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <__vector_5>:
	}
}
#endif

ISR(TIMER2_OVF)
{		
 406:	1f 92       	push	r1
 408:	0f 92       	push	r0
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	0f 92       	push	r0
 40e:	11 24       	eor	r1, r1
 410:	2f 93       	push	r18
 412:	3f 93       	push	r19
 414:	4f 93       	push	r20
 416:	5f 93       	push	r21
 418:	6f 93       	push	r22
 41a:	7f 93       	push	r23
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
 420:	af 93       	push	r26
 422:	bf 93       	push	r27
 424:	ef 93       	push	r30
 426:	ff 93       	push	r31
		static u32 OVFCounter = 0;
		OVFCounter  ++;
 428:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 42c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 430:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 434:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	a1 1d       	adc	r26, r1
 43c:	b1 1d       	adc	r27, r1
 43e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 442:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 446:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 44a:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		if (OVFCounter  == u32_g_timer2NumberOfOVFs)
 44e:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <u32_g_timer2NumberOfOVFs>
 452:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <u32_g_timer2NumberOfOVFs+0x1>
 456:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <u32_g_timer2NumberOfOVFs+0x2>
 45a:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <u32_g_timer2NumberOfOVFs+0x3>
 45e:	84 17       	cp	r24, r20
 460:	95 07       	cpc	r25, r21
 462:	a6 07       	cpc	r26, r22
 464:	b7 07       	cpc	r27, r23
 466:	99 f4       	brne	.+38     	; 0x48e <__vector_5+0x88>
		{
			if(TIMER_2_callBack != nullPtr)
 468:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TIMER_2_callBack>
 46c:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TIMER_2_callBack+0x1>
 470:	30 97       	sbiw	r30, 0x00	; 0
 472:	09 f0       	breq	.+2      	; 0x476 <__vector_5+0x70>
			{
				TIMER_2_callBack();
 474:	09 95       	icall
			}
			OVFCounter  =	0;
 476:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 47a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 47e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 482:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
			TCNT0 = 256 - u8_g_timer2RemTicks;
 486:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <u8_g_timer2RemTicks>
 48a:	81 95       	neg	r24
 48c:	82 bf       	out	0x32, r24	; 50
			
		}

 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	bf 91       	pop	r27
 494:	af 91       	pop	r26
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	7f 91       	pop	r23
 49c:	6f 91       	pop	r22
 49e:	5f 91       	pop	r21
 4a0:	4f 91       	pop	r20
 4a2:	3f 91       	pop	r19
 4a4:	2f 91       	pop	r18
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

000004b0 <_exit>:
 4b0:	f8 94       	cli

000004b2 <__stop_program>:
 4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <__stop_program>
